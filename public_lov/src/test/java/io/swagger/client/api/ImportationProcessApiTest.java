/*
 * Catalogs
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BeezUPCommonErrorResponseMessage;
import io.swagger.client.model.BeezUPCommonLink2;
import io.swagger.client.model.ImportationMonitoring;
import io.swagger.client.model.ImportationReporting;
import io.swagger.client.model.ImportationTechnicalProgression;
import io.swagger.client.model.InlineResponse409;
import io.swagger.client.model.StartManualImportRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ImportationProcessApi
 */
@Ignore
public class ImportationProcessApiTest {

    private final ImportationProcessApi api = new ImportationProcessApi();

    
    /**
     * Cancel importation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationCancelTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        api.importationCancel(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Commit Importation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationCommitTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        api.importationCommit(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Commit columns
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationCommitColumnsTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        api.importationCommitColumns(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Configure remaining catalog columns
     *
     * This operation should be used after you have mapped the required BeezUP Columns
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationConfigureRemainingCatalogColumnsTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        api.importationConfigureRemainingCatalogColumns(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Get the importation status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetImportationMonitoringTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        ImportationMonitoring response = api.importationGetImportationMonitoring(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Get the latest catalog importation reporting
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetReportingsTest() throws ApiException {
        String storeId = null;
        List<ImportationReporting> response = api.importationGetReportings(storeId);

        // TODO: test validations
    }
    
    /**
     * Start Manual Import
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationStartManualUpdateTest() throws ApiException {
        String storeId = null;
        StartManualImportRequest request = null;
        List<BeezUPCommonLink2> response = api.importationStartManualUpdate(storeId, request);

        // TODO: test validations
    }
    
    /**
     * Get technical progression
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationTechnicalProgressionTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        ImportationTechnicalProgression response = api.importationTechnicalProgression(storeId, executionId);

        // TODO: test validations
    }
    
}
