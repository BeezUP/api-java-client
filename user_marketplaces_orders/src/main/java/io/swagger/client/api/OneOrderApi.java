/*
 * BeezUP API
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BeezUPCommonErrorResponseMessage;
import io.swagger.client.model.ChangeOrderRequest;
import io.swagger.client.model.ChangeOrderResponse;
import io.swagger.client.model.Order;
import io.swagger.client.model.OrderHistory;
import io.swagger.client.model.SetMerchantOrderInfoRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OneOrderApi {
    private ApiClient apiClient;

    public OneOrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OneOrderApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for changeOrder */
    private com.squareup.okhttp.Call changeOrderCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String changeOrderType, String userName, ChangeOrderRequest request, Boolean testMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketplaceTechnicalCode" + "\\}", apiClient.escapeString(marketplaceTechnicalCode.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "beezUPOrderId" + "\\}", apiClient.escapeString(beezUPOrderId.toString()))
        .replaceAll("\\{" + "changeOrderType" + "\\}", apiClient.escapeString(changeOrderType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userName", userName));
        if (testMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "testMode", testMode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeOrderValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String changeOrderType, String userName, ChangeOrderRequest request, Boolean testMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling changeOrder(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling changeOrder(Async)");
        }
        
        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling changeOrder(Async)");
        }
        
        // verify the required parameter 'changeOrderType' is set
        if (changeOrderType == null) {
            throw new ApiException("Missing the required parameter 'changeOrderType' when calling changeOrder(Async)");
        }
        
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling changeOrder(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling changeOrder(Async)");
        }
        
        
        com.squareup.okhttp.Call call = changeOrderCall(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, request, testMode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change order status
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The order BeezUP identifier (required)
     * @param changeOrderType The order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same than the subscription key you indicate in your settings. We recommand you to indicate the login of the user in your appplication. (required)
     * @param request  (required)
     * @param testMode If true, the operation will be be commited. But the validation will be taken in account. (optional, default to false)
     * @return ChangeOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChangeOrderResponse changeOrder(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String changeOrderType, String userName, ChangeOrderRequest request, Boolean testMode) throws ApiException {
        ApiResponse<ChangeOrderResponse> resp = changeOrderWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, request, testMode);
        return resp.getData();
    }

    /**
     * Change order status
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The order BeezUP identifier (required)
     * @param changeOrderType The order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same than the subscription key you indicate in your settings. We recommand you to indicate the login of the user in your appplication. (required)
     * @param request  (required)
     * @param testMode If true, the operation will be be commited. But the validation will be taken in account. (optional, default to false)
     * @return ApiResponse&lt;ChangeOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChangeOrderResponse> changeOrderWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String changeOrderType, String userName, ChangeOrderRequest request, Boolean testMode) throws ApiException {
        com.squareup.okhttp.Call call = changeOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, request, testMode, null, null);
        Type localVarReturnType = new TypeToken<ChangeOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change order status (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The order BeezUP identifier (required)
     * @param changeOrderType The order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same than the subscription key you indicate in your settings. We recommand you to indicate the login of the user in your appplication. (required)
     * @param request  (required)
     * @param testMode If true, the operation will be be commited. But the validation will be taken in account. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeOrderAsync(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String changeOrderType, String userName, ChangeOrderRequest request, Boolean testMode, final ApiCallback<ChangeOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, request, testMode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChangeOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for clearMerchantOrderInfo */
    private com.squareup.okhttp.Call clearMerchantOrderInfoCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketplaceTechnicalCode" + "\\}", apiClient.escapeString(marketplaceTechnicalCode.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "beezUPOrderId" + "\\}", apiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clearMerchantOrderInfoValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling clearMerchantOrderInfo(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling clearMerchantOrderInfo(Async)");
        }
        
        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling clearMerchantOrderInfo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = clearMerchantOrderInfoCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clear the merchant info related to this order
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The order BeezUP identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void clearMerchantOrderInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        clearMerchantOrderInfoWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
    }

    /**
     * Clear the merchant info related to this order
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The order BeezUP identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> clearMerchantOrderInfoWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        com.squareup.okhttp.Call call = clearMerchantOrderInfoValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Clear the merchant info related to this order (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The order BeezUP identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clearMerchantOrderInfoAsync(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clearMerchantOrderInfoValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getOrder */
    private com.squareup.okhttp.Call getOrderCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketplaceTechnicalCode" + "\\}", apiClient.escapeString(marketplaceTechnicalCode.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "beezUPOrderId" + "\\}", apiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling getOrder(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getOrder(Async)");
        }
        
        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling getOrder(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getOrderCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get order details
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The order BeezUP identifier (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Order getOrder(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        ApiResponse<Order> resp = getOrderWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
        return resp.getData();
    }

    /**
     * Get order details
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The order BeezUP identifier (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Order> getOrderWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, null, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get order details (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The order BeezUP identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderAsync(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ApiCallback<Order> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getOrderHistory */
    private com.squareup.okhttp.Call getOrderHistoryCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketplaceTechnicalCode" + "\\}", apiClient.escapeString(marketplaceTechnicalCode.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "beezUPOrderId" + "\\}", apiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderHistoryValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling getOrderHistory(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getOrderHistory(Async)");
        }
        
        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling getOrderHistory(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getOrderHistoryCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the harvest history and the change status operations
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The order BeezUP identifier (required)
     * @return OrderHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderHistory getOrderHistory(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        ApiResponse<OrderHistory> resp = getOrderHistoryWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
        return resp.getData();
    }

    /**
     * Get the harvest history and the change status operations
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The order BeezUP identifier (required)
     * @return ApiResponse&lt;OrderHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderHistory> getOrderHistoryWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderHistoryValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, null, null);
        Type localVarReturnType = new TypeToken<OrderHistory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the harvest history and the change status operations (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The order BeezUP identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderHistoryAsync(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ApiCallback<OrderHistory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderHistoryValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderHistory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for harvestOrder */
    private com.squareup.okhttp.Call harvestOrderCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketplaceTechnicalCode" + "\\}", apiClient.escapeString(marketplaceTechnicalCode.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "beezUPOrderId" + "\\}", apiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call harvestOrderValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling harvestOrder(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling harvestOrder(Async)");
        }
        
        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling harvestOrder(Async)");
        }
        
        
        com.squareup.okhttp.Call call = harvestOrderCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Harvest a specific order from the marketplace
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The order BeezUP identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void harvestOrder(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        harvestOrderWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
    }

    /**
     * Harvest a specific order from the marketplace
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The order BeezUP identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> harvestOrderWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        com.squareup.okhttp.Call call = harvestOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Harvest a specific order from the marketplace (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The order BeezUP identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call harvestOrderAsync(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = harvestOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for setMerchantOrderInfo */
    private com.squareup.okhttp.Call setMerchantOrderInfoCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, SetMerchantOrderInfoRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketplaceTechnicalCode" + "\\}", apiClient.escapeString(marketplaceTechnicalCode.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "beezUPOrderId" + "\\}", apiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setMerchantOrderInfoValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, SetMerchantOrderInfoRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling setMerchantOrderInfo(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling setMerchantOrderInfo(Async)");
        }
        
        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling setMerchantOrderInfo(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling setMerchantOrderInfo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = setMerchantOrderInfoCall(marketplaceTechnicalCode, accountId, beezUPOrderId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Associate your merchant order identifier to this order
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The order BeezUP identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setMerchantOrderInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, SetMerchantOrderInfoRequest request) throws ApiException {
        setMerchantOrderInfoWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, request);
    }

    /**
     * Associate your merchant order identifier to this order
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The order BeezUP identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setMerchantOrderInfoWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, SetMerchantOrderInfoRequest request) throws ApiException {
        com.squareup.okhttp.Call call = setMerchantOrderInfoValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Associate your merchant order identifier to this order (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The order BeezUP identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setMerchantOrderInfoAsync(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, SetMerchantOrderInfoRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setMerchantOrderInfoValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
