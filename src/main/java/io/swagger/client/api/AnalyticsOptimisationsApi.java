/*
 * Public - Security
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BeezUPCommonErrorResponseMessage;
import io.swagger.client.model.OptimiseRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnalyticsOptimisationsApi {
    private ApiClient apiClient;

    public AnalyticsOptimisationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnalyticsOptimisationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for optimise */
    private com.squareup.okhttp.Call optimiseCall(String storeId, String actionName, OptimiseRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/user/analytics/{storeId}/optimisations/{actionName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "actionName" + "\\}", apiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call optimiseValidateBeforeCall(String storeId, String actionName, OptimiseRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling optimise(Async)");
        }
        
        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling optimise(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling optimise(Async)");
        }
        
        
        com.squareup.okhttp.Call call = optimiseCall(storeId, actionName, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Optimise products
     * /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
     * @param storeId Your store identifier (required)
     * @param actionName  (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void optimise(String storeId, String actionName, OptimiseRequest request) throws ApiException {
        optimiseWithHttpInfo(storeId, actionName, request);
    }

    /**
     * Optimise products
     * /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
     * @param storeId Your store identifier (required)
     * @param actionName  (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> optimiseWithHttpInfo(String storeId, String actionName, OptimiseRequest request) throws ApiException {
        com.squareup.okhttp.Call call = optimiseValidateBeforeCall(storeId, actionName, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Optimise products (asynchronously)
     * /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
     * @param storeId Your store identifier (required)
     * @param actionName  (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call optimiseAsync(String storeId, String actionName, OptimiseRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = optimiseValidateBeforeCall(storeId, actionName, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for optimiseByCategory */
    private com.squareup.okhttp.Call optimiseByCategoryCall(String storeId, String catalogCategoryId, String actionName, List<String> request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/user/analytics/{storeId}/optimisations/bycategory/{catalogCategoryId}/{actionName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "catalogCategoryId" + "\\}", apiClient.escapeString(catalogCategoryId.toString()))
        .replaceAll("\\{" + "actionName" + "\\}", apiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call optimiseByCategoryValidateBeforeCall(String storeId, String catalogCategoryId, String actionName, List<String> request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling optimiseByCategory(Async)");
        }
        
        // verify the required parameter 'catalogCategoryId' is set
        if (catalogCategoryId == null) {
            throw new ApiException("Missing the required parameter 'catalogCategoryId' when calling optimiseByCategory(Async)");
        }
        
        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling optimiseByCategory(Async)");
        }
        
        
        com.squareup.okhttp.Call call = optimiseByCategoryCall(storeId, catalogCategoryId, actionName, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Optimise products&#39;s category
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
     * @param storeId Your store identifier (required)
     * @param catalogCategoryId The category identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param request The channel identifier list concerned by this optimisation (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void optimiseByCategory(String storeId, String catalogCategoryId, String actionName, List<String> request) throws ApiException {
        optimiseByCategoryWithHttpInfo(storeId, catalogCategoryId, actionName, request);
    }

    /**
     * Optimise products&#39;s category
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
     * @param storeId Your store identifier (required)
     * @param catalogCategoryId The category identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param request The channel identifier list concerned by this optimisation (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> optimiseByCategoryWithHttpInfo(String storeId, String catalogCategoryId, String actionName, List<String> request) throws ApiException {
        com.squareup.okhttp.Call call = optimiseByCategoryValidateBeforeCall(storeId, catalogCategoryId, actionName, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Optimise products&#39;s category (asynchronously)
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
     * @param storeId Your store identifier (required)
     * @param catalogCategoryId The category identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param request The channel identifier list concerned by this optimisation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call optimiseByCategoryAsync(String storeId, String catalogCategoryId, String actionName, List<String> request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = optimiseByCategoryValidateBeforeCall(storeId, catalogCategoryId, actionName, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for optimiseByChannel */
    private com.squareup.okhttp.Call optimiseByChannelCall(String storeId, String channelId, String actionName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user/analytics/{storeId}/optimisations/bychannel/{channelId}/{actionName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "channelId" + "\\}", apiClient.escapeString(channelId.toString()))
        .replaceAll("\\{" + "actionName" + "\\}", apiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call optimiseByChannelValidateBeforeCall(String storeId, String channelId, String actionName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling optimiseByChannel(Async)");
        }
        
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling optimiseByChannel(Async)");
        }
        
        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling optimiseByChannel(Async)");
        }
        
        
        com.squareup.okhttp.Call call = optimiseByChannelCall(storeId, channelId, actionName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Optimise products&#39;s category
     * /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
     * @param storeId Your store identifier (required)
     * @param channelId The channel identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void optimiseByChannel(String storeId, String channelId, String actionName) throws ApiException {
        optimiseByChannelWithHttpInfo(storeId, channelId, actionName);
    }

    /**
     * Optimise products&#39;s category
     * /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
     * @param storeId Your store identifier (required)
     * @param channelId The channel identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> optimiseByChannelWithHttpInfo(String storeId, String channelId, String actionName) throws ApiException {
        com.squareup.okhttp.Call call = optimiseByChannelValidateBeforeCall(storeId, channelId, actionName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Optimise products&#39;s category (asynchronously)
     * /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
     * @param storeId Your store identifier (required)
     * @param channelId The channel identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call optimiseByChannelAsync(String storeId, String channelId, String actionName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = optimiseByChannelValidateBeforeCall(storeId, channelId, actionName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for optimiseByProduct */
    private com.squareup.okhttp.Call optimiseByProductCall(String storeId, String productId, String actionName, List<String> request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/user/analytics/{storeId}/optimisations/byproduct/{productId}/{actionName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()))
        .replaceAll("\\{" + "actionName" + "\\}", apiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call optimiseByProductValidateBeforeCall(String storeId, String productId, String actionName, List<String> request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling optimiseByProduct(Async)");
        }
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling optimiseByProduct(Async)");
        }
        
        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling optimiseByProduct(Async)");
        }
        
        
        com.squareup.okhttp.Call call = optimiseByProductCall(storeId, productId, actionName, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Optimise products
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
     * @param storeId Your store identifier (required)
     * @param productId The product identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param request The channel identifier list concerned by this optimisation (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void optimiseByProduct(String storeId, String productId, String actionName, List<String> request) throws ApiException {
        optimiseByProductWithHttpInfo(storeId, productId, actionName, request);
    }

    /**
     * Optimise products
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
     * @param storeId Your store identifier (required)
     * @param productId The product identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param request The channel identifier list concerned by this optimisation (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> optimiseByProductWithHttpInfo(String storeId, String productId, String actionName, List<String> request) throws ApiException {
        com.squareup.okhttp.Call call = optimiseByProductValidateBeforeCall(storeId, productId, actionName, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Optimise products (asynchronously)
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
     * @param storeId Your store identifier (required)
     * @param productId The product identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param request The channel identifier list concerned by this optimisation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call optimiseByProductAsync(String storeId, String productId, String actionName, List<String> request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = optimiseByProductValidateBeforeCall(storeId, productId, actionName, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
