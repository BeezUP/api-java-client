/*
 * BeezUP API
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AccountSynchronizations;
import io.swagger.client.model.AutomaticTransitionInfos;
import io.swagger.client.model.BatchOrderOperationResponse;
import io.swagger.client.model.BeezUPCommonErrorResponseMessage;
import io.swagger.client.model.ChangeOrderListRequest;
import io.swagger.client.model.ChangeOrderRequest;
import io.swagger.client.model.ClearMerchantOrderInfoListRequest;
import io.swagger.client.model.ExportOrderListRequest;
import io.swagger.client.model.Order;
import io.swagger.client.model.OrderExportations;
import io.swagger.client.model.OrderHistory;
import io.swagger.client.model.OrderListFull;
import io.swagger.client.model.OrderListLight;
import io.swagger.client.model.OrderListRequest;
import io.swagger.client.model.SaveAutomaticTransitionRequest;
import io.swagger.client.model.SetMerchantOrderInfoListRequest;
import io.swagger.client.model.SetMerchantOrderInfoRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class V2UserMarketplacesOrdersApi {
    private ApiClient apiClient;

    public V2UserMarketplacesOrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public V2UserMarketplacesOrdersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for changeOrder */
    private com.squareup.okhttp.Call changeOrderCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String changeOrderType, String userName, ChangeOrderRequest request, String ifMatch, Boolean testMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketplaceTechnicalCode" + "\\}", apiClient.escapeString(marketplaceTechnicalCode.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "beezUPOrderId" + "\\}", apiClient.escapeString(beezUPOrderId.toString()))
        .replaceAll("\\{" + "changeOrderType" + "\\}", apiClient.escapeString(changeOrderType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userName", userName));
        if (testMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "testMode", testMode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeOrderValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String changeOrderType, String userName, ChangeOrderRequest request, String ifMatch, Boolean testMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling changeOrder(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling changeOrder(Async)");
        }
        
        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling changeOrder(Async)");
        }
        
        // verify the required parameter 'changeOrderType' is set
        if (changeOrderType == null) {
            throw new ApiException("Missing the required parameter 'changeOrderType' when calling changeOrder(Async)");
        }
        
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling changeOrder(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling changeOrder(Async)");
        }
        
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling changeOrder(Async)");
        }
        
        
        com.squareup.okhttp.Call call = changeOrderCall(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, request, ifMatch, testMode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change your marketplace Order Information (accept, ship, etc.)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param request  (required)
     * @param ifMatch ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void changeOrder(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String changeOrderType, String userName, ChangeOrderRequest request, String ifMatch, Boolean testMode) throws ApiException {
        changeOrderWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, request, ifMatch, testMode);
    }

    /**
     * Change your marketplace Order Information (accept, ship, etc.)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param request  (required)
     * @param ifMatch ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> changeOrderWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String changeOrderType, String userName, ChangeOrderRequest request, String ifMatch, Boolean testMode) throws ApiException {
        com.squareup.okhttp.Call call = changeOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, request, ifMatch, testMode, null, null);
        return apiClient.execute(call);
    }

    /**
     * Change your marketplace Order Information (accept, ship, etc.) (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param request  (required)
     * @param ifMatch ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeOrderAsync(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String changeOrderType, String userName, ChangeOrderRequest request, String ifMatch, Boolean testMode, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, request, ifMatch, testMode, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for changeOrderList */
    private com.squareup.okhttp.Call changeOrderListCall(String changeOrderType, String userName, ChangeOrderListRequest request, Boolean testMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/batches/changeOrders/{changeOrderType}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "changeOrderType" + "\\}", apiClient.escapeString(changeOrderType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userName", userName));
        if (testMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "testMode", testMode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeOrderListValidateBeforeCall(String changeOrderType, String userName, ChangeOrderListRequest request, Boolean testMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'changeOrderType' is set
        if (changeOrderType == null) {
            throw new ApiException("Missing the required parameter 'changeOrderType' when calling changeOrderList(Async)");
        }
        
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling changeOrderList(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling changeOrderList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = changeOrderListCall(changeOrderType, userName, request, testMode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a batch of operations to change your marketplace Order information (accept, ship, etc.)
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param request  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @return BatchOrderOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchOrderOperationResponse changeOrderList(String changeOrderType, String userName, ChangeOrderListRequest request, Boolean testMode) throws ApiException {
        ApiResponse<BatchOrderOperationResponse> resp = changeOrderListWithHttpInfo(changeOrderType, userName, request, testMode);
        return resp.getData();
    }

    /**
     * Send a batch of operations to change your marketplace Order information (accept, ship, etc.)
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param request  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @return ApiResponse&lt;BatchOrderOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchOrderOperationResponse> changeOrderListWithHttpInfo(String changeOrderType, String userName, ChangeOrderListRequest request, Boolean testMode) throws ApiException {
        com.squareup.okhttp.Call call = changeOrderListValidateBeforeCall(changeOrderType, userName, request, testMode, null, null);
        Type localVarReturnType = new TypeToken<BatchOrderOperationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send a batch of operations to change your marketplace Order information (accept, ship, etc.) (asynchronously)
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param request  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeOrderListAsync(String changeOrderType, String userName, ChangeOrderListRequest request, Boolean testMode, final ApiCallback<BatchOrderOperationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeOrderListValidateBeforeCall(changeOrderType, userName, request, testMode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchOrderOperationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for clearMerchantOrderInfo */
    private com.squareup.okhttp.Call clearMerchantOrderInfoCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketplaceTechnicalCode" + "\\}", apiClient.escapeString(marketplaceTechnicalCode.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "beezUPOrderId" + "\\}", apiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clearMerchantOrderInfoValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling clearMerchantOrderInfo(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling clearMerchantOrderInfo(Async)");
        }
        
        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling clearMerchantOrderInfo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = clearMerchantOrderInfoCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clear an Order&#39;s merchant information
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void clearMerchantOrderInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        clearMerchantOrderInfoWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
    }

    /**
     * Clear an Order&#39;s merchant information
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> clearMerchantOrderInfoWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        com.squareup.okhttp.Call call = clearMerchantOrderInfoValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Clear an Order&#39;s merchant information (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clearMerchantOrderInfoAsync(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clearMerchantOrderInfoValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for clearMerchantOrderInfoList */
    private com.squareup.okhttp.Call clearMerchantOrderInfoListCall(ClearMerchantOrderInfoListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/batches/clearMerchantOrderInfos".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clearMerchantOrderInfoListValidateBeforeCall(ClearMerchantOrderInfoListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling clearMerchantOrderInfoList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = clearMerchantOrderInfoListCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a batch of operations to clear an Order&#39;s merchant information
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param request  (required)
     * @return BatchOrderOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchOrderOperationResponse clearMerchantOrderInfoList(ClearMerchantOrderInfoListRequest request) throws ApiException {
        ApiResponse<BatchOrderOperationResponse> resp = clearMerchantOrderInfoListWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Send a batch of operations to clear an Order&#39;s merchant information
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param request  (required)
     * @return ApiResponse&lt;BatchOrderOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchOrderOperationResponse> clearMerchantOrderInfoListWithHttpInfo(ClearMerchantOrderInfoListRequest request) throws ApiException {
        com.squareup.okhttp.Call call = clearMerchantOrderInfoListValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<BatchOrderOperationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send a batch of operations to clear an Order&#39;s merchant information (asynchronously)
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clearMerchantOrderInfoListAsync(ClearMerchantOrderInfoListRequest request, final ApiCallback<BatchOrderOperationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clearMerchantOrderInfoListValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchOrderOperationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for configureAutomaticTransitions */
    private com.squareup.okhttp.Call configureAutomaticTransitionsCall(SaveAutomaticTransitionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/automaticTransitions".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configureAutomaticTransitionsValidateBeforeCall(SaveAutomaticTransitionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling configureAutomaticTransitions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = configureAutomaticTransitionsCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Configure new or existing automatic Order status transition
     * 
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void configureAutomaticTransitions(SaveAutomaticTransitionRequest request) throws ApiException {
        configureAutomaticTransitionsWithHttpInfo(request);
    }

    /**
     * Configure new or existing automatic Order status transition
     * 
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> configureAutomaticTransitionsWithHttpInfo(SaveAutomaticTransitionRequest request) throws ApiException {
        com.squareup.okhttp.Call call = configureAutomaticTransitionsValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Configure new or existing automatic Order status transition (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configureAutomaticTransitionsAsync(SaveAutomaticTransitionRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configureAutomaticTransitionsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for exportOrders */
    private com.squareup.okhttp.Call exportOrdersCall(String format, ExportOrderListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/exportations".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportOrdersValidateBeforeCall(String format, ExportOrderListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling exportOrders(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling exportOrders(Async)");
        }
        
        
        com.squareup.okhttp.Call call = exportOrdersCall(format, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Request a new Order report exportation to be generated
     * A new file will be generated containing a summary of all the Orders matching the requested filter settings.
     * @param format The type of the file to export (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void exportOrders(String format, ExportOrderListRequest request) throws ApiException {
        exportOrdersWithHttpInfo(format, request);
    }

    /**
     * Request a new Order report exportation to be generated
     * A new file will be generated containing a summary of all the Orders matching the requested filter settings.
     * @param format The type of the file to export (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> exportOrdersWithHttpInfo(String format, ExportOrderListRequest request) throws ApiException {
        com.squareup.okhttp.Call call = exportOrdersValidateBeforeCall(format, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Request a new Order report exportation to be generated (asynchronously)
     * A new file will be generated containing a summary of all the Orders matching the requested filter settings.
     * @param format The type of the file to export (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportOrdersAsync(String format, ExportOrderListRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportOrdersValidateBeforeCall(format, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getAutomaticTransitions */
    private com.squareup.okhttp.Call getAutomaticTransitionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/automaticTransitions".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAutomaticTransitionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAutomaticTransitionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of configured automatic Order status transitions
     * 
     * @return AutomaticTransitionInfos
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutomaticTransitionInfos getAutomaticTransitions() throws ApiException {
        ApiResponse<AutomaticTransitionInfos> resp = getAutomaticTransitionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get list of configured automatic Order status transitions
     * 
     * @return ApiResponse&lt;AutomaticTransitionInfos&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutomaticTransitionInfos> getAutomaticTransitionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAutomaticTransitionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AutomaticTransitionInfos>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of configured automatic Order status transitions (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAutomaticTransitionsAsync(final ApiCallback<AutomaticTransitionInfos> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAutomaticTransitionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutomaticTransitionInfos>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getMarketplaceAccountsSynchronization */
    private com.squareup.okhttp.Call getMarketplaceAccountsSynchronizationCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/status".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMarketplaceAccountsSynchronizationValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getMarketplaceAccountsSynchronizationCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get current synchronization status between your marketplaces and BeezUP accounts
     * 
     * @return AccountSynchronizations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountSynchronizations getMarketplaceAccountsSynchronization() throws ApiException {
        ApiResponse<AccountSynchronizations> resp = getMarketplaceAccountsSynchronizationWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get current synchronization status between your marketplaces and BeezUP accounts
     * 
     * @return ApiResponse&lt;AccountSynchronizations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountSynchronizations> getMarketplaceAccountsSynchronizationWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getMarketplaceAccountsSynchronizationValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AccountSynchronizations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get current synchronization status between your marketplaces and BeezUP accounts (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMarketplaceAccountsSynchronizationAsync(final ApiCallback<AccountSynchronizations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMarketplaceAccountsSynchronizationValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountSynchronizations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getOrder */
    private com.squareup.okhttp.Call getOrderCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String ifNoneMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketplaceTechnicalCode" + "\\}", apiClient.escapeString(marketplaceTechnicalCode.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "beezUPOrderId" + "\\}", apiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null)
        localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String ifNoneMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling getOrder(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getOrder(Async)");
        }
        
        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling getOrder(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getOrderCall(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get full Order and Order Item(s) properties
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Order getOrder(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String ifNoneMatch) throws ApiException {
        ApiResponse<Order> resp = getOrderWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch);
        return resp.getData();
    }

    /**
     * Get full Order and Order Item(s) properties
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Order> getOrderWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String ifNoneMatch) throws ApiException {
        com.squareup.okhttp.Call call = getOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, null, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get full Order and Order Item(s) properties (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderAsync(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String ifNoneMatch, final ApiCallback<Order> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getOrderExportations */
    private com.squareup.okhttp.Call getOrderExportationsCall(Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/exportations".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderExportationsValidateBeforeCall(Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getOrderExportations(Async)");
        }
        
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getOrderExportations(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getOrderExportationsCall(pageNumber, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a paginated list of Order report exportations
     * 
     * @param pageNumber The page number you want to get (required)
     * @param pageSize The count of Order report exportations you want to get (required)
     * @return OrderExportations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderExportations getOrderExportations(Integer pageNumber, Integer pageSize) throws ApiException {
        ApiResponse<OrderExportations> resp = getOrderExportationsWithHttpInfo(pageNumber, pageSize);
        return resp.getData();
    }

    /**
     * Get a paginated list of Order report exportations
     * 
     * @param pageNumber The page number you want to get (required)
     * @param pageSize The count of Order report exportations you want to get (required)
     * @return ApiResponse&lt;OrderExportations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderExportations> getOrderExportationsWithHttpInfo(Integer pageNumber, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getOrderExportationsValidateBeforeCall(pageNumber, pageSize, null, null);
        Type localVarReturnType = new TypeToken<OrderExportations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a paginated list of Order report exportations (asynchronously)
     * 
     * @param pageNumber The page number you want to get (required)
     * @param pageSize The count of Order report exportations you want to get (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderExportationsAsync(Integer pageNumber, Integer pageSize, final ApiCallback<OrderExportations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderExportationsValidateBeforeCall(pageNumber, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderExportations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getOrderHistory */
    private com.squareup.okhttp.Call getOrderHistoryCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketplaceTechnicalCode" + "\\}", apiClient.escapeString(marketplaceTechnicalCode.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "beezUPOrderId" + "\\}", apiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderHistoryValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling getOrderHistory(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getOrderHistory(Async)");
        }
        
        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling getOrderHistory(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getOrderHistoryCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an Order&#39;s harvest and change history
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @return OrderHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderHistory getOrderHistory(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        ApiResponse<OrderHistory> resp = getOrderHistoryWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
        return resp.getData();
    }

    /**
     * Get an Order&#39;s harvest and change history
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @return ApiResponse&lt;OrderHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderHistory> getOrderHistoryWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderHistoryValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, null, null);
        Type localVarReturnType = new TypeToken<OrderHistory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an Order&#39;s harvest and change history (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderHistoryAsync(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ApiCallback<OrderHistory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderHistoryValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderHistory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getOrderListFull */
    private com.squareup.okhttp.Call getOrderListFullCall(List<String> acceptEncoding, OrderListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/list/full".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptEncoding != null)
        localVarHeaderParams.put("Accept-Encoding", apiClient.parameterToString(acceptEncoding));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderListFullValidateBeforeCall(List<String> acceptEncoding, OrderListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'acceptEncoding' is set
        if (acceptEncoding == null) {
            throw new ApiException("Missing the required parameter 'acceptEncoding' when calling getOrderListFull(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getOrderListFullCall(acceptEncoding, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a paginated list of all Orders with all Order and Order Item(s) properties
     * The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
     * @param acceptEncoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size (required)
     * @param request  (optional)
     * @return OrderListFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderListFull getOrderListFull(List<String> acceptEncoding, OrderListRequest request) throws ApiException {
        ApiResponse<OrderListFull> resp = getOrderListFullWithHttpInfo(acceptEncoding, request);
        return resp.getData();
    }

    /**
     * Get a paginated list of all Orders with all Order and Order Item(s) properties
     * The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
     * @param acceptEncoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size (required)
     * @param request  (optional)
     * @return ApiResponse&lt;OrderListFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderListFull> getOrderListFullWithHttpInfo(List<String> acceptEncoding, OrderListRequest request) throws ApiException {
        com.squareup.okhttp.Call call = getOrderListFullValidateBeforeCall(acceptEncoding, request, null, null);
        Type localVarReturnType = new TypeToken<OrderListFull>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a paginated list of all Orders with all Order and Order Item(s) properties (asynchronously)
     * The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
     * @param acceptEncoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size (required)
     * @param request  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderListFullAsync(List<String> acceptEncoding, OrderListRequest request, final ApiCallback<OrderListFull> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderListFullValidateBeforeCall(acceptEncoding, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderListFull>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getOrderListLight */
    private com.squareup.okhttp.Call getOrderListLightCall(OrderListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/list/light".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderListLightValidateBeforeCall(OrderListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getOrderListLightCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a paginated list of all Orders without details
     * 
     * @param request  (optional)
     * @return OrderListLight
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderListLight getOrderListLight(OrderListRequest request) throws ApiException {
        ApiResponse<OrderListLight> resp = getOrderListLightWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Get a paginated list of all Orders without details
     * 
     * @param request  (optional)
     * @return ApiResponse&lt;OrderListLight&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderListLight> getOrderListLightWithHttpInfo(OrderListRequest request) throws ApiException {
        com.squareup.okhttp.Call call = getOrderListLightValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<OrderListLight>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a paginated list of all Orders without details (asynchronously)
     * 
     * @param request  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderListLightAsync(OrderListRequest request, final ApiCallback<OrderListLight> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderListLightValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderListLight>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for harvestAll */
    private com.squareup.okhttp.Call harvestAllCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/harvest".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call harvestAllValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = harvestAllCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send harvest request to all your marketplaces
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void harvestAll() throws ApiException {
        harvestAllWithHttpInfo();
    }

    /**
     * Send harvest request to all your marketplaces
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> harvestAllWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = harvestAllValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Send harvest request to all your marketplaces (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call harvestAllAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = harvestAllValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for harvestOrder */
    private com.squareup.okhttp.Call harvestOrderCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketplaceTechnicalCode" + "\\}", apiClient.escapeString(marketplaceTechnicalCode.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "beezUPOrderId" + "\\}", apiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call harvestOrderValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling harvestOrder(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling harvestOrder(Async)");
        }
        
        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling harvestOrder(Async)");
        }
        
        
        com.squareup.okhttp.Call call = harvestOrderCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send harvest request for a single Order
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void harvestOrder(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        harvestOrderWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
    }

    /**
     * Send harvest request for a single Order
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> harvestOrderWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        com.squareup.okhttp.Call call = harvestOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Send harvest request for a single Order (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call harvestOrderAsync(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = harvestOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for setMerchantOrderInfo */
    private com.squareup.okhttp.Call setMerchantOrderInfoCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, SetMerchantOrderInfoRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketplaceTechnicalCode" + "\\}", apiClient.escapeString(marketplaceTechnicalCode.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "beezUPOrderId" + "\\}", apiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setMerchantOrderInfoValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, SetMerchantOrderInfoRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling setMerchantOrderInfo(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling setMerchantOrderInfo(Async)");
        }
        
        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling setMerchantOrderInfo(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling setMerchantOrderInfo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = setMerchantOrderInfoCall(marketplaceTechnicalCode, accountId, beezUPOrderId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set an Order&#39;s merchant information
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setMerchantOrderInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, SetMerchantOrderInfoRequest request) throws ApiException {
        setMerchantOrderInfoWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, request);
    }

    /**
     * Set an Order&#39;s merchant information
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setMerchantOrderInfoWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, SetMerchantOrderInfoRequest request) throws ApiException {
        com.squareup.okhttp.Call call = setMerchantOrderInfoValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set an Order&#39;s merchant information (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setMerchantOrderInfoAsync(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, SetMerchantOrderInfoRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setMerchantOrderInfoValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for setMerchantOrderInfoList */
    private com.squareup.okhttp.Call setMerchantOrderInfoListCall(SetMerchantOrderInfoListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/batches/setMerchantOrderInfos".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setMerchantOrderInfoListValidateBeforeCall(SetMerchantOrderInfoListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling setMerchantOrderInfoList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = setMerchantOrderInfoListCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a batch of operations to set an Order&#39;s merchant information
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param request  (required)
     * @return BatchOrderOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchOrderOperationResponse setMerchantOrderInfoList(SetMerchantOrderInfoListRequest request) throws ApiException {
        ApiResponse<BatchOrderOperationResponse> resp = setMerchantOrderInfoListWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Send a batch of operations to set an Order&#39;s merchant information
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param request  (required)
     * @return ApiResponse&lt;BatchOrderOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchOrderOperationResponse> setMerchantOrderInfoListWithHttpInfo(SetMerchantOrderInfoListRequest request) throws ApiException {
        com.squareup.okhttp.Call call = setMerchantOrderInfoListValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<BatchOrderOperationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send a batch of operations to set an Order&#39;s merchant information (asynchronously)
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setMerchantOrderInfoListAsync(SetMerchantOrderInfoListRequest request, final ApiCallback<BatchOrderOperationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setMerchantOrderInfoListValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchOrderOperationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
