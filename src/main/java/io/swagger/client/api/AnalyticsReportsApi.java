/*
 * BeezUP API
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/beezUP/API) 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BeezUPCommonErrorResponseMessage;
import io.swagger.client.model.BeezUPCommonLink3;
import io.swagger.client.model.ReportByCategoryRequest;
import io.swagger.client.model.ReportByCategoryResponse;
import io.swagger.client.model.ReportByChannelRequest;
import io.swagger.client.model.ReportByChannelResponse;
import io.swagger.client.model.ReportByDayRequest;
import io.swagger.client.model.ReportByDayResponse;
import io.swagger.client.model.ReportByProductRequest;
import io.swagger.client.model.ReportByProductResponse;
import io.swagger.client.model.ReportFilter;
import io.swagger.client.model.ReportFilters;
import io.swagger.client.model.SaveReportFilterRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnalyticsReportsApi {
    private ApiClient apiClient;

    public AnalyticsReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnalyticsReportsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for deleteReportFilter */
    private com.squareup.okhttp.Call deleteReportFilterCall(String storeId, String reportFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user/analytics/{storeId}/reports/filters/{reportFilterId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "reportFilterId" + "\\}", apiClient.escapeString(reportFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReportFilterValidateBeforeCall(String storeId, String reportFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling deleteReportFilter(Async)");
        }
        
        // verify the required parameter 'reportFilterId' is set
        if (reportFilterId == null) {
            throw new ApiException("Missing the required parameter 'reportFilterId' when calling deleteReportFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteReportFilterCall(storeId, reportFilterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete the report filter
     * 
     * @param storeId Your store identifier (required)
     * @param reportFilterId Your report filter identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReportFilter(String storeId, String reportFilterId) throws ApiException {
        deleteReportFilterWithHttpInfo(storeId, reportFilterId);
    }

    /**
     * Delete the report filter
     * 
     * @param storeId Your store identifier (required)
     * @param reportFilterId Your report filter identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReportFilterWithHttpInfo(String storeId, String reportFilterId) throws ApiException {
        com.squareup.okhttp.Call call = deleteReportFilterValidateBeforeCall(storeId, reportFilterId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the report filter (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param reportFilterId Your report filter identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReportFilterAsync(String storeId, String reportFilterId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReportFilterValidateBeforeCall(storeId, reportFilterId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for exportStoreReportByCategory */
    private com.squareup.okhttp.Call exportStoreReportByCategoryCall(String storeId, String format, ReportByCategoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/user/analytics/{storeId}/reports/bycategory/export".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportStoreReportByCategoryValidateBeforeCall(String storeId, String format, ReportByCategoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling exportStoreReportByCategory(Async)");
        }
        
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling exportStoreReportByCategory(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling exportStoreReportByCategory(Async)");
        }
        
        
        com.squareup.okhttp.Call call = exportStoreReportByCategoryCall(storeId, format, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Export the report by category
     * Export the report by category
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @return BeezUPCommonLink3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BeezUPCommonLink3 exportStoreReportByCategory(String storeId, String format, ReportByCategoryRequest request) throws ApiException {
        ApiResponse<BeezUPCommonLink3> resp = exportStoreReportByCategoryWithHttpInfo(storeId, format, request);
        return resp.getData();
    }

    /**
     * Export the report by category
     * Export the report by category
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @return ApiResponse&lt;BeezUPCommonLink3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BeezUPCommonLink3> exportStoreReportByCategoryWithHttpInfo(String storeId, String format, ReportByCategoryRequest request) throws ApiException {
        com.squareup.okhttp.Call call = exportStoreReportByCategoryValidateBeforeCall(storeId, format, request, null, null);
        Type localVarReturnType = new TypeToken<BeezUPCommonLink3>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export the report by category (asynchronously)
     * Export the report by category
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportStoreReportByCategoryAsync(String storeId, String format, ReportByCategoryRequest request, final ApiCallback<BeezUPCommonLink3> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportStoreReportByCategoryValidateBeforeCall(storeId, format, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BeezUPCommonLink3>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for exportStoreReportByChannel */
    private com.squareup.okhttp.Call exportStoreReportByChannelCall(String storeId, String format, ReportByChannelRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/user/analytics/{storeId}/reports/bychannel/export".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportStoreReportByChannelValidateBeforeCall(String storeId, String format, ReportByChannelRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling exportStoreReportByChannel(Async)");
        }
        
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling exportStoreReportByChannel(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling exportStoreReportByChannel(Async)");
        }
        
        
        com.squareup.okhttp.Call call = exportStoreReportByChannelCall(storeId, format, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Export the report by channel
     * Export the report by channel
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @return BeezUPCommonLink3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BeezUPCommonLink3 exportStoreReportByChannel(String storeId, String format, ReportByChannelRequest request) throws ApiException {
        ApiResponse<BeezUPCommonLink3> resp = exportStoreReportByChannelWithHttpInfo(storeId, format, request);
        return resp.getData();
    }

    /**
     * Export the report by channel
     * Export the report by channel
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @return ApiResponse&lt;BeezUPCommonLink3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BeezUPCommonLink3> exportStoreReportByChannelWithHttpInfo(String storeId, String format, ReportByChannelRequest request) throws ApiException {
        com.squareup.okhttp.Call call = exportStoreReportByChannelValidateBeforeCall(storeId, format, request, null, null);
        Type localVarReturnType = new TypeToken<BeezUPCommonLink3>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export the report by channel (asynchronously)
     * Export the report by channel
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportStoreReportByChannelAsync(String storeId, String format, ReportByChannelRequest request, final ApiCallback<BeezUPCommonLink3> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportStoreReportByChannelValidateBeforeCall(storeId, format, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BeezUPCommonLink3>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for exportStoreReportByProduct */
    private com.squareup.okhttp.Call exportStoreReportByProductCall(String storeId, String format, ReportByProductRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/user/analytics/{storeId}/reports/byproduct/export".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportStoreReportByProductValidateBeforeCall(String storeId, String format, ReportByProductRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling exportStoreReportByProduct(Async)");
        }
        
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling exportStoreReportByProduct(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling exportStoreReportByProduct(Async)");
        }
        
        
        com.squareup.okhttp.Call call = exportStoreReportByProductCall(storeId, format, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Export the report by product
     * Export the report by product
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @return BeezUPCommonLink3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BeezUPCommonLink3 exportStoreReportByProduct(String storeId, String format, ReportByProductRequest request) throws ApiException {
        ApiResponse<BeezUPCommonLink3> resp = exportStoreReportByProductWithHttpInfo(storeId, format, request);
        return resp.getData();
    }

    /**
     * Export the report by product
     * Export the report by product
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @return ApiResponse&lt;BeezUPCommonLink3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BeezUPCommonLink3> exportStoreReportByProductWithHttpInfo(String storeId, String format, ReportByProductRequest request) throws ApiException {
        com.squareup.okhttp.Call call = exportStoreReportByProductValidateBeforeCall(storeId, format, request, null, null);
        Type localVarReturnType = new TypeToken<BeezUPCommonLink3>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export the report by product (asynchronously)
     * Export the report by product
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportStoreReportByProductAsync(String storeId, String format, ReportByProductRequest request, final ApiCallback<BeezUPCommonLink3> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportStoreReportByProductValidateBeforeCall(storeId, format, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BeezUPCommonLink3>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getReportFilter */
    private com.squareup.okhttp.Call getReportFilterCall(String storeId, String reportFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user/analytics/{storeId}/reports/filters/{reportFilterId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "reportFilterId" + "\\}", apiClient.escapeString(reportFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportFilterValidateBeforeCall(String storeId, String reportFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getReportFilter(Async)");
        }
        
        // verify the required parameter 'reportFilterId' is set
        if (reportFilterId == null) {
            throw new ApiException("Missing the required parameter 'reportFilterId' when calling getReportFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getReportFilterCall(storeId, reportFilterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the report filter description
     * 
     * @param storeId Your store identifier (required)
     * @param reportFilterId Your report filter identifier (required)
     * @return ReportFilter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportFilter getReportFilter(String storeId, String reportFilterId) throws ApiException {
        ApiResponse<ReportFilter> resp = getReportFilterWithHttpInfo(storeId, reportFilterId);
        return resp.getData();
    }

    /**
     * Get the report filter description
     * 
     * @param storeId Your store identifier (required)
     * @param reportFilterId Your report filter identifier (required)
     * @return ApiResponse&lt;ReportFilter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportFilter> getReportFilterWithHttpInfo(String storeId, String reportFilterId) throws ApiException {
        com.squareup.okhttp.Call call = getReportFilterValidateBeforeCall(storeId, reportFilterId, null, null);
        Type localVarReturnType = new TypeToken<ReportFilter>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the report filter description (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param reportFilterId Your report filter identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportFilterAsync(String storeId, String reportFilterId, final ApiCallback<ReportFilter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportFilterValidateBeforeCall(storeId, reportFilterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportFilter>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getReportFilters */
    private com.squareup.okhttp.Call getReportFiltersCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user/analytics/{storeId}/reports/filters".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportFiltersValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getReportFilters(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getReportFiltersCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get report filter list for the given store
     * 
     * @param storeId Your store identifier (required)
     * @return ReportFilters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportFilters getReportFilters(String storeId) throws ApiException {
        ApiResponse<ReportFilters> resp = getReportFiltersWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * Get report filter list for the given store
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;ReportFilters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportFilters> getReportFiltersWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = getReportFiltersValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<ReportFilters>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get report filter list for the given store (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportFiltersAsync(String storeId, final ApiCallback<ReportFilters> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportFiltersValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportFilters>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStoreReportByCategory */
    private com.squareup.okhttp.Call getStoreReportByCategoryCall(String storeId, ReportByCategoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/user/analytics/{storeId}/reports/bycategory".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreReportByCategoryValidateBeforeCall(String storeId, ReportByCategoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreReportByCategory(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling getStoreReportByCategory(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStoreReportByCategoryCall(storeId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the report by category
     * Get the report by category
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ReportByCategoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportByCategoryResponse getStoreReportByCategory(String storeId, ReportByCategoryRequest request) throws ApiException {
        ApiResponse<ReportByCategoryResponse> resp = getStoreReportByCategoryWithHttpInfo(storeId, request);
        return resp.getData();
    }

    /**
     * Get the report by category
     * Get the report by category
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;ReportByCategoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportByCategoryResponse> getStoreReportByCategoryWithHttpInfo(String storeId, ReportByCategoryRequest request) throws ApiException {
        com.squareup.okhttp.Call call = getStoreReportByCategoryValidateBeforeCall(storeId, request, null, null);
        Type localVarReturnType = new TypeToken<ReportByCategoryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the report by category (asynchronously)
     * Get the report by category
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreReportByCategoryAsync(String storeId, ReportByCategoryRequest request, final ApiCallback<ReportByCategoryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreReportByCategoryValidateBeforeCall(storeId, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportByCategoryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStoreReportByChannel */
    private com.squareup.okhttp.Call getStoreReportByChannelCall(String storeId, ReportByChannelRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/user/analytics/{storeId}/reports/bychannel".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreReportByChannelValidateBeforeCall(String storeId, ReportByChannelRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreReportByChannel(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling getStoreReportByChannel(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStoreReportByChannelCall(storeId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the report by channel
     * Get the report by channel
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ReportByChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportByChannelResponse getStoreReportByChannel(String storeId, ReportByChannelRequest request) throws ApiException {
        ApiResponse<ReportByChannelResponse> resp = getStoreReportByChannelWithHttpInfo(storeId, request);
        return resp.getData();
    }

    /**
     * Get the report by channel
     * Get the report by channel
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;ReportByChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportByChannelResponse> getStoreReportByChannelWithHttpInfo(String storeId, ReportByChannelRequest request) throws ApiException {
        com.squareup.okhttp.Call call = getStoreReportByChannelValidateBeforeCall(storeId, request, null, null);
        Type localVarReturnType = new TypeToken<ReportByChannelResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the report by channel (asynchronously)
     * Get the report by channel
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreReportByChannelAsync(String storeId, ReportByChannelRequest request, final ApiCallback<ReportByChannelResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreReportByChannelValidateBeforeCall(storeId, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportByChannelResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStoreReportByDay */
    private com.squareup.okhttp.Call getStoreReportByDayCall(String storeId, ReportByDayRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/user/analytics/{storeId}/reports/byday".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreReportByDayValidateBeforeCall(String storeId, ReportByDayRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreReportByDay(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling getStoreReportByDay(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStoreReportByDayCall(storeId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the report by day
     * Get the report by day
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ReportByDayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportByDayResponse getStoreReportByDay(String storeId, ReportByDayRequest request) throws ApiException {
        ApiResponse<ReportByDayResponse> resp = getStoreReportByDayWithHttpInfo(storeId, request);
        return resp.getData();
    }

    /**
     * Get the report by day
     * Get the report by day
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;ReportByDayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportByDayResponse> getStoreReportByDayWithHttpInfo(String storeId, ReportByDayRequest request) throws ApiException {
        com.squareup.okhttp.Call call = getStoreReportByDayValidateBeforeCall(storeId, request, null, null);
        Type localVarReturnType = new TypeToken<ReportByDayResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the report by day (asynchronously)
     * Get the report by day
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreReportByDayAsync(String storeId, ReportByDayRequest request, final ApiCallback<ReportByDayResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreReportByDayValidateBeforeCall(storeId, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportByDayResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStoreReportByDayExport */
    private com.squareup.okhttp.Call getStoreReportByDayExportCall(String storeId, String format, ReportByDayRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/user/analytics/{storeId}/reports/byday/export".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreReportByDayExportValidateBeforeCall(String storeId, String format, ReportByDayRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreReportByDayExport(Async)");
        }
        
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling getStoreReportByDayExport(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling getStoreReportByDayExport(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStoreReportByDayExportCall(storeId, format, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the report by day
     * Get the report by day
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @return BeezUPCommonLink3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BeezUPCommonLink3 getStoreReportByDayExport(String storeId, String format, ReportByDayRequest request) throws ApiException {
        ApiResponse<BeezUPCommonLink3> resp = getStoreReportByDayExportWithHttpInfo(storeId, format, request);
        return resp.getData();
    }

    /**
     * Get the report by day
     * Get the report by day
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @return ApiResponse&lt;BeezUPCommonLink3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BeezUPCommonLink3> getStoreReportByDayExportWithHttpInfo(String storeId, String format, ReportByDayRequest request) throws ApiException {
        com.squareup.okhttp.Call call = getStoreReportByDayExportValidateBeforeCall(storeId, format, request, null, null);
        Type localVarReturnType = new TypeToken<BeezUPCommonLink3>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the report by day (asynchronously)
     * Get the report by day
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreReportByDayExportAsync(String storeId, String format, ReportByDayRequest request, final ApiCallback<BeezUPCommonLink3> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreReportByDayExportValidateBeforeCall(storeId, format, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BeezUPCommonLink3>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStoreReportByProduct */
    private com.squareup.okhttp.Call getStoreReportByProductCall(String storeId, ReportByProductRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/user/analytics/{storeId}/reports/byproduct".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreReportByProductValidateBeforeCall(String storeId, ReportByProductRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreReportByProduct(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling getStoreReportByProduct(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStoreReportByProductCall(storeId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the report by product
     * Get the report by product
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ReportByProductResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportByProductResponse getStoreReportByProduct(String storeId, ReportByProductRequest request) throws ApiException {
        ApiResponse<ReportByProductResponse> resp = getStoreReportByProductWithHttpInfo(storeId, request);
        return resp.getData();
    }

    /**
     * Get the report by product
     * Get the report by product
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;ReportByProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportByProductResponse> getStoreReportByProductWithHttpInfo(String storeId, ReportByProductRequest request) throws ApiException {
        com.squareup.okhttp.Call call = getStoreReportByProductValidateBeforeCall(storeId, request, null, null);
        Type localVarReturnType = new TypeToken<ReportByProductResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the report by product (asynchronously)
     * Get the report by product
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreReportByProductAsync(String storeId, ReportByProductRequest request, final ApiCallback<ReportByProductResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreReportByProductValidateBeforeCall(storeId, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportByProductResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for saveReportFilter */
    private com.squareup.okhttp.Call saveReportFilterCall(String storeId, String reportFilterId, SaveReportFilterRequest reportFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reportFilter;
        
        // create path and map variables
        String localVarPath = "/user/analytics/{storeId}/reports/filters/{reportFilterId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "reportFilterId" + "\\}", apiClient.escapeString(reportFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveReportFilterValidateBeforeCall(String storeId, String reportFilterId, SaveReportFilterRequest reportFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling saveReportFilter(Async)");
        }
        
        // verify the required parameter 'reportFilterId' is set
        if (reportFilterId == null) {
            throw new ApiException("Missing the required parameter 'reportFilterId' when calling saveReportFilter(Async)");
        }
        
        // verify the required parameter 'reportFilter' is set
        if (reportFilter == null) {
            throw new ApiException("Missing the required parameter 'reportFilter' when calling saveReportFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = saveReportFilterCall(storeId, reportFilterId, reportFilter, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Save the report filter
     * 
     * @param storeId Your store identifier (required)
     * @param reportFilterId Your report filter identifier (required)
     * @param reportFilter  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveReportFilter(String storeId, String reportFilterId, SaveReportFilterRequest reportFilter) throws ApiException {
        saveReportFilterWithHttpInfo(storeId, reportFilterId, reportFilter);
    }

    /**
     * Save the report filter
     * 
     * @param storeId Your store identifier (required)
     * @param reportFilterId Your report filter identifier (required)
     * @param reportFilter  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveReportFilterWithHttpInfo(String storeId, String reportFilterId, SaveReportFilterRequest reportFilter) throws ApiException {
        com.squareup.okhttp.Call call = saveReportFilterValidateBeforeCall(storeId, reportFilterId, reportFilter, null, null);
        return apiClient.execute(call);
    }

    /**
     * Save the report filter (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param reportFilterId Your report filter identifier (required)
     * @param reportFilter  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveReportFilterAsync(String storeId, String reportFilterId, SaveReportFilterRequest reportFilter, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveReportFilterValidateBeforeCall(storeId, reportFilterId, reportFilter, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
