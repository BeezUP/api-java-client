/*
 * BeezUP API
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AccountInfo;
import io.swagger.client.model.AccountPublications;
import io.swagger.client.model.AccountSynchronizations;
import io.swagger.client.model.AutoImportConfiguration;
import io.swagger.client.model.AutomaticTransitionInfos;
import io.swagger.client.model.BatchOrderOperationResponse;
import io.swagger.client.model.BeezUPColumnConfiguration;
import io.swagger.client.model.BeezUPCommonChannelColumnId;
import io.swagger.client.model.BeezUPCommonErrorResponseMessage;
import io.swagger.client.model.BeezUPCommonInfoSummaries;
import io.swagger.client.model.BeezUPCommonLOVLink2;
import io.swagger.client.model.BeezUPCommonLink2;
import io.swagger.client.model.BeezUPCommonListOfValueItem;
import io.swagger.client.model.BillingPeriods;
import io.swagger.client.model.CatalogColumns;
import io.swagger.client.model.Categories;
import io.swagger.client.model.ChangeCustomColumnExpressionRequest;
import io.swagger.client.model.ChangeCustomColumnRequest;
import io.swagger.client.model.ChangeOrderListRequest;
import io.swagger.client.model.ChangeOrderRequest;
import io.swagger.client.model.ChangePasswordRequest;
import io.swagger.client.model.ChangeUserColumnNameRequest;
import io.swagger.client.model.ChannelCatalog;
import io.swagger.client.model.ChannelCatalogCategoryMappings;
import io.swagger.client.model.ChannelCatalogList;
import io.swagger.client.model.ChannelCatalogMarketplaceProperties;
import io.swagger.client.model.ChannelCatalogMarketplaceSettings;
import io.swagger.client.model.ChannelCatalogProductInfo;
import io.swagger.client.model.ChannelCatalogProductInfoList;
import io.swagger.client.model.ChannelColumn;
import io.swagger.client.model.ChannelHeader;
import io.swagger.client.model.ChannelInfo;
import io.swagger.client.model.ChannelRootCategory;
import io.swagger.client.model.ClearMerchantOrderInfoListRequest;
import io.swagger.client.model.ColumnMappingList;
import io.swagger.client.model.CompanyInfo;
import io.swagger.client.model.ComputeExpressionRequest;
import io.swagger.client.model.ConfigureAutoImportIntervalRequest;
import io.swagger.client.model.ConfigureCatalogColumnCatalogRequest;
import io.swagger.client.model.Contracts;
import io.swagger.client.model.CostSettings;
import io.swagger.client.model.CreateChannelCatalogRequest;
import io.swagger.client.model.CreateContract;
import io.swagger.client.model.CreateCustomColumnRequest;
import io.swagger.client.model.CreateRuleRequest;
import io.swagger.client.model.CreateStoreRequest;
import io.swagger.client.model.CreditCardInfo;
import io.swagger.client.model.CreditCardInfoResponse;
import io.swagger.client.model.CustomColumns;
import io.swagger.client.model.DetectedCatalogColumns;
import io.swagger.client.model.ExclusionFilterOperator;
import io.swagger.client.model.ExclusionFilters;
import io.swagger.client.model.ExportOrderListRequest;
import io.swagger.client.model.FriendEmail;
import io.swagger.client.model.FunctionalityRightInfo;
import io.swagger.client.model.GeneralSettings;
import io.swagger.client.model.GetChannelCatalogProductInfoListRequest;
import io.swagger.client.model.GetProductsRequest;
import io.swagger.client.model.ImportationMonitoring;
import io.swagger.client.model.ImportationReporting;
import io.swagger.client.model.ImportationTechnicalProgression;
import io.swagger.client.model.InlineResponse409;
import io.swagger.client.model.Invoices;
import io.swagger.client.model.LastManualImportInputConfiguration;
import io.swagger.client.model.LinksGetStoresLink;
import io.swagger.client.model.MapBeezUPColumnRequest;
import io.swagger.client.model.MapCategoryRequest;
import io.swagger.client.model.MarketplaceChannelCatalogList;
import io.swagger.client.model.Offer;
import io.swagger.client.model.OfferRequest;
import io.swagger.client.model.OptimiseRequest;
import io.swagger.client.model.Order;
import io.swagger.client.model.OrderExportations;
import io.swagger.client.model.OrderHistory;
import io.swagger.client.model.OrderListFull;
import io.swagger.client.model.OrderListLight;
import io.swagger.client.model.OrderListRequest;
import io.swagger.client.model.PersonalInfo;
import io.swagger.client.model.Product;
import io.swagger.client.model.ProductOverrides;
import io.swagger.client.model.ProductSample;
import io.swagger.client.model.Products;
import io.swagger.client.model.ProfilePictureInfo;
import io.swagger.client.model.ReportByCategoryRequest;
import io.swagger.client.model.ReportByCategoryResponse;
import io.swagger.client.model.ReportByChannelRequest;
import io.swagger.client.model.ReportByChannelResponse;
import io.swagger.client.model.ReportByDayRequest;
import io.swagger.client.model.ReportByDayResponse;
import io.swagger.client.model.ReportByProductRequest;
import io.swagger.client.model.ReportByProductResponse;
import io.swagger.client.model.ReportFilter;
import io.swagger.client.model.ReportFilters;
import io.swagger.client.model.Rule;
import io.swagger.client.model.RuleExecutionReportings;
import io.swagger.client.model.Rules;
import io.swagger.client.model.SaveAutomaticTransitionRequest;
import io.swagger.client.model.SaveReportFilterRequest;
import io.swagger.client.model.SaveStoreAlertRequest;
import io.swagger.client.model.ScheduleAutoImportRequest;
import io.swagger.client.model.SetChannelCatalogMarketplaceSettingsRequest;
import io.swagger.client.model.SetMerchantOrderInfoListRequest;
import io.swagger.client.model.SetMerchantOrderInfoRequest;
import io.swagger.client.model.StandardOffers;
import io.swagger.client.model.StartManualImportRequest;
import io.swagger.client.model.StoreAlerts;
import io.swagger.client.model.StoreHeader;
import io.swagger.client.model.StoreShares;
import io.swagger.client.model.StoreTrackingStatus;
import io.swagger.client.model.Stores;
import io.swagger.client.model.TerminateContract;
import io.swagger.client.model.TrackedClicks;
import io.swagger.client.model.TrackedExternalOrders;
import io.swagger.client.model.TrackedOrders;
import io.swagger.client.model.TrackingStatus;
import io.swagger.client.model.UnmapCategoryRequest;
import io.swagger.client.model.UpdateRuleRequest;
import io.swagger.client.model.UpdateStoreRequest;
import io.swagger.client.model.UpgradeOfferRequired;
import io.swagger.client.model.UserFriendInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BeezUPApi {
    private ApiClient apiClient;

    public BeezUPApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BeezUPApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for activateUserAccount */
    private com.squareup.okhttp.Call activateUserAccountCall(String emailActivationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailActivationId;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/account/activate".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call activateUserAccountValidateBeforeCall(String emailActivationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'emailActivationId' is set
        if (emailActivationId == null) {
            throw new ApiException("Missing the required parameter 'emailActivationId' when calling activateUserAccount(Async)");
        }
        
        
        com.squareup.okhttp.Call call = activateUserAccountCall(emailActivationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Activate the user account
     * 
     * @param emailActivationId The email activation id received by email. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void activateUserAccount(String emailActivationId) throws ApiException {
        activateUserAccountWithHttpInfo(emailActivationId);
    }

    /**
     * Activate the user account
     * 
     * @param emailActivationId The email activation id received by email. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> activateUserAccountWithHttpInfo(String emailActivationId) throws ApiException {
        com.squareup.okhttp.Call call = activateUserAccountValidateBeforeCall(emailActivationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Activate the user account (asynchronously)
     * 
     * @param emailActivationId The email activation id received by email. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call activateUserAccountAsync(String emailActivationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = activateUserAccountValidateBeforeCall(emailActivationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for autoConfigureAutoImportInterval */
    private com.squareup.okhttp.Call autoConfigureAutoImportIntervalCall(String storeId, ConfigureAutoImportIntervalRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/autoImport/scheduling/interval".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call autoConfigureAutoImportIntervalValidateBeforeCall(String storeId, ConfigureAutoImportIntervalRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling autoConfigureAutoImportInterval(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling autoConfigureAutoImportInterval(Async)");
        }
        
        
        com.squareup.okhttp.Call call = autoConfigureAutoImportIntervalCall(storeId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Configure Auto Import Interval
     * 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void autoConfigureAutoImportInterval(String storeId, ConfigureAutoImportIntervalRequest request) throws ApiException {
        autoConfigureAutoImportIntervalWithHttpInfo(storeId, request);
    }

    /**
     * Configure Auto Import Interval
     * 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> autoConfigureAutoImportIntervalWithHttpInfo(String storeId, ConfigureAutoImportIntervalRequest request) throws ApiException {
        com.squareup.okhttp.Call call = autoConfigureAutoImportIntervalValidateBeforeCall(storeId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Configure Auto Import Interval (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call autoConfigureAutoImportIntervalAsync(String storeId, ConfigureAutoImportIntervalRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = autoConfigureAutoImportIntervalValidateBeforeCall(storeId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for autoDeleteAutoImport */
    private com.squareup.okhttp.Call autoDeleteAutoImportCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/autoImport".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call autoDeleteAutoImportValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling autoDeleteAutoImport(Async)");
        }
        
        
        com.squareup.okhttp.Call call = autoDeleteAutoImportCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Auto Import
     * 
     * @param storeId Your store identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void autoDeleteAutoImport(String storeId) throws ApiException {
        autoDeleteAutoImportWithHttpInfo(storeId);
    }

    /**
     * Delete Auto Import
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> autoDeleteAutoImportWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = autoDeleteAutoImportValidateBeforeCall(storeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Auto Import (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call autoDeleteAutoImportAsync(String storeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = autoDeleteAutoImportValidateBeforeCall(storeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for autoGetAutoImportConfiguration */
    private com.squareup.okhttp.Call autoGetAutoImportConfigurationCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/autoImport".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call autoGetAutoImportConfigurationValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling autoGetAutoImportConfiguration(Async)");
        }
        
        
        com.squareup.okhttp.Call call = autoGetAutoImportConfigurationCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the auto import configuration
     * 
     * @param storeId Your store identifier (required)
     * @return AutoImportConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutoImportConfiguration autoGetAutoImportConfiguration(String storeId) throws ApiException {
        ApiResponse<AutoImportConfiguration> resp = autoGetAutoImportConfigurationWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * Get the auto import configuration
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;AutoImportConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutoImportConfiguration> autoGetAutoImportConfigurationWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = autoGetAutoImportConfigurationValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<AutoImportConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the auto import configuration (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call autoGetAutoImportConfigurationAsync(String storeId, final ApiCallback<AutoImportConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = autoGetAutoImportConfigurationValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutoImportConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for autoPauseAutoImport */
    private com.squareup.okhttp.Call autoPauseAutoImportCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/autoImport/pause".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call autoPauseAutoImportValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling autoPauseAutoImport(Async)");
        }
        
        
        com.squareup.okhttp.Call call = autoPauseAutoImportCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Pause Auto Import
     * 
     * @param storeId Your store identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void autoPauseAutoImport(String storeId) throws ApiException {
        autoPauseAutoImportWithHttpInfo(storeId);
    }

    /**
     * Pause Auto Import
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> autoPauseAutoImportWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = autoPauseAutoImportValidateBeforeCall(storeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Pause Auto Import (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call autoPauseAutoImportAsync(String storeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = autoPauseAutoImportValidateBeforeCall(storeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for autoResumeAutoImport */
    private com.squareup.okhttp.Call autoResumeAutoImportCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/autoImport/resume".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call autoResumeAutoImportValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling autoResumeAutoImport(Async)");
        }
        
        
        com.squareup.okhttp.Call call = autoResumeAutoImportCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resume Auto Import
     * 
     * @param storeId Your store identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void autoResumeAutoImport(String storeId) throws ApiException {
        autoResumeAutoImportWithHttpInfo(storeId);
    }

    /**
     * Resume Auto Import
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> autoResumeAutoImportWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = autoResumeAutoImportValidateBeforeCall(storeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Resume Auto Import (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call autoResumeAutoImportAsync(String storeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = autoResumeAutoImportValidateBeforeCall(storeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for autoScheduleAutoImport */
    private com.squareup.okhttp.Call autoScheduleAutoImportCall(String storeId, ScheduleAutoImportRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/autoImport/scheduling/schedules".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call autoScheduleAutoImportValidateBeforeCall(String storeId, ScheduleAutoImportRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling autoScheduleAutoImport(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling autoScheduleAutoImport(Async)");
        }
        
        
        com.squareup.okhttp.Call call = autoScheduleAutoImportCall(storeId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Configure Auto Import Schedules
     * 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void autoScheduleAutoImport(String storeId, ScheduleAutoImportRequest request) throws ApiException {
        autoScheduleAutoImportWithHttpInfo(storeId, request);
    }

    /**
     * Configure Auto Import Schedules
     * 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> autoScheduleAutoImportWithHttpInfo(String storeId, ScheduleAutoImportRequest request) throws ApiException {
        com.squareup.okhttp.Call call = autoScheduleAutoImportValidateBeforeCall(storeId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Configure Auto Import Schedules (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call autoScheduleAutoImportAsync(String storeId, ScheduleAutoImportRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = autoScheduleAutoImportValidateBeforeCall(storeId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for autoStartAutoImport */
    private com.squareup.okhttp.Call autoStartAutoImportCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/autoImport/start".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call autoStartAutoImportValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling autoStartAutoImport(Async)");
        }
        
        
        com.squareup.okhttp.Call call = autoStartAutoImportCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start Auto Import Manually
     * 
     * @param storeId Your store identifier (required)
     * @return List&lt;BeezUPCommonLink2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeezUPCommonLink2> autoStartAutoImport(String storeId) throws ApiException {
        ApiResponse<List<BeezUPCommonLink2>> resp = autoStartAutoImportWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * Start Auto Import Manually
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;List&lt;BeezUPCommonLink2&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeezUPCommonLink2>> autoStartAutoImportWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = autoStartAutoImportValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLink2>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start Auto Import Manually (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call autoStartAutoImportAsync(String storeId, final ApiCallback<List<BeezUPCommonLink2>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = autoStartAutoImportValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLink2>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for catalogChangeCatalogColumnUserName */
    private com.squareup.okhttp.Call catalogChangeCatalogColumnUserNameCall(String storeId, String columnId, ChangeUserColumnNameRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/catalogColumns/{columnId}/rename".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogChangeCatalogColumnUserNameValidateBeforeCall(String storeId, String columnId, ChangeUserColumnNameRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogChangeCatalogColumnUserName(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling catalogChangeCatalogColumnUserName(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling catalogChangeCatalogColumnUserName(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogChangeCatalogColumnUserNameCall(storeId, columnId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change Catalog Column User Name
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The catalog column identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void catalogChangeCatalogColumnUserName(String storeId, String columnId, ChangeUserColumnNameRequest request) throws ApiException {
        catalogChangeCatalogColumnUserNameWithHttpInfo(storeId, columnId, request);
    }

    /**
     * Change Catalog Column User Name
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The catalog column identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> catalogChangeCatalogColumnUserNameWithHttpInfo(String storeId, String columnId, ChangeUserColumnNameRequest request) throws ApiException {
        com.squareup.okhttp.Call call = catalogChangeCatalogColumnUserNameValidateBeforeCall(storeId, columnId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Change Catalog Column User Name (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The catalog column identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogChangeCatalogColumnUserNameAsync(String storeId, String columnId, ChangeUserColumnNameRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogChangeCatalogColumnUserNameValidateBeforeCall(storeId, columnId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for catalogChangeCustomColumnExpression */
    private com.squareup.okhttp.Call catalogChangeCustomColumnExpressionCall(String storeId, String columnId, ChangeCustomColumnExpressionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogChangeCustomColumnExpressionValidateBeforeCall(String storeId, String columnId, ChangeCustomColumnExpressionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogChangeCustomColumnExpression(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling catalogChangeCustomColumnExpression(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling catalogChangeCustomColumnExpression(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogChangeCustomColumnExpressionCall(storeId, columnId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change custom column expression
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void catalogChangeCustomColumnExpression(String storeId, String columnId, ChangeCustomColumnExpressionRequest request) throws ApiException {
        catalogChangeCustomColumnExpressionWithHttpInfo(storeId, columnId, request);
    }

    /**
     * Change custom column expression
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> catalogChangeCustomColumnExpressionWithHttpInfo(String storeId, String columnId, ChangeCustomColumnExpressionRequest request) throws ApiException {
        com.squareup.okhttp.Call call = catalogChangeCustomColumnExpressionValidateBeforeCall(storeId, columnId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Change custom column expression (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogChangeCustomColumnExpressionAsync(String storeId, String columnId, ChangeCustomColumnExpressionRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogChangeCustomColumnExpressionValidateBeforeCall(storeId, columnId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for catalogChangeCustomColumnUserName */
    private com.squareup.okhttp.Call catalogChangeCustomColumnUserNameCall(String storeId, String columnId, ChangeUserColumnNameRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}/rename".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogChangeCustomColumnUserNameValidateBeforeCall(String storeId, String columnId, ChangeUserColumnNameRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogChangeCustomColumnUserName(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling catalogChangeCustomColumnUserName(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling catalogChangeCustomColumnUserName(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogChangeCustomColumnUserNameCall(storeId, columnId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change Custom Column User Name
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void catalogChangeCustomColumnUserName(String storeId, String columnId, ChangeUserColumnNameRequest request) throws ApiException {
        catalogChangeCustomColumnUserNameWithHttpInfo(storeId, columnId, request);
    }

    /**
     * Change Custom Column User Name
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> catalogChangeCustomColumnUserNameWithHttpInfo(String storeId, String columnId, ChangeUserColumnNameRequest request) throws ApiException {
        com.squareup.okhttp.Call call = catalogChangeCustomColumnUserNameValidateBeforeCall(storeId, columnId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Change Custom Column User Name (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogChangeCustomColumnUserNameAsync(String storeId, String columnId, ChangeUserColumnNameRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogChangeCustomColumnUserNameValidateBeforeCall(storeId, columnId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for catalogComputeExpression */
    private com.squareup.okhttp.Call catalogComputeExpressionCall(String storeId, ComputeExpressionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/customColumns/computeExpression".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogComputeExpressionValidateBeforeCall(String storeId, ComputeExpressionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogComputeExpression(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling catalogComputeExpression(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogComputeExpressionCall(storeId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Compute the expression for this catalog.
     * 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String catalogComputeExpression(String storeId, ComputeExpressionRequest request) throws ApiException {
        ApiResponse<String> resp = catalogComputeExpressionWithHttpInfo(storeId, request);
        return resp.getData();
    }

    /**
     * Compute the expression for this catalog.
     * 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> catalogComputeExpressionWithHttpInfo(String storeId, ComputeExpressionRequest request) throws ApiException {
        com.squareup.okhttp.Call call = catalogComputeExpressionValidateBeforeCall(storeId, request, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Compute the expression for this catalog. (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogComputeExpressionAsync(String storeId, ComputeExpressionRequest request, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogComputeExpressionValidateBeforeCall(storeId, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for catalogDeleteCustomColumn */
    private com.squareup.okhttp.Call catalogDeleteCustomColumnCall(String storeId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogDeleteCustomColumnValidateBeforeCall(String storeId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogDeleteCustomColumn(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling catalogDeleteCustomColumn(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogDeleteCustomColumnCall(storeId, columnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete custom column
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void catalogDeleteCustomColumn(String storeId, String columnId) throws ApiException {
        catalogDeleteCustomColumnWithHttpInfo(storeId, columnId);
    }

    /**
     * Delete custom column
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> catalogDeleteCustomColumnWithHttpInfo(String storeId, String columnId) throws ApiException {
        com.squareup.okhttp.Call call = catalogDeleteCustomColumnValidateBeforeCall(storeId, columnId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete custom column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogDeleteCustomColumnAsync(String storeId, String columnId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogDeleteCustomColumnValidateBeforeCall(storeId, columnId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for catalogGetBeezUPColumns */
    private com.squareup.okhttp.Call catalogGetBeezUPColumnsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/beezupColumns".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogGetBeezUPColumnsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = catalogGetBeezUPColumnsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the BeezUP columns
     * Get the BeezUP columns, this columns are used for mapping during the manual catalog importation process.
     * @return List&lt;BeezUPColumnConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeezUPColumnConfiguration> catalogGetBeezUPColumns() throws ApiException {
        ApiResponse<List<BeezUPColumnConfiguration>> resp = catalogGetBeezUPColumnsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get the BeezUP columns
     * Get the BeezUP columns, this columns are used for mapping during the manual catalog importation process.
     * @return ApiResponse&lt;List&lt;BeezUPColumnConfiguration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeezUPColumnConfiguration>> catalogGetBeezUPColumnsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = catalogGetBeezUPColumnsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<BeezUPColumnConfiguration>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the BeezUP columns (asynchronously)
     * Get the BeezUP columns, this columns are used for mapping during the manual catalog importation process.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogGetBeezUPColumnsAsync(final ApiCallback<List<BeezUPColumnConfiguration>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogGetBeezUPColumnsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeezUPColumnConfiguration>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for catalogGetCatalogColumns */
    private com.squareup.okhttp.Call catalogGetCatalogColumnsCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/catalogColumns".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogGetCatalogColumnsValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetCatalogColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogGetCatalogColumnsCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get catalog column list
     * 
     * @param storeId Your store identifier (required)
     * @return CatalogColumns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CatalogColumns catalogGetCatalogColumns(String storeId) throws ApiException {
        ApiResponse<CatalogColumns> resp = catalogGetCatalogColumnsWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * Get catalog column list
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;CatalogColumns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CatalogColumns> catalogGetCatalogColumnsWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = catalogGetCatalogColumnsValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<CatalogColumns>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get catalog column list (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogGetCatalogColumnsAsync(String storeId, final ApiCallback<CatalogColumns> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogGetCatalogColumnsValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CatalogColumns>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for catalogGetCategories */
    private com.squareup.okhttp.Call catalogGetCategoriesCall(String storeId, List<String> acceptEncoding, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/categories".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptEncoding != null)
        localVarHeaderParams.put("Accept-Encoding", apiClient.parameterToString(acceptEncoding));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogGetCategoriesValidateBeforeCall(String storeId, List<String> acceptEncoding, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetCategories(Async)");
        }
        
        // verify the required parameter 'acceptEncoding' is set
        if (acceptEncoding == null) {
            throw new ApiException("Missing the required parameter 'acceptEncoding' when calling catalogGetCategories(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogGetCategoriesCall(storeId, acceptEncoding, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get category list
     * 
     * @param storeId Your store identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @return Categories
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Categories catalogGetCategories(String storeId, List<String> acceptEncoding) throws ApiException {
        ApiResponse<Categories> resp = catalogGetCategoriesWithHttpInfo(storeId, acceptEncoding);
        return resp.getData();
    }

    /**
     * Get category list
     * 
     * @param storeId Your store identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @return ApiResponse&lt;Categories&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Categories> catalogGetCategoriesWithHttpInfo(String storeId, List<String> acceptEncoding) throws ApiException {
        com.squareup.okhttp.Call call = catalogGetCategoriesValidateBeforeCall(storeId, acceptEncoding, null, null);
        Type localVarReturnType = new TypeToken<Categories>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get category list (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogGetCategoriesAsync(String storeId, List<String> acceptEncoding, final ApiCallback<Categories> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogGetCategoriesValidateBeforeCall(storeId, acceptEncoding, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Categories>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for catalogGetCustomColumnExpression */
    private com.squareup.okhttp.Call catalogGetCustomColumnExpressionCall(String storeId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogGetCustomColumnExpressionValidateBeforeCall(String storeId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetCustomColumnExpression(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling catalogGetCustomColumnExpression(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogGetCustomColumnExpressionCall(storeId, columnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the encrypted custom column expression
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String catalogGetCustomColumnExpression(String storeId, String columnId) throws ApiException {
        ApiResponse<String> resp = catalogGetCustomColumnExpressionWithHttpInfo(storeId, columnId);
        return resp.getData();
    }

    /**
     * Get the encrypted custom column expression
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> catalogGetCustomColumnExpressionWithHttpInfo(String storeId, String columnId) throws ApiException {
        com.squareup.okhttp.Call call = catalogGetCustomColumnExpressionValidateBeforeCall(storeId, columnId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the encrypted custom column expression (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogGetCustomColumnExpressionAsync(String storeId, String columnId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogGetCustomColumnExpressionValidateBeforeCall(storeId, columnId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for catalogGetCustomColumns */
    private com.squareup.okhttp.Call catalogGetCustomColumnsCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/customColumns".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogGetCustomColumnsValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetCustomColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogGetCustomColumnsCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get custom column list
     * 
     * @param storeId Your store identifier (required)
     * @return CustomColumns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomColumns catalogGetCustomColumns(String storeId) throws ApiException {
        ApiResponse<CustomColumns> resp = catalogGetCustomColumnsWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * Get custom column list
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;CustomColumns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomColumns> catalogGetCustomColumnsWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = catalogGetCustomColumnsValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<CustomColumns>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get custom column list (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogGetCustomColumnsAsync(String storeId, final ApiCallback<CustomColumns> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogGetCustomColumnsValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomColumns>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for catalogGetProduct */
    private com.squareup.okhttp.Call catalogGetProductCall(String storeId, String productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/products/{productId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogGetProductValidateBeforeCall(String storeId, String productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetProduct(Async)");
        }
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling catalogGetProduct(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogGetProductCall(storeId, productId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get product
     * 
     * @param storeId Your store identifier (required)
     * @param productId The product identifier you want to get (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Product catalogGetProduct(String storeId, String productId) throws ApiException {
        ApiResponse<Product> resp = catalogGetProductWithHttpInfo(storeId, productId);
        return resp.getData();
    }

    /**
     * Get product
     * 
     * @param storeId Your store identifier (required)
     * @param productId The product identifier you want to get (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Product> catalogGetProductWithHttpInfo(String storeId, String productId) throws ApiException {
        com.squareup.okhttp.Call call = catalogGetProductValidateBeforeCall(storeId, productId, null, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get product (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param productId The product identifier you want to get (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogGetProductAsync(String storeId, String productId, final ApiCallback<Product> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogGetProductValidateBeforeCall(storeId, productId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for catalogGetProducts */
    private com.squareup.okhttp.Call catalogGetProductsCall(String storeId, GetProductsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/products".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogGetProductsValidateBeforeCall(String storeId, GetProductsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetProducts(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogGetProductsCall(storeId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get product list
     * 
     * @param storeId Your store identifier (required)
     * @param request  (optional)
     * @return Products
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Products catalogGetProducts(String storeId, GetProductsRequest request) throws ApiException {
        ApiResponse<Products> resp = catalogGetProductsWithHttpInfo(storeId, request);
        return resp.getData();
    }

    /**
     * Get product list
     * 
     * @param storeId Your store identifier (required)
     * @param request  (optional)
     * @return ApiResponse&lt;Products&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Products> catalogGetProductsWithHttpInfo(String storeId, GetProductsRequest request) throws ApiException {
        com.squareup.okhttp.Call call = catalogGetProductsValidateBeforeCall(storeId, request, null, null);
        Type localVarReturnType = new TypeToken<Products>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get product list (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param request  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogGetProductsAsync(String storeId, GetProductsRequest request, final ApiCallback<Products> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogGetProductsValidateBeforeCall(storeId, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Products>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for catalogGetRandomProducts */
    private com.squareup.okhttp.Call catalogGetRandomProductsCall(String storeId, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/products/random".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogGetRandomProductsValidateBeforeCall(String storeId, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetRandomProducts(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogGetRandomProductsCall(storeId, count, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get random product list
     * 
     * @param storeId Your store identifier (required)
     * @param count The count of random product you want to get (optional, default to 100)
     * @return Products
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Products catalogGetRandomProducts(String storeId, Integer count) throws ApiException {
        ApiResponse<Products> resp = catalogGetRandomProductsWithHttpInfo(storeId, count);
        return resp.getData();
    }

    /**
     * Get random product list
     * 
     * @param storeId Your store identifier (required)
     * @param count The count of random product you want to get (optional, default to 100)
     * @return ApiResponse&lt;Products&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Products> catalogGetRandomProductsWithHttpInfo(String storeId, Integer count) throws ApiException {
        com.squareup.okhttp.Call call = catalogGetRandomProductsValidateBeforeCall(storeId, count, null, null);
        Type localVarReturnType = new TypeToken<Products>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get random product list (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param count The count of random product you want to get (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogGetRandomProductsAsync(String storeId, Integer count, final ApiCallback<Products> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogGetRandomProductsValidateBeforeCall(storeId, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Products>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for catalogSaveCustomColumn */
    private com.squareup.okhttp.Call catalogSaveCustomColumnCall(String storeId, String columnId, CreateCustomColumnRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogSaveCustomColumnValidateBeforeCall(String storeId, String columnId, CreateCustomColumnRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogSaveCustomColumn(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling catalogSaveCustomColumn(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling catalogSaveCustomColumn(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogSaveCustomColumnCall(storeId, columnId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create or replace a custom column
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void catalogSaveCustomColumn(String storeId, String columnId, CreateCustomColumnRequest request) throws ApiException {
        catalogSaveCustomColumnWithHttpInfo(storeId, columnId, request);
    }

    /**
     * Create or replace a custom column
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> catalogSaveCustomColumnWithHttpInfo(String storeId, String columnId, CreateCustomColumnRequest request) throws ApiException {
        com.squareup.okhttp.Call call = catalogSaveCustomColumnValidateBeforeCall(storeId, columnId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create or replace a custom column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogSaveCustomColumnAsync(String storeId, String columnId, CreateCustomColumnRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogSaveCustomColumnValidateBeforeCall(storeId, columnId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for changeOrder */
    private com.squareup.okhttp.Call changeOrderCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String changeOrderType, String userName, ChangeOrderRequest request, String ifMatch, Boolean testMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketplaceTechnicalCode" + "\\}", apiClient.escapeString(marketplaceTechnicalCode.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "beezUPOrderId" + "\\}", apiClient.escapeString(beezUPOrderId.toString()))
        .replaceAll("\\{" + "changeOrderType" + "\\}", apiClient.escapeString(changeOrderType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userName", userName));
        if (testMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "testMode", testMode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeOrderValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String changeOrderType, String userName, ChangeOrderRequest request, String ifMatch, Boolean testMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling changeOrder(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling changeOrder(Async)");
        }
        
        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling changeOrder(Async)");
        }
        
        // verify the required parameter 'changeOrderType' is set
        if (changeOrderType == null) {
            throw new ApiException("Missing the required parameter 'changeOrderType' when calling changeOrder(Async)");
        }
        
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling changeOrder(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling changeOrder(Async)");
        }
        
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling changeOrder(Async)");
        }
        
        
        com.squareup.okhttp.Call call = changeOrderCall(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, request, ifMatch, testMode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change your marketplace Order Information (accept, ship, etc.)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param request  (required)
     * @param ifMatch ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void changeOrder(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String changeOrderType, String userName, ChangeOrderRequest request, String ifMatch, Boolean testMode) throws ApiException {
        changeOrderWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, request, ifMatch, testMode);
    }

    /**
     * Change your marketplace Order Information (accept, ship, etc.)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param request  (required)
     * @param ifMatch ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> changeOrderWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String changeOrderType, String userName, ChangeOrderRequest request, String ifMatch, Boolean testMode) throws ApiException {
        com.squareup.okhttp.Call call = changeOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, request, ifMatch, testMode, null, null);
        return apiClient.execute(call);
    }

    /**
     * Change your marketplace Order Information (accept, ship, etc.) (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param request  (required)
     * @param ifMatch ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeOrderAsync(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String changeOrderType, String userName, ChangeOrderRequest request, String ifMatch, Boolean testMode, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, request, ifMatch, testMode, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for changeOrderList */
    private com.squareup.okhttp.Call changeOrderListCall(String changeOrderType, String userName, ChangeOrderListRequest request, Boolean testMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/batches/changeOrders/{changeOrderType}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "changeOrderType" + "\\}", apiClient.escapeString(changeOrderType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userName", userName));
        if (testMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "testMode", testMode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeOrderListValidateBeforeCall(String changeOrderType, String userName, ChangeOrderListRequest request, Boolean testMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'changeOrderType' is set
        if (changeOrderType == null) {
            throw new ApiException("Missing the required parameter 'changeOrderType' when calling changeOrderList(Async)");
        }
        
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling changeOrderList(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling changeOrderList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = changeOrderListCall(changeOrderType, userName, request, testMode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a batch of operations to change your marketplace Order information (accept, ship, etc.)
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param request  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @return BatchOrderOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchOrderOperationResponse changeOrderList(String changeOrderType, String userName, ChangeOrderListRequest request, Boolean testMode) throws ApiException {
        ApiResponse<BatchOrderOperationResponse> resp = changeOrderListWithHttpInfo(changeOrderType, userName, request, testMode);
        return resp.getData();
    }

    /**
     * Send a batch of operations to change your marketplace Order information (accept, ship, etc.)
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param request  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @return ApiResponse&lt;BatchOrderOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchOrderOperationResponse> changeOrderListWithHttpInfo(String changeOrderType, String userName, ChangeOrderListRequest request, Boolean testMode) throws ApiException {
        com.squareup.okhttp.Call call = changeOrderListValidateBeforeCall(changeOrderType, userName, request, testMode, null, null);
        Type localVarReturnType = new TypeToken<BatchOrderOperationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send a batch of operations to change your marketplace Order information (accept, ship, etc.) (asynchronously)
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param changeOrderType The Order change type (required)
     * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param request  (required)
     * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeOrderListAsync(String changeOrderType, String userName, ChangeOrderListRequest request, Boolean testMode, final ApiCallback<BatchOrderOperationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeOrderListValidateBeforeCall(changeOrderType, userName, request, testMode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchOrderOperationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for changePassword */
    private com.squareup.okhttp.Call changePasswordCall(ChangePasswordRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/account/changePassword".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changePasswordValidateBeforeCall(ChangePasswordRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling changePassword(Async)");
        }
        
        
        com.squareup.okhttp.Call call = changePasswordCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change user password
     * 
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void changePassword(ChangePasswordRequest request) throws ApiException {
        changePasswordWithHttpInfo(request);
    }

    /**
     * Change user password
     * 
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> changePasswordWithHttpInfo(ChangePasswordRequest request) throws ApiException {
        com.squareup.okhttp.Call call = changePasswordValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Change user password (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changePasswordAsync(ChangePasswordRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changePasswordValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for clearMerchantOrderInfo */
    private com.squareup.okhttp.Call clearMerchantOrderInfoCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketplaceTechnicalCode" + "\\}", apiClient.escapeString(marketplaceTechnicalCode.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "beezUPOrderId" + "\\}", apiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clearMerchantOrderInfoValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling clearMerchantOrderInfo(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling clearMerchantOrderInfo(Async)");
        }
        
        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling clearMerchantOrderInfo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = clearMerchantOrderInfoCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clear an Order&#39;s merchant information
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void clearMerchantOrderInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        clearMerchantOrderInfoWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
    }

    /**
     * Clear an Order&#39;s merchant information
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> clearMerchantOrderInfoWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        com.squareup.okhttp.Call call = clearMerchantOrderInfoValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Clear an Order&#39;s merchant information (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clearMerchantOrderInfoAsync(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clearMerchantOrderInfoValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for clearMerchantOrderInfoList */
    private com.squareup.okhttp.Call clearMerchantOrderInfoListCall(ClearMerchantOrderInfoListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/batches/clearMerchantOrderInfos".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clearMerchantOrderInfoListValidateBeforeCall(ClearMerchantOrderInfoListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling clearMerchantOrderInfoList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = clearMerchantOrderInfoListCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a batch of operations to clear an Order&#39;s merchant information
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param request  (required)
     * @return BatchOrderOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchOrderOperationResponse clearMerchantOrderInfoList(ClearMerchantOrderInfoListRequest request) throws ApiException {
        ApiResponse<BatchOrderOperationResponse> resp = clearMerchantOrderInfoListWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Send a batch of operations to clear an Order&#39;s merchant information
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param request  (required)
     * @return ApiResponse&lt;BatchOrderOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchOrderOperationResponse> clearMerchantOrderInfoListWithHttpInfo(ClearMerchantOrderInfoListRequest request) throws ApiException {
        com.squareup.okhttp.Call call = clearMerchantOrderInfoListValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<BatchOrderOperationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send a batch of operations to clear an Order&#39;s merchant information (asynchronously)
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clearMerchantOrderInfoListAsync(ClearMerchantOrderInfoListRequest request, final ApiCallback<BatchOrderOperationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clearMerchantOrderInfoListValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchOrderOperationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for configureAutomaticTransitions */
    private com.squareup.okhttp.Call configureAutomaticTransitionsCall(SaveAutomaticTransitionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/automaticTransitions".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configureAutomaticTransitionsValidateBeforeCall(SaveAutomaticTransitionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling configureAutomaticTransitions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = configureAutomaticTransitionsCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Configure new or existing automatic Order status transition
     * 
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void configureAutomaticTransitions(SaveAutomaticTransitionRequest request) throws ApiException {
        configureAutomaticTransitionsWithHttpInfo(request);
    }

    /**
     * Configure new or existing automatic Order status transition
     * 
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> configureAutomaticTransitionsWithHttpInfo(SaveAutomaticTransitionRequest request) throws ApiException {
        com.squareup.okhttp.Call call = configureAutomaticTransitionsValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Configure new or existing automatic Order status transition (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configureAutomaticTransitionsAsync(SaveAutomaticTransitionRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configureAutomaticTransitionsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for configureChannelCatalogCostSettings */
    private com.squareup.okhttp.Call configureChannelCatalogCostSettingsCall(String channelCatalogId, CostSettings request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}/settings/cost".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelCatalogId" + "\\}", apiClient.escapeString(channelCatalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configureChannelCatalogCostSettingsValidateBeforeCall(String channelCatalogId, CostSettings request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling configureChannelCatalogCostSettings(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling configureChannelCatalogCostSettings(Async)");
        }
        
        
        com.squareup.okhttp.Call call = configureChannelCatalogCostSettingsCall(channelCatalogId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Disable a channel catalog
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void configureChannelCatalogCostSettings(String channelCatalogId, CostSettings request) throws ApiException {
        configureChannelCatalogCostSettingsWithHttpInfo(channelCatalogId, request);
    }

    /**
     * Disable a channel catalog
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> configureChannelCatalogCostSettingsWithHttpInfo(String channelCatalogId, CostSettings request) throws ApiException {
        com.squareup.okhttp.Call call = configureChannelCatalogCostSettingsValidateBeforeCall(channelCatalogId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Disable a channel catalog (asynchronously)
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configureChannelCatalogCostSettingsAsync(String channelCatalogId, CostSettings request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configureChannelCatalogCostSettingsValidateBeforeCall(channelCatalogId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for configureChannelCatalogExclusionFilters */
    private com.squareup.okhttp.Call configureChannelCatalogExclusionFiltersCall(String channelCatalogId, ExclusionFilters request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}/exclusionFilters".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelCatalogId" + "\\}", apiClient.escapeString(channelCatalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configureChannelCatalogExclusionFiltersValidateBeforeCall(String channelCatalogId, ExclusionFilters request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling configureChannelCatalogExclusionFilters(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling configureChannelCatalogExclusionFilters(Async)");
        }
        
        
        com.squareup.okhttp.Call call = configureChannelCatalogExclusionFiltersCall(channelCatalogId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Configure channel catalog exclusion filters
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void configureChannelCatalogExclusionFilters(String channelCatalogId, ExclusionFilters request) throws ApiException {
        configureChannelCatalogExclusionFiltersWithHttpInfo(channelCatalogId, request);
    }

    /**
     * Configure channel catalog exclusion filters
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> configureChannelCatalogExclusionFiltersWithHttpInfo(String channelCatalogId, ExclusionFilters request) throws ApiException {
        com.squareup.okhttp.Call call = configureChannelCatalogExclusionFiltersValidateBeforeCall(channelCatalogId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Configure channel catalog exclusion filters (asynchronously)
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configureChannelCatalogExclusionFiltersAsync(String channelCatalogId, ExclusionFilters request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configureChannelCatalogExclusionFiltersValidateBeforeCall(channelCatalogId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for configureChannelCatalogGeneralSettings */
    private com.squareup.okhttp.Call configureChannelCatalogGeneralSettingsCall(String channelCatalogId, GeneralSettings request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}/settings/general".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelCatalogId" + "\\}", apiClient.escapeString(channelCatalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configureChannelCatalogGeneralSettingsValidateBeforeCall(String channelCatalogId, GeneralSettings request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling configureChannelCatalogGeneralSettings(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling configureChannelCatalogGeneralSettings(Async)");
        }
        
        
        com.squareup.okhttp.Call call = configureChannelCatalogGeneralSettingsCall(channelCatalogId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Disable a channel catalog
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void configureChannelCatalogGeneralSettings(String channelCatalogId, GeneralSettings request) throws ApiException {
        configureChannelCatalogGeneralSettingsWithHttpInfo(channelCatalogId, request);
    }

    /**
     * Disable a channel catalog
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> configureChannelCatalogGeneralSettingsWithHttpInfo(String channelCatalogId, GeneralSettings request) throws ApiException {
        com.squareup.okhttp.Call call = configureChannelCatalogGeneralSettingsValidateBeforeCall(channelCatalogId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Disable a channel catalog (asynchronously)
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configureChannelCatalogGeneralSettingsAsync(String channelCatalogId, GeneralSettings request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configureChannelCatalogGeneralSettingsValidateBeforeCall(channelCatalogId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createChannelCatalog */
    private com.squareup.okhttp.Call createChannelCatalogCall(CreateChannelCatalogRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createChannelCatalogValidateBeforeCall(CreateChannelCatalogRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling createChannelCatalog(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createChannelCatalogCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new channel catalog
     * 
     * @param request  (required)
     * @return List&lt;BeezUPCommonLink2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeezUPCommonLink2> createChannelCatalog(CreateChannelCatalogRequest request) throws ApiException {
        ApiResponse<List<BeezUPCommonLink2>> resp = createChannelCatalogWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Create a new channel catalog
     * 
     * @param request  (required)
     * @return ApiResponse&lt;List&lt;BeezUPCommonLink2&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeezUPCommonLink2>> createChannelCatalogWithHttpInfo(CreateChannelCatalogRequest request) throws ApiException {
        com.squareup.okhttp.Call call = createChannelCatalogValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLink2>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new channel catalog (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChannelCatalogAsync(CreateChannelCatalogRequest request, final ApiCallback<List<BeezUPCommonLink2>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChannelCatalogValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLink2>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createContract */
    private com.squareup.okhttp.Call createContractCall(CreateContract request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/contracts".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContractValidateBeforeCall(CreateContract request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling createContract(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createContractCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new contract
     * Now you are ready to create your contract. Before that, please ensure that you check the offer with the same request parameterts. /offers 
     * @param request  (required)
     * @return BeezUPCommonInfoSummaries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BeezUPCommonInfoSummaries createContract(CreateContract request) throws ApiException {
        ApiResponse<BeezUPCommonInfoSummaries> resp = createContractWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Create a new contract
     * Now you are ready to create your contract. Before that, please ensure that you check the offer with the same request parameterts. /offers 
     * @param request  (required)
     * @return ApiResponse&lt;BeezUPCommonInfoSummaries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BeezUPCommonInfoSummaries> createContractWithHttpInfo(CreateContract request) throws ApiException {
        com.squareup.okhttp.Call call = createContractValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<BeezUPCommonInfoSummaries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new contract (asynchronously)
     * Now you are ready to create your contract. Before that, please ensure that you check the offer with the same request parameterts. /offers 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContractAsync(CreateContract request, final ApiCallback<BeezUPCommonInfoSummaries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContractValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BeezUPCommonInfoSummaries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createRule */
    private com.squareup.okhttp.Call createRuleCall(String storeId, CreateRuleRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRuleValidateBeforeCall(String storeId, CreateRuleRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling createRule(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling createRule(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createRuleCall(storeId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Rule creation
     * 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createRule(String storeId, CreateRuleRequest request) throws ApiException {
        createRuleWithHttpInfo(storeId, request);
    }

    /**
     * Rule creation
     * 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createRuleWithHttpInfo(String storeId, CreateRuleRequest request) throws ApiException {
        com.squareup.okhttp.Call call = createRuleValidateBeforeCall(storeId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Rule creation (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRuleAsync(String storeId, CreateRuleRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRuleValidateBeforeCall(storeId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createStore */
    private com.squareup.okhttp.Call createStoreCall(CreateStoreRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/stores".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createStoreValidateBeforeCall(CreateStoreRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling createStore(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createStoreCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new store
     * 
     * @param request  (required)
     * @return LinksGetStoresLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinksGetStoresLink createStore(CreateStoreRequest request) throws ApiException {
        ApiResponse<LinksGetStoresLink> resp = createStoreWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Create a new store
     * 
     * @param request  (required)
     * @return ApiResponse&lt;LinksGetStoresLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinksGetStoresLink> createStoreWithHttpInfo(CreateStoreRequest request) throws ApiException {
        com.squareup.okhttp.Call call = createStoreValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<LinksGetStoresLink>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new store (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createStoreAsync(CreateStoreRequest request, final ApiCallback<LinksGetStoresLink> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createStoreValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinksGetStoresLink>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteChannelCatalog */
    private com.squareup.okhttp.Call deleteChannelCatalogCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteChannelCatalogValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = deleteChannelCatalogCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete the channel catalog
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteChannelCatalog() throws ApiException {
        deleteChannelCatalogWithHttpInfo();
    }

    /**
     * Delete the channel catalog
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteChannelCatalogWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteChannelCatalogValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the channel catalog (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteChannelCatalogAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteChannelCatalogValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteChannelCatalogProductValueOverride */
    private com.squareup.okhttp.Call deleteChannelCatalogProductValueOverrideCall(String channelCatalogId, String productId, String channelColumnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides/{channelColumnId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelCatalogId" + "\\}", apiClient.escapeString(channelCatalogId.toString()))
        .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()))
        .replaceAll("\\{" + "channelColumnId" + "\\}", apiClient.escapeString(channelColumnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteChannelCatalogProductValueOverrideValidateBeforeCall(String channelCatalogId, String productId, String channelColumnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling deleteChannelCatalogProductValueOverride(Async)");
        }
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling deleteChannelCatalogProductValueOverride(Async)");
        }
        
        // verify the required parameter 'channelColumnId' is set
        if (channelColumnId == null) {
            throw new ApiException("Missing the required parameter 'channelColumnId' when calling deleteChannelCatalogProductValueOverride(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteChannelCatalogProductValueOverrideCall(channelCatalogId, productId, channelColumnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a specific channel catalog product value override
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param productId The product identifier (required)
     * @param channelColumnId The channel column identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteChannelCatalogProductValueOverride(String channelCatalogId, String productId, String channelColumnId) throws ApiException {
        deleteChannelCatalogProductValueOverrideWithHttpInfo(channelCatalogId, productId, channelColumnId);
    }

    /**
     * Delete a specific channel catalog product value override
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param productId The product identifier (required)
     * @param channelColumnId The channel column identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteChannelCatalogProductValueOverrideWithHttpInfo(String channelCatalogId, String productId, String channelColumnId) throws ApiException {
        com.squareup.okhttp.Call call = deleteChannelCatalogProductValueOverrideValidateBeforeCall(channelCatalogId, productId, channelColumnId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a specific channel catalog product value override (asynchronously)
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param productId The product identifier (required)
     * @param channelColumnId The channel column identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteChannelCatalogProductValueOverrideAsync(String channelCatalogId, String productId, String channelColumnId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteChannelCatalogProductValueOverrideValidateBeforeCall(channelCatalogId, productId, channelColumnId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteNextContract */
    private com.squareup.okhttp.Call deleteNextContractCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/contracts/next".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNextContractValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = deleteNextContractCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete your next contract
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNextContract() throws ApiException {
        deleteNextContractWithHttpInfo();
    }

    /**
     * Delete your next contract
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNextContractWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteNextContractValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete your next contract (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNextContractAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNextContractValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteReportFilter */
    private com.squareup.okhttp.Call deleteReportFilterCall(String storeId, String reportFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/reports/filters/{reportFilterId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "reportFilterId" + "\\}", apiClient.escapeString(reportFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReportFilterValidateBeforeCall(String storeId, String reportFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling deleteReportFilter(Async)");
        }
        
        // verify the required parameter 'reportFilterId' is set
        if (reportFilterId == null) {
            throw new ApiException("Missing the required parameter 'reportFilterId' when calling deleteReportFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteReportFilterCall(storeId, reportFilterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete the report filter
     * 
     * @param storeId Your store identifier (required)
     * @param reportFilterId Your report filter identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReportFilter(String storeId, String reportFilterId) throws ApiException {
        deleteReportFilterWithHttpInfo(storeId, reportFilterId);
    }

    /**
     * Delete the report filter
     * 
     * @param storeId Your store identifier (required)
     * @param reportFilterId Your report filter identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReportFilterWithHttpInfo(String storeId, String reportFilterId) throws ApiException {
        com.squareup.okhttp.Call call = deleteReportFilterValidateBeforeCall(storeId, reportFilterId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the report filter (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param reportFilterId Your report filter identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReportFilterAsync(String storeId, String reportFilterId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReportFilterValidateBeforeCall(storeId, reportFilterId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteRule */
    private com.squareup.okhttp.Call deleteRuleCall(String storeId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/{ruleId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "ruleId" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRuleValidateBeforeCall(String storeId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling deleteRule(Async)");
        }
        
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling deleteRule(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteRuleCall(storeId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRule(String storeId, String ruleId) throws ApiException {
        deleteRuleWithHttpInfo(storeId, ruleId);
    }

    /**
     * Delete Rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRuleWithHttpInfo(String storeId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = deleteRuleValidateBeforeCall(storeId, ruleId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Rule (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRuleAsync(String storeId, String ruleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRuleValidateBeforeCall(storeId, ruleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteShare */
    private com.squareup.okhttp.Call deleteShareCall(String storeId, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/stores/{storeId}/shares/{userId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteShareValidateBeforeCall(String storeId, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling deleteShare(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteShare(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteShareCall(storeId, userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a share to another user
     * 
     * @param storeId Your store identifier (required)
     * @param userId The friend user id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteShare(String storeId, String userId) throws ApiException {
        deleteShareWithHttpInfo(storeId, userId);
    }

    /**
     * Delete a share to another user
     * 
     * @param storeId Your store identifier (required)
     * @param userId The friend user id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteShareWithHttpInfo(String storeId, String userId) throws ApiException {
        com.squareup.okhttp.Call call = deleteShareValidateBeforeCall(storeId, userId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a share to another user (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param userId The friend user id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteShareAsync(String storeId, String userId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteShareValidateBeforeCall(storeId, userId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteStore */
    private com.squareup.okhttp.Call deleteStoreCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/stores/{storeId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteStoreValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling deleteStore(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteStoreCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a store
     * 
     * @param storeId Your store identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteStore(String storeId) throws ApiException {
        deleteStoreWithHttpInfo(storeId);
    }

    /**
     * Delete a store
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteStoreWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteStoreValidateBeforeCall(storeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a store (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStoreAsync(String storeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStoreValidateBeforeCall(storeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for disableChannelCatalog */
    private com.squareup.okhttp.Call disableChannelCatalogCall(String channelCatalogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}/disable".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelCatalogId" + "\\}", apiClient.escapeString(channelCatalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call disableChannelCatalogValidateBeforeCall(String channelCatalogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling disableChannelCatalog(Async)");
        }
        
        
        com.squareup.okhttp.Call call = disableChannelCatalogCall(channelCatalogId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Disable a channel catalog
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void disableChannelCatalog(String channelCatalogId) throws ApiException {
        disableChannelCatalogWithHttpInfo(channelCatalogId);
    }

    /**
     * Disable a channel catalog
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> disableChannelCatalogWithHttpInfo(String channelCatalogId) throws ApiException {
        com.squareup.okhttp.Call call = disableChannelCatalogValidateBeforeCall(channelCatalogId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Disable a channel catalog (asynchronously)
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call disableChannelCatalogAsync(String channelCatalogId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = disableChannelCatalogValidateBeforeCall(channelCatalogId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for disableChannelCatalogProduct */
    private com.squareup.okhttp.Call disableChannelCatalogProductCall(String channelCatalogId, String productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/disable".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelCatalogId" + "\\}", apiClient.escapeString(channelCatalogId.toString()))
        .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call disableChannelCatalogProductValidateBeforeCall(String channelCatalogId, String productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling disableChannelCatalogProduct(Async)");
        }
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling disableChannelCatalogProduct(Async)");
        }
        
        
        com.squareup.okhttp.Call call = disableChannelCatalogProductCall(channelCatalogId, productId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Disable channel catalog product
     * By default a all your catalog products are exposed to the channel. You can disable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param productId The product identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void disableChannelCatalogProduct(String channelCatalogId, String productId) throws ApiException {
        disableChannelCatalogProductWithHttpInfo(channelCatalogId, productId);
    }

    /**
     * Disable channel catalog product
     * By default a all your catalog products are exposed to the channel. You can disable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param productId The product identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> disableChannelCatalogProductWithHttpInfo(String channelCatalogId, String productId) throws ApiException {
        com.squareup.okhttp.Call call = disableChannelCatalogProductValidateBeforeCall(channelCatalogId, productId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Disable channel catalog product (asynchronously)
     * By default a all your catalog products are exposed to the channel. You can disable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param productId The product identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call disableChannelCatalogProductAsync(String channelCatalogId, String productId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = disableChannelCatalogProductValidateBeforeCall(channelCatalogId, productId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for disableRule */
    private com.squareup.okhttp.Call disableRuleCall(String storeId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/{ruleId}/disable".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "ruleId" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call disableRuleValidateBeforeCall(String storeId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling disableRule(Async)");
        }
        
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling disableRule(Async)");
        }
        
        
        com.squareup.okhttp.Call call = disableRuleCall(storeId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Disable rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void disableRule(String storeId, String ruleId) throws ApiException {
        disableRuleWithHttpInfo(storeId, ruleId);
    }

    /**
     * Disable rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> disableRuleWithHttpInfo(String storeId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = disableRuleValidateBeforeCall(storeId, ruleId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Disable rule (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call disableRuleAsync(String storeId, String ruleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = disableRuleValidateBeforeCall(storeId, ruleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for enableChannelCatalog */
    private com.squareup.okhttp.Call enableChannelCatalogCall(String channelCatalogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}/enable".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelCatalogId" + "\\}", apiClient.escapeString(channelCatalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call enableChannelCatalogValidateBeforeCall(String channelCatalogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling enableChannelCatalog(Async)");
        }
        
        
        com.squareup.okhttp.Call call = enableChannelCatalogCall(channelCatalogId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enable a channel catalog
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void enableChannelCatalog(String channelCatalogId) throws ApiException {
        enableChannelCatalogWithHttpInfo(channelCatalogId);
    }

    /**
     * Enable a channel catalog
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> enableChannelCatalogWithHttpInfo(String channelCatalogId) throws ApiException {
        com.squareup.okhttp.Call call = enableChannelCatalogValidateBeforeCall(channelCatalogId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Enable a channel catalog (asynchronously)
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call enableChannelCatalogAsync(String channelCatalogId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enableChannelCatalogValidateBeforeCall(channelCatalogId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for enableRule */
    private com.squareup.okhttp.Call enableRuleCall(String storeId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/{ruleId}/enable".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "ruleId" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call enableRuleValidateBeforeCall(String storeId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling enableRule(Async)");
        }
        
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling enableRule(Async)");
        }
        
        
        com.squareup.okhttp.Call call = enableRuleCall(storeId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enable rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void enableRule(String storeId, String ruleId) throws ApiException {
        enableRuleWithHttpInfo(storeId, ruleId);
    }

    /**
     * Enable rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> enableRuleWithHttpInfo(String storeId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = enableRuleValidateBeforeCall(storeId, ruleId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Enable rule (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call enableRuleAsync(String storeId, String ruleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enableRuleValidateBeforeCall(storeId, ruleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for exportOrders */
    private com.squareup.okhttp.Call exportOrdersCall(String format, ExportOrderListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/exportations".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportOrdersValidateBeforeCall(String format, ExportOrderListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling exportOrders(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling exportOrders(Async)");
        }
        
        
        com.squareup.okhttp.Call call = exportOrdersCall(format, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Request a new Order report exportation to be generated
     * A new file will be generated containing a summary of all the Orders matching the requested filter settings.
     * @param format The type of the file to export (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void exportOrders(String format, ExportOrderListRequest request) throws ApiException {
        exportOrdersWithHttpInfo(format, request);
    }

    /**
     * Request a new Order report exportation to be generated
     * A new file will be generated containing a summary of all the Orders matching the requested filter settings.
     * @param format The type of the file to export (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> exportOrdersWithHttpInfo(String format, ExportOrderListRequest request) throws ApiException {
        com.squareup.okhttp.Call call = exportOrdersValidateBeforeCall(format, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Request a new Order report exportation to be generated (asynchronously)
     * A new file will be generated containing a summary of all the Orders matching the requested filter settings.
     * @param format The type of the file to export (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportOrdersAsync(String format, ExportOrderListRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportOrdersValidateBeforeCall(format, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for exportStoreReportByCategory */
    private com.squareup.okhttp.Call exportStoreReportByCategoryCall(String storeId, String format, ReportByCategoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/reports/bycategory/export".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportStoreReportByCategoryValidateBeforeCall(String storeId, String format, ReportByCategoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling exportStoreReportByCategory(Async)");
        }
        
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling exportStoreReportByCategory(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling exportStoreReportByCategory(Async)");
        }
        
        
        com.squareup.okhttp.Call call = exportStoreReportByCategoryCall(storeId, format, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Export the report by category
     * Export the report by category
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @return List&lt;BeezUPCommonLink2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeezUPCommonLink2> exportStoreReportByCategory(String storeId, String format, ReportByCategoryRequest request) throws ApiException {
        ApiResponse<List<BeezUPCommonLink2>> resp = exportStoreReportByCategoryWithHttpInfo(storeId, format, request);
        return resp.getData();
    }

    /**
     * Export the report by category
     * Export the report by category
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @return ApiResponse&lt;List&lt;BeezUPCommonLink2&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeezUPCommonLink2>> exportStoreReportByCategoryWithHttpInfo(String storeId, String format, ReportByCategoryRequest request) throws ApiException {
        com.squareup.okhttp.Call call = exportStoreReportByCategoryValidateBeforeCall(storeId, format, request, null, null);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLink2>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export the report by category (asynchronously)
     * Export the report by category
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportStoreReportByCategoryAsync(String storeId, String format, ReportByCategoryRequest request, final ApiCallback<List<BeezUPCommonLink2>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportStoreReportByCategoryValidateBeforeCall(storeId, format, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLink2>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for exportStoreReportByChannel */
    private com.squareup.okhttp.Call exportStoreReportByChannelCall(String storeId, String format, ReportByChannelRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/reports/bychannel/export".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportStoreReportByChannelValidateBeforeCall(String storeId, String format, ReportByChannelRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling exportStoreReportByChannel(Async)");
        }
        
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling exportStoreReportByChannel(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling exportStoreReportByChannel(Async)");
        }
        
        
        com.squareup.okhttp.Call call = exportStoreReportByChannelCall(storeId, format, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Export the report by channel
     * Export the report by channel
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @return List&lt;BeezUPCommonLink2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeezUPCommonLink2> exportStoreReportByChannel(String storeId, String format, ReportByChannelRequest request) throws ApiException {
        ApiResponse<List<BeezUPCommonLink2>> resp = exportStoreReportByChannelWithHttpInfo(storeId, format, request);
        return resp.getData();
    }

    /**
     * Export the report by channel
     * Export the report by channel
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @return ApiResponse&lt;List&lt;BeezUPCommonLink2&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeezUPCommonLink2>> exportStoreReportByChannelWithHttpInfo(String storeId, String format, ReportByChannelRequest request) throws ApiException {
        com.squareup.okhttp.Call call = exportStoreReportByChannelValidateBeforeCall(storeId, format, request, null, null);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLink2>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export the report by channel (asynchronously)
     * Export the report by channel
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportStoreReportByChannelAsync(String storeId, String format, ReportByChannelRequest request, final ApiCallback<List<BeezUPCommonLink2>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportStoreReportByChannelValidateBeforeCall(storeId, format, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLink2>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for exportStoreReportByProduct */
    private com.squareup.okhttp.Call exportStoreReportByProductCall(String storeId, String format, ReportByProductRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/reports/byproduct/export".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportStoreReportByProductValidateBeforeCall(String storeId, String format, ReportByProductRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling exportStoreReportByProduct(Async)");
        }
        
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling exportStoreReportByProduct(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling exportStoreReportByProduct(Async)");
        }
        
        
        com.squareup.okhttp.Call call = exportStoreReportByProductCall(storeId, format, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Export the report by product
     * Export the report by product
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @return List&lt;BeezUPCommonLink2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeezUPCommonLink2> exportStoreReportByProduct(String storeId, String format, ReportByProductRequest request) throws ApiException {
        ApiResponse<List<BeezUPCommonLink2>> resp = exportStoreReportByProductWithHttpInfo(storeId, format, request);
        return resp.getData();
    }

    /**
     * Export the report by product
     * Export the report by product
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @return ApiResponse&lt;List&lt;BeezUPCommonLink2&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeezUPCommonLink2>> exportStoreReportByProductWithHttpInfo(String storeId, String format, ReportByProductRequest request) throws ApiException {
        com.squareup.okhttp.Call call = exportStoreReportByProductValidateBeforeCall(storeId, format, request, null, null);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLink2>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export the report by product (asynchronously)
     * Export the report by product
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportStoreReportByProductAsync(String storeId, String format, ReportByProductRequest request, final ApiCallback<List<BeezUPCommonLink2>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportStoreReportByProductValidateBeforeCall(storeId, format, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLink2>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAutomaticTransitions */
    private com.squareup.okhttp.Call getAutomaticTransitionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/automaticTransitions".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAutomaticTransitionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAutomaticTransitionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of configured automatic Order status transitions
     * 
     * @return AutomaticTransitionInfos
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutomaticTransitionInfos getAutomaticTransitions() throws ApiException {
        ApiResponse<AutomaticTransitionInfos> resp = getAutomaticTransitionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get list of configured automatic Order status transitions
     * 
     * @return ApiResponse&lt;AutomaticTransitionInfos&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutomaticTransitionInfos> getAutomaticTransitionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAutomaticTransitionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AutomaticTransitionInfos>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of configured automatic Order status transitions (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAutomaticTransitionsAsync(final ApiCallback<AutomaticTransitionInfos> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAutomaticTransitionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutomaticTransitionInfos>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getBillingPeriods */
    private com.squareup.okhttp.Call getBillingPeriodsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/billingPeriods".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBillingPeriodsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getBillingPeriodsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get billing periods conditions
     * 
     * @return BillingPeriods
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BillingPeriods getBillingPeriods() throws ApiException {
        ApiResponse<BillingPeriods> resp = getBillingPeriodsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get billing periods conditions
     * 
     * @return ApiResponse&lt;BillingPeriods&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BillingPeriods> getBillingPeriodsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getBillingPeriodsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<BillingPeriods>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get billing periods conditions (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBillingPeriodsAsync(final ApiCallback<BillingPeriods> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBillingPeriodsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BillingPeriods>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChannelCatalog */
    private com.squareup.okhttp.Call getChannelCatalogCall(String channelCatalogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelCatalogId" + "\\}", apiClient.escapeString(channelCatalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelCatalogValidateBeforeCall(String channelCatalogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling getChannelCatalog(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getChannelCatalogCall(channelCatalogId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the channel catalog information
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @return ChannelCatalog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelCatalog getChannelCatalog(String channelCatalogId) throws ApiException {
        ApiResponse<ChannelCatalog> resp = getChannelCatalogWithHttpInfo(channelCatalogId);
        return resp.getData();
    }

    /**
     * Get the channel catalog information
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @return ApiResponse&lt;ChannelCatalog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelCatalog> getChannelCatalogWithHttpInfo(String channelCatalogId) throws ApiException {
        com.squareup.okhttp.Call call = getChannelCatalogValidateBeforeCall(channelCatalogId, null, null);
        Type localVarReturnType = new TypeToken<ChannelCatalog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the channel catalog information (asynchronously)
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelCatalogAsync(String channelCatalogId, final ApiCallback<ChannelCatalog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelCatalogValidateBeforeCall(channelCatalogId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelCatalog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChannelCatalogCategories */
    private com.squareup.okhttp.Call getChannelCatalogCategoriesCall(String channelCatalogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}/categoryMappings".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelCatalogId" + "\\}", apiClient.escapeString(channelCatalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelCatalogCategoriesValidateBeforeCall(String channelCatalogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling getChannelCatalogCategories(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getChannelCatalogCategoriesCall(channelCatalogId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get channel catalog categories
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @return ChannelCatalogCategoryMappings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelCatalogCategoryMappings getChannelCatalogCategories(String channelCatalogId) throws ApiException {
        ApiResponse<ChannelCatalogCategoryMappings> resp = getChannelCatalogCategoriesWithHttpInfo(channelCatalogId);
        return resp.getData();
    }

    /**
     * Get channel catalog categories
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @return ApiResponse&lt;ChannelCatalogCategoryMappings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelCatalogCategoryMappings> getChannelCatalogCategoriesWithHttpInfo(String channelCatalogId) throws ApiException {
        com.squareup.okhttp.Call call = getChannelCatalogCategoriesValidateBeforeCall(channelCatalogId, null, null);
        Type localVarReturnType = new TypeToken<ChannelCatalogCategoryMappings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get channel catalog categories (asynchronously)
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelCatalogCategoriesAsync(String channelCatalogId, final ApiCallback<ChannelCatalogCategoryMappings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelCatalogCategoriesValidateBeforeCall(channelCatalogId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelCatalogCategoryMappings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChannelCatalogExclusionFilterOperators */
    private com.squareup.okhttp.Call getChannelCatalogExclusionFilterOperatorsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/exclusionFilterOperators".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelCatalogExclusionFilterOperatorsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getChannelCatalogExclusionFilterOperatorsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get channel catalog exclusion filter operators
     * 
     * @return List&lt;ExclusionFilterOperator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ExclusionFilterOperator> getChannelCatalogExclusionFilterOperators() throws ApiException {
        ApiResponse<List<ExclusionFilterOperator>> resp = getChannelCatalogExclusionFilterOperatorsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get channel catalog exclusion filter operators
     * 
     * @return ApiResponse&lt;List&lt;ExclusionFilterOperator&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ExclusionFilterOperator>> getChannelCatalogExclusionFilterOperatorsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getChannelCatalogExclusionFilterOperatorsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<ExclusionFilterOperator>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get channel catalog exclusion filter operators (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelCatalogExclusionFilterOperatorsAsync(final ApiCallback<List<ExclusionFilterOperator>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelCatalogExclusionFilterOperatorsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ExclusionFilterOperator>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChannelCatalogMarketplaceProperties */
    private com.squareup.okhttp.Call getChannelCatalogMarketplacePropertiesCall(String channelCatalogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/channelcatalogs/{channelCatalogId}/properties".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelCatalogId" + "\\}", apiClient.escapeString(channelCatalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelCatalogMarketplacePropertiesValidateBeforeCall(String channelCatalogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling getChannelCatalogMarketplaceProperties(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getChannelCatalogMarketplacePropertiesCall(channelCatalogId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the marketplace properties for a channel catalog
     * 
     * @param channelCatalogId  (required)
     * @return ChannelCatalogMarketplaceProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelCatalogMarketplaceProperties getChannelCatalogMarketplaceProperties(String channelCatalogId) throws ApiException {
        ApiResponse<ChannelCatalogMarketplaceProperties> resp = getChannelCatalogMarketplacePropertiesWithHttpInfo(channelCatalogId);
        return resp.getData();
    }

    /**
     * Get the marketplace properties for a channel catalog
     * 
     * @param channelCatalogId  (required)
     * @return ApiResponse&lt;ChannelCatalogMarketplaceProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelCatalogMarketplaceProperties> getChannelCatalogMarketplacePropertiesWithHttpInfo(String channelCatalogId) throws ApiException {
        com.squareup.okhttp.Call call = getChannelCatalogMarketplacePropertiesValidateBeforeCall(channelCatalogId, null, null);
        Type localVarReturnType = new TypeToken<ChannelCatalogMarketplaceProperties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the marketplace properties for a channel catalog (asynchronously)
     * 
     * @param channelCatalogId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelCatalogMarketplacePropertiesAsync(String channelCatalogId, final ApiCallback<ChannelCatalogMarketplaceProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelCatalogMarketplacePropertiesValidateBeforeCall(channelCatalogId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelCatalogMarketplaceProperties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChannelCatalogMarketplaceSettings */
    private com.squareup.okhttp.Call getChannelCatalogMarketplaceSettingsCall(String channelCatalogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/channelcatalogs/{channelCatalogId}/settings".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelCatalogId" + "\\}", apiClient.escapeString(channelCatalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelCatalogMarketplaceSettingsValidateBeforeCall(String channelCatalogId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling getChannelCatalogMarketplaceSettings(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getChannelCatalogMarketplaceSettingsCall(channelCatalogId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the marketplace settings for a channel catalog
     * 
     * @param channelCatalogId Channel Catalog Id to query (required) (required)
     * @return ChannelCatalogMarketplaceSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelCatalogMarketplaceSettings getChannelCatalogMarketplaceSettings(String channelCatalogId) throws ApiException {
        ApiResponse<ChannelCatalogMarketplaceSettings> resp = getChannelCatalogMarketplaceSettingsWithHttpInfo(channelCatalogId);
        return resp.getData();
    }

    /**
     * Get the marketplace settings for a channel catalog
     * 
     * @param channelCatalogId Channel Catalog Id to query (required) (required)
     * @return ApiResponse&lt;ChannelCatalogMarketplaceSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelCatalogMarketplaceSettings> getChannelCatalogMarketplaceSettingsWithHttpInfo(String channelCatalogId) throws ApiException {
        com.squareup.okhttp.Call call = getChannelCatalogMarketplaceSettingsValidateBeforeCall(channelCatalogId, null, null);
        Type localVarReturnType = new TypeToken<ChannelCatalogMarketplaceSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the marketplace settings for a channel catalog (asynchronously)
     * 
     * @param channelCatalogId Channel Catalog Id to query (required) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelCatalogMarketplaceSettingsAsync(String channelCatalogId, final ApiCallback<ChannelCatalogMarketplaceSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelCatalogMarketplaceSettingsValidateBeforeCall(channelCatalogId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelCatalogMarketplaceSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChannelCatalogProductInfo */
    private com.squareup.okhttp.Call getChannelCatalogProductInfoCall(String channelCatalogId, String productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelCatalogId" + "\\}", apiClient.escapeString(channelCatalogId.toString()))
        .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelCatalogProductInfoValidateBeforeCall(String channelCatalogId, String productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling getChannelCatalogProductInfo(Async)");
        }
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getChannelCatalogProductInfo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getChannelCatalogProductInfoCall(channelCatalogId, productId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get channel catalog product information
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param productId The product identifier (required)
     * @return ChannelCatalogProductInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelCatalogProductInfo getChannelCatalogProductInfo(String channelCatalogId, String productId) throws ApiException {
        ApiResponse<ChannelCatalogProductInfo> resp = getChannelCatalogProductInfoWithHttpInfo(channelCatalogId, productId);
        return resp.getData();
    }

    /**
     * Get channel catalog product information
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param productId The product identifier (required)
     * @return ApiResponse&lt;ChannelCatalogProductInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelCatalogProductInfo> getChannelCatalogProductInfoWithHttpInfo(String channelCatalogId, String productId) throws ApiException {
        com.squareup.okhttp.Call call = getChannelCatalogProductInfoValidateBeforeCall(channelCatalogId, productId, null, null);
        Type localVarReturnType = new TypeToken<ChannelCatalogProductInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get channel catalog product information (asynchronously)
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param productId The product identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelCatalogProductInfoAsync(String channelCatalogId, String productId, final ApiCallback<ChannelCatalogProductInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelCatalogProductInfoValidateBeforeCall(channelCatalogId, productId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelCatalogProductInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChannelCatalogProductInfoList */
    private com.squareup.okhttp.Call getChannelCatalogProductInfoListCall(String channelCatalogId, GetChannelCatalogProductInfoListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}/products".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelCatalogId" + "\\}", apiClient.escapeString(channelCatalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelCatalogProductInfoListValidateBeforeCall(String channelCatalogId, GetChannelCatalogProductInfoListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling getChannelCatalogProductInfoList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getChannelCatalogProductInfoListCall(channelCatalogId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get channel catalog product information list
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request The channel catalog product list filter (optional)
     * @return ChannelCatalogProductInfoList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelCatalogProductInfoList getChannelCatalogProductInfoList(String channelCatalogId, GetChannelCatalogProductInfoListRequest request) throws ApiException {
        ApiResponse<ChannelCatalogProductInfoList> resp = getChannelCatalogProductInfoListWithHttpInfo(channelCatalogId, request);
        return resp.getData();
    }

    /**
     * Get channel catalog product information list
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request The channel catalog product list filter (optional)
     * @return ApiResponse&lt;ChannelCatalogProductInfoList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelCatalogProductInfoList> getChannelCatalogProductInfoListWithHttpInfo(String channelCatalogId, GetChannelCatalogProductInfoListRequest request) throws ApiException {
        com.squareup.okhttp.Call call = getChannelCatalogProductInfoListValidateBeforeCall(channelCatalogId, request, null, null);
        Type localVarReturnType = new TypeToken<ChannelCatalogProductInfoList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get channel catalog product information list (asynchronously)
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request The channel catalog product list filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelCatalogProductInfoListAsync(String channelCatalogId, GetChannelCatalogProductInfoListRequest request, final ApiCallback<ChannelCatalogProductInfoList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelCatalogProductInfoListValidateBeforeCall(channelCatalogId, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelCatalogProductInfoList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChannelCatalogs */
    private com.squareup.okhttp.Call getChannelCatalogsCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storeId", storeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelCatalogsValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getChannelCatalogsCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all your current channel catalogs
     * 
     * @param storeId The store identifier (optional)
     * @return ChannelCatalogList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelCatalogList getChannelCatalogs(String storeId) throws ApiException {
        ApiResponse<ChannelCatalogList> resp = getChannelCatalogsWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * List all your current channel catalogs
     * 
     * @param storeId The store identifier (optional)
     * @return ApiResponse&lt;ChannelCatalogList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelCatalogList> getChannelCatalogsWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = getChannelCatalogsValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<ChannelCatalogList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all your current channel catalogs (asynchronously)
     * 
     * @param storeId The store identifier (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelCatalogsAsync(String storeId, final ApiCallback<ChannelCatalogList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelCatalogsValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelCatalogList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChannelCategories */
    private com.squareup.okhttp.Call getChannelCategoriesCall(String channelId, List<String> acceptEncoding, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/channels/{channelId}/categories".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelId" + "\\}", apiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptEncoding != null)
        localVarHeaderParams.put("Accept-Encoding", apiClient.parameterToString(acceptEncoding));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelCategoriesValidateBeforeCall(String channelId, List<String> acceptEncoding, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelCategories(Async)");
        }
        
        // verify the required parameter 'acceptEncoding' is set
        if (acceptEncoding == null) {
            throw new ApiException("Missing the required parameter 'acceptEncoding' when calling getChannelCategories(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getChannelCategoriesCall(channelId, acceptEncoding, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get channel categories
     * 
     * @param channelId The channel identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @return ChannelRootCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelRootCategory getChannelCategories(String channelId, List<String> acceptEncoding) throws ApiException {
        ApiResponse<ChannelRootCategory> resp = getChannelCategoriesWithHttpInfo(channelId, acceptEncoding);
        return resp.getData();
    }

    /**
     * Get channel categories
     * 
     * @param channelId The channel identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @return ApiResponse&lt;ChannelRootCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelRootCategory> getChannelCategoriesWithHttpInfo(String channelId, List<String> acceptEncoding) throws ApiException {
        com.squareup.okhttp.Call call = getChannelCategoriesValidateBeforeCall(channelId, acceptEncoding, null, null);
        Type localVarReturnType = new TypeToken<ChannelRootCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get channel categories (asynchronously)
     * 
     * @param channelId The channel identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelCategoriesAsync(String channelId, List<String> acceptEncoding, final ApiCallback<ChannelRootCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelCategoriesValidateBeforeCall(channelId, acceptEncoding, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelRootCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChannelColumns */
    private com.squareup.okhttp.Call getChannelColumnsCall(String channelId, List<String> acceptEncoding, List<BeezUPCommonChannelColumnId> request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/channels/{channelId}/columns".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelId" + "\\}", apiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptEncoding != null)
        localVarHeaderParams.put("Accept-Encoding", apiClient.parameterToString(acceptEncoding));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelColumnsValidateBeforeCall(String channelId, List<String> acceptEncoding, List<BeezUPCommonChannelColumnId> request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelColumns(Async)");
        }
        
        // verify the required parameter 'acceptEncoding' is set
        if (acceptEncoding == null) {
            throw new ApiException("Missing the required parameter 'acceptEncoding' when calling getChannelColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getChannelColumnsCall(channelId, acceptEncoding, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get channel columns
     * 
     * @param channelId The channel identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @param request Allow you to filter the channel column identifier list your want to get (optional)
     * @return List&lt;ChannelColumn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ChannelColumn> getChannelColumns(String channelId, List<String> acceptEncoding, List<BeezUPCommonChannelColumnId> request) throws ApiException {
        ApiResponse<List<ChannelColumn>> resp = getChannelColumnsWithHttpInfo(channelId, acceptEncoding, request);
        return resp.getData();
    }

    /**
     * Get channel columns
     * 
     * @param channelId The channel identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @param request Allow you to filter the channel column identifier list your want to get (optional)
     * @return ApiResponse&lt;List&lt;ChannelColumn&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ChannelColumn>> getChannelColumnsWithHttpInfo(String channelId, List<String> acceptEncoding, List<BeezUPCommonChannelColumnId> request) throws ApiException {
        com.squareup.okhttp.Call call = getChannelColumnsValidateBeforeCall(channelId, acceptEncoding, request, null, null);
        Type localVarReturnType = new TypeToken<List<ChannelColumn>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get channel columns (asynchronously)
     * 
     * @param channelId The channel identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @param request Allow you to filter the channel column identifier list your want to get (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelColumnsAsync(String channelId, List<String> acceptEncoding, List<BeezUPCommonChannelColumnId> request, final ApiCallback<List<ChannelColumn>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelColumnsValidateBeforeCall(channelId, acceptEncoding, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ChannelColumn>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChannelInfo */
    private com.squareup.okhttp.Call getChannelInfoCall(String channelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/channels/{channelId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelId" + "\\}", apiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelInfoValidateBeforeCall(String channelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelInfo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getChannelInfoCall(channelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get channel information
     * 
     * @param channelId The channel identifier (required)
     * @return ChannelInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelInfo getChannelInfo(String channelId) throws ApiException {
        ApiResponse<ChannelInfo> resp = getChannelInfoWithHttpInfo(channelId);
        return resp.getData();
    }

    /**
     * Get channel information
     * 
     * @param channelId The channel identifier (required)
     * @return ApiResponse&lt;ChannelInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelInfo> getChannelInfoWithHttpInfo(String channelId) throws ApiException {
        com.squareup.okhttp.Call call = getChannelInfoValidateBeforeCall(channelId, null, null);
        Type localVarReturnType = new TypeToken<ChannelInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get channel information (asynchronously)
     * 
     * @param channelId The channel identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelInfoAsync(String channelId, final ApiCallback<ChannelInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelInfoValidateBeforeCall(channelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getContracts */
    private com.squareup.okhttp.Call getContractsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/contracts".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContractsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getContractsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get contract list
     * 
     * @return Contracts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Contracts getContracts() throws ApiException {
        ApiResponse<Contracts> resp = getContractsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get contract list
     * 
     * @return ApiResponse&lt;Contracts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Contracts> getContractsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getContractsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Contracts>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get contract list (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContractsAsync(final ApiCallback<Contracts> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContractsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Contracts>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCreditCardInfo */
    private com.squareup.okhttp.Call getCreditCardInfoCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/account/creditCardInfo".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCreditCardInfoValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getCreditCardInfoCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get credit card information
     * 
     * @return CreditCardInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreditCardInfoResponse getCreditCardInfo() throws ApiException {
        ApiResponse<CreditCardInfoResponse> resp = getCreditCardInfoWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get credit card information
     * 
     * @return ApiResponse&lt;CreditCardInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreditCardInfoResponse> getCreditCardInfoWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCreditCardInfoValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CreditCardInfoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get credit card information (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCreditCardInfoAsync(final ApiCallback<CreditCardInfoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCreditCardInfoValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreditCardInfoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCurrentChannels */
    private com.squareup.okhttp.Call getCurrentChannelsCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/channels/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storeId", storeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCurrentChannelsValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getCurrentChannels(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCurrentChannelsCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all available channel for this store
     * 
     * @param storeId The store identifier (required)
     * @return List&lt;ChannelHeader&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ChannelHeader> getCurrentChannels(String storeId) throws ApiException {
        ApiResponse<List<ChannelHeader>> resp = getCurrentChannelsWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * List all available channel for this store
     * 
     * @param storeId The store identifier (required)
     * @return ApiResponse&lt;List&lt;ChannelHeader&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ChannelHeader>> getCurrentChannelsWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = getCurrentChannelsValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<List<ChannelHeader>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all available channel for this store (asynchronously)
     * 
     * @param storeId The store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCurrentChannelsAsync(String storeId, final ApiCallback<List<ChannelHeader>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCurrentChannelsValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ChannelHeader>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFriendInfo */
    private com.squareup.okhttp.Call getFriendInfoCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/friends/{userId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFriendInfoValidateBeforeCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getFriendInfo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getFriendInfoCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get friend information
     * 
     * @param userId Your friend user id (required)
     * @return UserFriendInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserFriendInfo getFriendInfo(String userId) throws ApiException {
        ApiResponse<UserFriendInfo> resp = getFriendInfoWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Get friend information
     * 
     * @param userId Your friend user id (required)
     * @return ApiResponse&lt;UserFriendInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserFriendInfo> getFriendInfoWithHttpInfo(String userId) throws ApiException {
        com.squareup.okhttp.Call call = getFriendInfoValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<UserFriendInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get friend information (asynchronously)
     * 
     * @param userId Your friend user id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFriendInfoAsync(String userId, final ApiCallback<UserFriendInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFriendInfoValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserFriendInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getInvoices */
    private com.squareup.okhttp.Call getInvoicesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/invoices".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInvoicesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getInvoicesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all your invoices
     * 
     * @return Invoices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Invoices getInvoices() throws ApiException {
        ApiResponse<Invoices> resp = getInvoicesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all your invoices
     * 
     * @return ApiResponse&lt;Invoices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Invoices> getInvoicesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getInvoicesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Invoices>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all your invoices (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInvoicesAsync(final ApiCallback<Invoices> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInvoicesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Invoices>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getMarketplaceAccountStores */
    private com.squareup.okhttp.Call getMarketplaceAccountStoresCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/channelcatalogs/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMarketplaceAccountStoresValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getMarketplaceAccountStoresCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get  you marketplace channel catalog list
     * 
     * @return MarketplaceChannelCatalogList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MarketplaceChannelCatalogList getMarketplaceAccountStores() throws ApiException {
        ApiResponse<MarketplaceChannelCatalogList> resp = getMarketplaceAccountStoresWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get  you marketplace channel catalog list
     * 
     * @return ApiResponse&lt;MarketplaceChannelCatalogList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MarketplaceChannelCatalogList> getMarketplaceAccountStoresWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getMarketplaceAccountStoresValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<MarketplaceChannelCatalogList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get  you marketplace channel catalog list (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMarketplaceAccountStoresAsync(final ApiCallback<MarketplaceChannelCatalogList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMarketplaceAccountStoresValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MarketplaceChannelCatalogList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getMarketplaceAccountsSynchronization */
    private com.squareup.okhttp.Call getMarketplaceAccountsSynchronizationCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/status".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMarketplaceAccountsSynchronizationValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getMarketplaceAccountsSynchronizationCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get current synchronization status between your marketplaces and BeezUP accounts
     * 
     * @return AccountSynchronizations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountSynchronizations getMarketplaceAccountsSynchronization() throws ApiException {
        ApiResponse<AccountSynchronizations> resp = getMarketplaceAccountsSynchronizationWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get current synchronization status between your marketplaces and BeezUP accounts
     * 
     * @return ApiResponse&lt;AccountSynchronizations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountSynchronizations> getMarketplaceAccountsSynchronizationWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getMarketplaceAccountsSynchronizationValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AccountSynchronizations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get current synchronization status between your marketplaces and BeezUP accounts (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMarketplaceAccountsSynchronizationAsync(final ApiCallback<AccountSynchronizations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMarketplaceAccountsSynchronizationValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountSynchronizations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getOffer */
    private com.squareup.okhttp.Call getOfferCall(OfferRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/offers".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOfferValidateBeforeCall(OfferRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling getOffer(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getOfferCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get offer pricing
     * Get the offer pricing then you can create your contract with the same request parameters. /v2/user/customer/contracts 
     * @param request  (required)
     * @return Offer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Offer getOffer(OfferRequest request) throws ApiException {
        ApiResponse<Offer> resp = getOfferWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Get offer pricing
     * Get the offer pricing then you can create your contract with the same request parameters. /v2/user/customer/contracts 
     * @param request  (required)
     * @return ApiResponse&lt;Offer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Offer> getOfferWithHttpInfo(OfferRequest request) throws ApiException {
        com.squareup.okhttp.Call call = getOfferValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<Offer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get offer pricing (asynchronously)
     * Get the offer pricing then you can create your contract with the same request parameters. /v2/user/customer/contracts 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOfferAsync(OfferRequest request, final ApiCallback<Offer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOfferValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Offer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getOrder */
    private com.squareup.okhttp.Call getOrderCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String ifNoneMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketplaceTechnicalCode" + "\\}", apiClient.escapeString(marketplaceTechnicalCode.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "beezUPOrderId" + "\\}", apiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null)
        localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String ifNoneMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling getOrder(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getOrder(Async)");
        }
        
        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling getOrder(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getOrderCall(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get full Order and Order Item(s) properties
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Order getOrder(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String ifNoneMatch) throws ApiException {
        ApiResponse<Order> resp = getOrderWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch);
        return resp.getData();
    }

    /**
     * Get full Order and Order Item(s) properties
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Order> getOrderWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String ifNoneMatch) throws ApiException {
        com.squareup.okhttp.Call call = getOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, null, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get full Order and Order Item(s) properties (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param ifNoneMatch ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderAsync(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, String ifNoneMatch, final ApiCallback<Order> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getOrderExportations */
    private com.squareup.okhttp.Call getOrderExportationsCall(Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/exportations".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderExportationsValidateBeforeCall(Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getOrderExportations(Async)");
        }
        
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getOrderExportations(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getOrderExportationsCall(pageNumber, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a paginated list of Order report exportations
     * 
     * @param pageNumber The page number you want to get (required)
     * @param pageSize The count of Order report exportations you want to get (required)
     * @return OrderExportations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderExportations getOrderExportations(Integer pageNumber, Integer pageSize) throws ApiException {
        ApiResponse<OrderExportations> resp = getOrderExportationsWithHttpInfo(pageNumber, pageSize);
        return resp.getData();
    }

    /**
     * Get a paginated list of Order report exportations
     * 
     * @param pageNumber The page number you want to get (required)
     * @param pageSize The count of Order report exportations you want to get (required)
     * @return ApiResponse&lt;OrderExportations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderExportations> getOrderExportationsWithHttpInfo(Integer pageNumber, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getOrderExportationsValidateBeforeCall(pageNumber, pageSize, null, null);
        Type localVarReturnType = new TypeToken<OrderExportations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a paginated list of Order report exportations (asynchronously)
     * 
     * @param pageNumber The page number you want to get (required)
     * @param pageSize The count of Order report exportations you want to get (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderExportationsAsync(Integer pageNumber, Integer pageSize, final ApiCallback<OrderExportations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderExportationsValidateBeforeCall(pageNumber, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderExportations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getOrderHistory */
    private com.squareup.okhttp.Call getOrderHistoryCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketplaceTechnicalCode" + "\\}", apiClient.escapeString(marketplaceTechnicalCode.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "beezUPOrderId" + "\\}", apiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderHistoryValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling getOrderHistory(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getOrderHistory(Async)");
        }
        
        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling getOrderHistory(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getOrderHistoryCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an Order&#39;s harvest and change history
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @return OrderHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderHistory getOrderHistory(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        ApiResponse<OrderHistory> resp = getOrderHistoryWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
        return resp.getData();
    }

    /**
     * Get an Order&#39;s harvest and change history
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @return ApiResponse&lt;OrderHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderHistory> getOrderHistoryWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderHistoryValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, null, null);
        Type localVarReturnType = new TypeToken<OrderHistory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an Order&#39;s harvest and change history (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderHistoryAsync(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ApiCallback<OrderHistory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderHistoryValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderHistory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getOrderListFull */
    private com.squareup.okhttp.Call getOrderListFullCall(List<String> acceptEncoding, OrderListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/list/full".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptEncoding != null)
        localVarHeaderParams.put("Accept-Encoding", apiClient.parameterToString(acceptEncoding));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderListFullValidateBeforeCall(List<String> acceptEncoding, OrderListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'acceptEncoding' is set
        if (acceptEncoding == null) {
            throw new ApiException("Missing the required parameter 'acceptEncoding' when calling getOrderListFull(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getOrderListFullCall(acceptEncoding, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a paginated list of all Orders with all Order and Order Item(s) properties
     * The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
     * @param acceptEncoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size (required)
     * @param request  (optional)
     * @return OrderListFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderListFull getOrderListFull(List<String> acceptEncoding, OrderListRequest request) throws ApiException {
        ApiResponse<OrderListFull> resp = getOrderListFullWithHttpInfo(acceptEncoding, request);
        return resp.getData();
    }

    /**
     * Get a paginated list of all Orders with all Order and Order Item(s) properties
     * The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
     * @param acceptEncoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size (required)
     * @param request  (optional)
     * @return ApiResponse&lt;OrderListFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderListFull> getOrderListFullWithHttpInfo(List<String> acceptEncoding, OrderListRequest request) throws ApiException {
        com.squareup.okhttp.Call call = getOrderListFullValidateBeforeCall(acceptEncoding, request, null, null);
        Type localVarReturnType = new TypeToken<OrderListFull>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a paginated list of all Orders with all Order and Order Item(s) properties (asynchronously)
     * The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
     * @param acceptEncoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size (required)
     * @param request  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderListFullAsync(List<String> acceptEncoding, OrderListRequest request, final ApiCallback<OrderListFull> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderListFullValidateBeforeCall(acceptEncoding, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderListFull>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getOrderListLight */
    private com.squareup.okhttp.Call getOrderListLightCall(OrderListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/list/light".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderListLightValidateBeforeCall(OrderListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getOrderListLightCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a paginated list of all Orders without details
     * 
     * @param request  (optional)
     * @return OrderListLight
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderListLight getOrderListLight(OrderListRequest request) throws ApiException {
        ApiResponse<OrderListLight> resp = getOrderListLightWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Get a paginated list of all Orders without details
     * 
     * @param request  (optional)
     * @return ApiResponse&lt;OrderListLight&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderListLight> getOrderListLightWithHttpInfo(OrderListRequest request) throws ApiException {
        com.squareup.okhttp.Call call = getOrderListLightValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<OrderListLight>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a paginated list of all Orders without details (asynchronously)
     * 
     * @param request  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderListLightAsync(OrderListRequest request, final ApiCallback<OrderListLight> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderListLightValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderListLight>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPublications */
    private com.squareup.okhttp.Call getPublicationsCall(String marketplaceTechnicalCode, Integer accountId, String channelCatalogId, Integer count, List<String> publicationTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/channelcatalogs/publications/{marketplaceTechnicalCode}/{accountId}/history".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketplaceTechnicalCode" + "\\}", apiClient.escapeString(marketplaceTechnicalCode.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (channelCatalogId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "channelCatalogId", channelCatalogId));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (publicationTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "publicationTypes", publicationTypes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPublicationsValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String channelCatalogId, Integer count, List<String> publicationTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling getPublications(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getPublications(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPublicationsCall(marketplaceTechnicalCode, accountId, channelCatalogId, count, publicationTypes, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetch the publication history for an account, sorted by descending start date
     * 
     * @param marketplaceTechnicalCode Marketplace Technical Code to query (required) (required)
     * @param accountId Account Id to query (required) (required)
     * @param channelCatalogId Channel Catalog Id by which to filter (optional) (optional)
     * @param count Amount of entries to fetch (optional, default set to 10) (optional, default to 10)
     * @param publicationTypes Publication types by which to filter (optional) (optional)
     * @return AccountPublications
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountPublications getPublications(String marketplaceTechnicalCode, Integer accountId, String channelCatalogId, Integer count, List<String> publicationTypes) throws ApiException {
        ApiResponse<AccountPublications> resp = getPublicationsWithHttpInfo(marketplaceTechnicalCode, accountId, channelCatalogId, count, publicationTypes);
        return resp.getData();
    }

    /**
     * Fetch the publication history for an account, sorted by descending start date
     * 
     * @param marketplaceTechnicalCode Marketplace Technical Code to query (required) (required)
     * @param accountId Account Id to query (required) (required)
     * @param channelCatalogId Channel Catalog Id by which to filter (optional) (optional)
     * @param count Amount of entries to fetch (optional, default set to 10) (optional, default to 10)
     * @param publicationTypes Publication types by which to filter (optional) (optional)
     * @return ApiResponse&lt;AccountPublications&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountPublications> getPublicationsWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String channelCatalogId, Integer count, List<String> publicationTypes) throws ApiException {
        com.squareup.okhttp.Call call = getPublicationsValidateBeforeCall(marketplaceTechnicalCode, accountId, channelCatalogId, count, publicationTypes, null, null);
        Type localVarReturnType = new TypeToken<AccountPublications>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch the publication history for an account, sorted by descending start date (asynchronously)
     * 
     * @param marketplaceTechnicalCode Marketplace Technical Code to query (required) (required)
     * @param accountId Account Id to query (required) (required)
     * @param channelCatalogId Channel Catalog Id by which to filter (optional) (optional)
     * @param count Amount of entries to fetch (optional, default set to 10) (optional, default to 10)
     * @param publicationTypes Publication types by which to filter (optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPublicationsAsync(String marketplaceTechnicalCode, Integer accountId, String channelCatalogId, Integer count, List<String> publicationTypes, final ApiCallback<AccountPublications> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPublicationsValidateBeforeCall(marketplaceTechnicalCode, accountId, channelCatalogId, count, publicationTypes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountPublications>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getReportFilter */
    private com.squareup.okhttp.Call getReportFilterCall(String storeId, String reportFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/reports/filters/{reportFilterId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "reportFilterId" + "\\}", apiClient.escapeString(reportFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportFilterValidateBeforeCall(String storeId, String reportFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getReportFilter(Async)");
        }
        
        // verify the required parameter 'reportFilterId' is set
        if (reportFilterId == null) {
            throw new ApiException("Missing the required parameter 'reportFilterId' when calling getReportFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getReportFilterCall(storeId, reportFilterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the report filter description
     * 
     * @param storeId Your store identifier (required)
     * @param reportFilterId Your report filter identifier (required)
     * @return ReportFilter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportFilter getReportFilter(String storeId, String reportFilterId) throws ApiException {
        ApiResponse<ReportFilter> resp = getReportFilterWithHttpInfo(storeId, reportFilterId);
        return resp.getData();
    }

    /**
     * Get the report filter description
     * 
     * @param storeId Your store identifier (required)
     * @param reportFilterId Your report filter identifier (required)
     * @return ApiResponse&lt;ReportFilter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportFilter> getReportFilterWithHttpInfo(String storeId, String reportFilterId) throws ApiException {
        com.squareup.okhttp.Call call = getReportFilterValidateBeforeCall(storeId, reportFilterId, null, null);
        Type localVarReturnType = new TypeToken<ReportFilter>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the report filter description (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param reportFilterId Your report filter identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportFilterAsync(String storeId, String reportFilterId, final ApiCallback<ReportFilter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportFilterValidateBeforeCall(storeId, reportFilterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportFilter>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getReportFilters */
    private com.squareup.okhttp.Call getReportFiltersCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/reports/filters".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportFiltersValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getReportFilters(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getReportFiltersCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get report filter list for the given store
     * 
     * @param storeId Your store identifier (required)
     * @return ReportFilters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportFilters getReportFilters(String storeId) throws ApiException {
        ApiResponse<ReportFilters> resp = getReportFiltersWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * Get report filter list for the given store
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;ReportFilters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportFilters> getReportFiltersWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = getReportFiltersValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<ReportFilters>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get report filter list for the given store (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportFiltersAsync(String storeId, final ApiCallback<ReportFilters> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportFiltersValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportFilters>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRights */
    private com.squareup.okhttp.Call getRightsCall(String storeId, List<String> functionalityCodeList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = functionalityCodeList;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/stores/{storeId}/rights".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRightsValidateBeforeCall(String storeId, List<String> functionalityCodeList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getRights(Async)");
        }
        
        // verify the required parameter 'functionalityCodeList' is set
        if (functionalityCodeList == null) {
            throw new ApiException("Missing the required parameter 'functionalityCodeList' when calling getRights(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getRightsCall(storeId, functionalityCodeList, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get store&#39;s rights
     * 
     * @param storeId Your store identifier (required)
     * @param functionalityCodeList The functionality code list you want to check (required)
     * @return List&lt;FunctionalityRightInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FunctionalityRightInfo> getRights(String storeId, List<String> functionalityCodeList) throws ApiException {
        ApiResponse<List<FunctionalityRightInfo>> resp = getRightsWithHttpInfo(storeId, functionalityCodeList);
        return resp.getData();
    }

    /**
     * Get store&#39;s rights
     * 
     * @param storeId Your store identifier (required)
     * @param functionalityCodeList The functionality code list you want to check (required)
     * @return ApiResponse&lt;List&lt;FunctionalityRightInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FunctionalityRightInfo>> getRightsWithHttpInfo(String storeId, List<String> functionalityCodeList) throws ApiException {
        com.squareup.okhttp.Call call = getRightsValidateBeforeCall(storeId, functionalityCodeList, null, null);
        Type localVarReturnType = new TypeToken<List<FunctionalityRightInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get store&#39;s rights (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param functionalityCodeList The functionality code list you want to check (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRightsAsync(String storeId, List<String> functionalityCodeList, final ApiCallback<List<FunctionalityRightInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRightsValidateBeforeCall(storeId, functionalityCodeList, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FunctionalityRightInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRule */
    private com.squareup.okhttp.Call getRuleCall(String storeId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/{ruleId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "ruleId" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRuleValidateBeforeCall(String storeId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getRule(Async)");
        }
        
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling getRule(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getRuleCall(storeId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @return Rule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rule getRule(String storeId, String ruleId) throws ApiException {
        ApiResponse<Rule> resp = getRuleWithHttpInfo(storeId, ruleId);
        return resp.getData();
    }

    /**
     * Gets the rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @return ApiResponse&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rule> getRuleWithHttpInfo(String storeId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = getRuleValidateBeforeCall(storeId, ruleId, null, null);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the rule (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRuleAsync(String storeId, String ruleId, final ApiCallback<Rule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRuleValidateBeforeCall(storeId, ruleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRules */
    private com.squareup.okhttp.Call getRulesCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRulesValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getRules(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getRulesCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the list of rules for a given store
     * 
     * @param storeId Your store identifier (required)
     * @return Rules
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rules getRules(String storeId) throws ApiException {
        ApiResponse<Rules> resp = getRulesWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * Gets the list of rules for a given store
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;Rules&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rules> getRulesWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = getRulesValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<Rules>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the list of rules for a given store (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRulesAsync(String storeId, final ApiCallback<Rules> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRulesValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rules>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRulesExecutions */
    private com.squareup.okhttp.Call getRulesExecutionsCall(String storeId, Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/executions".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRulesExecutionsValidateBeforeCall(String storeId, Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getRulesExecutions(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getRulesExecutions(Async)");
        }
        
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getRulesExecutions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getRulesExecutionsCall(storeId, pageNumber, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the rules execution history
     * 
     * @param storeId Your store identifier (required)
     * @param pageNumber The page to retrieve (required)
     * @param pageSize The count of rule history to retrieve (required)
     * @return RuleExecutionReportings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RuleExecutionReportings getRulesExecutions(String storeId, Integer pageNumber, Integer pageSize) throws ApiException {
        ApiResponse<RuleExecutionReportings> resp = getRulesExecutionsWithHttpInfo(storeId, pageNumber, pageSize);
        return resp.getData();
    }

    /**
     * Get the rules execution history
     * 
     * @param storeId Your store identifier (required)
     * @param pageNumber The page to retrieve (required)
     * @param pageSize The count of rule history to retrieve (required)
     * @return ApiResponse&lt;RuleExecutionReportings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RuleExecutionReportings> getRulesExecutionsWithHttpInfo(String storeId, Integer pageNumber, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getRulesExecutionsValidateBeforeCall(storeId, pageNumber, pageSize, null, null);
        Type localVarReturnType = new TypeToken<RuleExecutionReportings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the rules execution history (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param pageNumber The page to retrieve (required)
     * @param pageSize The count of rule history to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRulesExecutionsAsync(String storeId, Integer pageNumber, Integer pageSize, final ApiCallback<RuleExecutionReportings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRulesExecutionsValidateBeforeCall(storeId, pageNumber, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RuleExecutionReportings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getShares */
    private com.squareup.okhttp.Call getSharesCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/stores/{storeId}/shares".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSharesValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getShares(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSharesCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get shares related to this store
     * 
     * @param storeId Your store identifier (required)
     * @return StoreShares
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StoreShares getShares(String storeId) throws ApiException {
        ApiResponse<StoreShares> resp = getSharesWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * Get shares related to this store
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;StoreShares&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StoreShares> getSharesWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = getSharesValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<StoreShares>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get shares related to this store (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSharesAsync(String storeId, final ApiCallback<StoreShares> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSharesValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StoreShares>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStandardOffers */
    private com.squareup.okhttp.Call getStandardOffersCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/offers".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStandardOffersValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getStandardOffersCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all standard offers
     * 
     * @return StandardOffers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StandardOffers getStandardOffers() throws ApiException {
        ApiResponse<StandardOffers> resp = getStandardOffersWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all standard offers
     * 
     * @return ApiResponse&lt;StandardOffers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StandardOffers> getStandardOffersWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getStandardOffersValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<StandardOffers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all standard offers (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStandardOffersAsync(final ApiCallback<StandardOffers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStandardOffersValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StandardOffers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStore */
    private com.squareup.okhttp.Call getStoreCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/stores/{storeId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStore(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStoreCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get store&#39;s information
     * 
     * @param storeId Your store identifier (required)
     * @return StoreHeader
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StoreHeader getStore(String storeId) throws ApiException {
        ApiResponse<StoreHeader> resp = getStoreWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * Get store&#39;s information
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;StoreHeader&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StoreHeader> getStoreWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = getStoreValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<StoreHeader>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get store&#39;s information (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreAsync(String storeId, final ApiCallback<StoreHeader> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StoreHeader>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStoreAlerts */
    private com.squareup.okhttp.Call getStoreAlertsCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/stores/{storeId}/alerts".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreAlertsValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreAlerts(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStoreAlertsCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get store&#39;s alerts
     * 
     * @param storeId Your store identifier (required)
     * @return StoreAlerts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StoreAlerts getStoreAlerts(String storeId) throws ApiException {
        ApiResponse<StoreAlerts> resp = getStoreAlertsWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * Get store&#39;s alerts
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;StoreAlerts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StoreAlerts> getStoreAlertsWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = getStoreAlertsValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<StoreAlerts>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get store&#39;s alerts (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreAlertsAsync(String storeId, final ApiCallback<StoreAlerts> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreAlertsValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StoreAlerts>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStoreReportByCategory */
    private com.squareup.okhttp.Call getStoreReportByCategoryCall(String storeId, ReportByCategoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/reports/bycategory".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreReportByCategoryValidateBeforeCall(String storeId, ReportByCategoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreReportByCategory(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling getStoreReportByCategory(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStoreReportByCategoryCall(storeId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the report by category
     * Get the report by category
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ReportByCategoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportByCategoryResponse getStoreReportByCategory(String storeId, ReportByCategoryRequest request) throws ApiException {
        ApiResponse<ReportByCategoryResponse> resp = getStoreReportByCategoryWithHttpInfo(storeId, request);
        return resp.getData();
    }

    /**
     * Get the report by category
     * Get the report by category
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;ReportByCategoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportByCategoryResponse> getStoreReportByCategoryWithHttpInfo(String storeId, ReportByCategoryRequest request) throws ApiException {
        com.squareup.okhttp.Call call = getStoreReportByCategoryValidateBeforeCall(storeId, request, null, null);
        Type localVarReturnType = new TypeToken<ReportByCategoryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the report by category (asynchronously)
     * Get the report by category
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreReportByCategoryAsync(String storeId, ReportByCategoryRequest request, final ApiCallback<ReportByCategoryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreReportByCategoryValidateBeforeCall(storeId, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportByCategoryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStoreReportByChannel */
    private com.squareup.okhttp.Call getStoreReportByChannelCall(String storeId, ReportByChannelRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/reports/bychannel".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreReportByChannelValidateBeforeCall(String storeId, ReportByChannelRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreReportByChannel(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling getStoreReportByChannel(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStoreReportByChannelCall(storeId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the report by channel
     * Get the report by channel
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ReportByChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportByChannelResponse getStoreReportByChannel(String storeId, ReportByChannelRequest request) throws ApiException {
        ApiResponse<ReportByChannelResponse> resp = getStoreReportByChannelWithHttpInfo(storeId, request);
        return resp.getData();
    }

    /**
     * Get the report by channel
     * Get the report by channel
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;ReportByChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportByChannelResponse> getStoreReportByChannelWithHttpInfo(String storeId, ReportByChannelRequest request) throws ApiException {
        com.squareup.okhttp.Call call = getStoreReportByChannelValidateBeforeCall(storeId, request, null, null);
        Type localVarReturnType = new TypeToken<ReportByChannelResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the report by channel (asynchronously)
     * Get the report by channel
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreReportByChannelAsync(String storeId, ReportByChannelRequest request, final ApiCallback<ReportByChannelResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreReportByChannelValidateBeforeCall(storeId, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportByChannelResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStoreReportByDay */
    private com.squareup.okhttp.Call getStoreReportByDayCall(String storeId, ReportByDayRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/reports/byday".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreReportByDayValidateBeforeCall(String storeId, ReportByDayRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreReportByDay(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling getStoreReportByDay(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStoreReportByDayCall(storeId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the report by day
     * Get the report by day
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ReportByDayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportByDayResponse getStoreReportByDay(String storeId, ReportByDayRequest request) throws ApiException {
        ApiResponse<ReportByDayResponse> resp = getStoreReportByDayWithHttpInfo(storeId, request);
        return resp.getData();
    }

    /**
     * Get the report by day
     * Get the report by day
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;ReportByDayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportByDayResponse> getStoreReportByDayWithHttpInfo(String storeId, ReportByDayRequest request) throws ApiException {
        com.squareup.okhttp.Call call = getStoreReportByDayValidateBeforeCall(storeId, request, null, null);
        Type localVarReturnType = new TypeToken<ReportByDayResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the report by day (asynchronously)
     * Get the report by day
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreReportByDayAsync(String storeId, ReportByDayRequest request, final ApiCallback<ReportByDayResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreReportByDayValidateBeforeCall(storeId, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportByDayResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStoreReportByDayExport */
    private com.squareup.okhttp.Call getStoreReportByDayExportCall(String storeId, String format, ReportByDayRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/reports/byday/export".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreReportByDayExportValidateBeforeCall(String storeId, String format, ReportByDayRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreReportByDayExport(Async)");
        }
        
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling getStoreReportByDayExport(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling getStoreReportByDayExport(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStoreReportByDayExportCall(storeId, format, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the report by day
     * Get the report by day
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @return List&lt;BeezUPCommonLink2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeezUPCommonLink2> getStoreReportByDayExport(String storeId, String format, ReportByDayRequest request) throws ApiException {
        ApiResponse<List<BeezUPCommonLink2>> resp = getStoreReportByDayExportWithHttpInfo(storeId, format, request);
        return resp.getData();
    }

    /**
     * Get the report by day
     * Get the report by day
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @return ApiResponse&lt;List&lt;BeezUPCommonLink2&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeezUPCommonLink2>> getStoreReportByDayExportWithHttpInfo(String storeId, String format, ReportByDayRequest request) throws ApiException {
        com.squareup.okhttp.Call call = getStoreReportByDayExportValidateBeforeCall(storeId, format, request, null, null);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLink2>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the report by day (asynchronously)
     * Get the report by day
     * @param storeId Your store identifier (required)
     * @param format  (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreReportByDayExportAsync(String storeId, String format, ReportByDayRequest request, final ApiCallback<List<BeezUPCommonLink2>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreReportByDayExportValidateBeforeCall(storeId, format, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLink2>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStoreReportByProduct */
    private com.squareup.okhttp.Call getStoreReportByProductCall(String storeId, ReportByProductRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/reports/byproduct".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreReportByProductValidateBeforeCall(String storeId, ReportByProductRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreReportByProduct(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling getStoreReportByProduct(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStoreReportByProductCall(storeId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the report by product
     * Get the report by product
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ReportByProductResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportByProductResponse getStoreReportByProduct(String storeId, ReportByProductRequest request) throws ApiException {
        ApiResponse<ReportByProductResponse> resp = getStoreReportByProductWithHttpInfo(storeId, request);
        return resp.getData();
    }

    /**
     * Get the report by product
     * Get the report by product
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;ReportByProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportByProductResponse> getStoreReportByProductWithHttpInfo(String storeId, ReportByProductRequest request) throws ApiException {
        com.squareup.okhttp.Call call = getStoreReportByProductValidateBeforeCall(storeId, request, null, null);
        Type localVarReturnType = new TypeToken<ReportByProductResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the report by product (asynchronously)
     * Get the report by product
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreReportByProductAsync(String storeId, ReportByProductRequest request, final ApiCallback<ReportByProductResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreReportByProductValidateBeforeCall(storeId, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportByProductResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStoreTrackedClicks */
    private com.squareup.okhttp.Call getStoreTrackedClicksCall(String storeId, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/tracking/clicks".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreTrackedClicksValidateBeforeCall(String storeId, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreTrackedClicks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStoreTrackedClicksCall(storeId, count, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the latest clicks tracked
     * 
     * @param storeId Your store identifier (required)
     * @param count The click&#39;s count you want to get (optional, default to 100)
     * @return TrackedClicks
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackedClicks getStoreTrackedClicks(String storeId, Integer count) throws ApiException {
        ApiResponse<TrackedClicks> resp = getStoreTrackedClicksWithHttpInfo(storeId, count);
        return resp.getData();
    }

    /**
     * Get the latest clicks tracked
     * 
     * @param storeId Your store identifier (required)
     * @param count The click&#39;s count you want to get (optional, default to 100)
     * @return ApiResponse&lt;TrackedClicks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackedClicks> getStoreTrackedClicksWithHttpInfo(String storeId, Integer count) throws ApiException {
        com.squareup.okhttp.Call call = getStoreTrackedClicksValidateBeforeCall(storeId, count, null, null);
        Type localVarReturnType = new TypeToken<TrackedClicks>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the latest clicks tracked (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param count The click&#39;s count you want to get (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreTrackedClicksAsync(String storeId, Integer count, final ApiCallback<TrackedClicks> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreTrackedClicksValidateBeforeCall(storeId, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrackedClicks>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStoreTrackedExternalOrders */
    private com.squareup.okhttp.Call getStoreTrackedExternalOrdersCall(String storeId, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/tracking/externalorders".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreTrackedExternalOrdersValidateBeforeCall(String storeId, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreTrackedExternalOrders(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStoreTrackedExternalOrdersCall(storeId, count, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the latest external orders tracked
     * 
     * @param storeId Your store identifier (required)
     * @param count The external order&#39;s count you want to get (optional, default to 100)
     * @return TrackedExternalOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackedExternalOrders getStoreTrackedExternalOrders(String storeId, Integer count) throws ApiException {
        ApiResponse<TrackedExternalOrders> resp = getStoreTrackedExternalOrdersWithHttpInfo(storeId, count);
        return resp.getData();
    }

    /**
     * Get the latest external orders tracked
     * 
     * @param storeId Your store identifier (required)
     * @param count The external order&#39;s count you want to get (optional, default to 100)
     * @return ApiResponse&lt;TrackedExternalOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackedExternalOrders> getStoreTrackedExternalOrdersWithHttpInfo(String storeId, Integer count) throws ApiException {
        com.squareup.okhttp.Call call = getStoreTrackedExternalOrdersValidateBeforeCall(storeId, count, null, null);
        Type localVarReturnType = new TypeToken<TrackedExternalOrders>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the latest external orders tracked (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param count The external order&#39;s count you want to get (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreTrackedExternalOrdersAsync(String storeId, Integer count, final ApiCallback<TrackedExternalOrders> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreTrackedExternalOrdersValidateBeforeCall(storeId, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrackedExternalOrders>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStoreTrackedOrders */
    private com.squareup.okhttp.Call getStoreTrackedOrdersCall(String storeId, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/tracking/orders".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreTrackedOrdersValidateBeforeCall(String storeId, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreTrackedOrders(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStoreTrackedOrdersCall(storeId, count, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the latest orders tracked
     * 
     * @param storeId Your store identifier (required)
     * @param count The order&#39;s count you want to get (optional, default to 100)
     * @return TrackedOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackedOrders getStoreTrackedOrders(String storeId, Integer count) throws ApiException {
        ApiResponse<TrackedOrders> resp = getStoreTrackedOrdersWithHttpInfo(storeId, count);
        return resp.getData();
    }

    /**
     * Get the latest orders tracked
     * 
     * @param storeId Your store identifier (required)
     * @param count The order&#39;s count you want to get (optional, default to 100)
     * @return ApiResponse&lt;TrackedOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackedOrders> getStoreTrackedOrdersWithHttpInfo(String storeId, Integer count) throws ApiException {
        com.squareup.okhttp.Call call = getStoreTrackedOrdersValidateBeforeCall(storeId, count, null, null);
        Type localVarReturnType = new TypeToken<TrackedOrders>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the latest orders tracked (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param count The order&#39;s count you want to get (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreTrackedOrdersAsync(String storeId, Integer count, final ApiCallback<TrackedOrders> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreTrackedOrdersValidateBeforeCall(storeId, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrackedOrders>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStoreTrackingStatus */
    private com.squareup.okhttp.Call getStoreTrackingStatusCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/tracking/status".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoreTrackingStatusValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getStoreTrackingStatus(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStoreTrackingStatusCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get store tracking synchronization status
     * Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
     * @param storeId Your store identifier (required)
     * @return StoreTrackingStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StoreTrackingStatus getStoreTrackingStatus(String storeId) throws ApiException {
        ApiResponse<StoreTrackingStatus> resp = getStoreTrackingStatusWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * Get store tracking synchronization status
     * Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;StoreTrackingStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StoreTrackingStatus> getStoreTrackingStatusWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = getStoreTrackingStatusValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<StoreTrackingStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get store tracking synchronization status (asynchronously)
     * Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoreTrackingStatusAsync(String storeId, final ApiCallback<StoreTrackingStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoreTrackingStatusValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StoreTrackingStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStores */
    private com.squareup.okhttp.Call getStoresCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/stores".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoresValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getStoresCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get store list
     * 
     * @return Stores
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Stores getStores() throws ApiException {
        ApiResponse<Stores> resp = getStoresWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get store list
     * 
     * @return ApiResponse&lt;Stores&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Stores> getStoresWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getStoresValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Stores>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get store list (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoresAsync(final ApiCallback<Stores> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoresValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Stores>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTrackingStatus */
    private com.squareup.okhttp.Call getTrackingStatusCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/tracking/status".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTrackingStatusValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getTrackingStatusCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Display the synchronization status of the clicks and orders
     * Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
     * @return TrackingStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackingStatus getTrackingStatus() throws ApiException {
        ApiResponse<TrackingStatus> resp = getTrackingStatusWithHttpInfo();
        return resp.getData();
    }

    /**
     * Display the synchronization status of the clicks and orders
     * Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
     * @return ApiResponse&lt;TrackingStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackingStatus> getTrackingStatusWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTrackingStatusValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TrackingStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Display the synchronization status of the clicks and orders (asynchronously)
     * Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTrackingStatusAsync(final ApiCallback<TrackingStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTrackingStatusValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrackingStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserAccountInfo */
    private com.squareup.okhttp.Call getUserAccountInfoCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/account".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserAccountInfoValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getUserAccountInfoCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get user account information
     * 
     * @return AccountInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountInfo getUserAccountInfo() throws ApiException {
        ApiResponse<AccountInfo> resp = getUserAccountInfoWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get user account information
     * 
     * @return ApiResponse&lt;AccountInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountInfo> getUserAccountInfoWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getUserAccountInfoValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AccountInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get user account information (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserAccountInfoAsync(final ApiCallback<AccountInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserAccountInfoValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserListGroup */
    private com.squareup.okhttp.Call getUserListGroupCall(String listGroupName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/lov/groups/{listGroupName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "listGroupName" + "\\}", apiClient.escapeString(listGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserListGroupValidateBeforeCall(String listGroupName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'listGroupName' is set
        if (listGroupName == null) {
            throw new ApiException("Missing the required parameter 'listGroupName' when calling getUserListGroup(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserListGroupCall(listGroupName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of values related to this group name
     * 
     * @param listGroupName The list group name your want to get (required)
     * @return List&lt;BeezUPCommonLOVLink2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeezUPCommonLOVLink2> getUserListGroup(String listGroupName) throws ApiException {
        ApiResponse<List<BeezUPCommonLOVLink2>> resp = getUserListGroupWithHttpInfo(listGroupName);
        return resp.getData();
    }

    /**
     * Get list of values related to this group name
     * 
     * @param listGroupName The list group name your want to get (required)
     * @return ApiResponse&lt;List&lt;BeezUPCommonLOVLink2&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeezUPCommonLOVLink2>> getUserListGroupWithHttpInfo(String listGroupName) throws ApiException {
        com.squareup.okhttp.Call call = getUserListGroupValidateBeforeCall(listGroupName, null, null);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLOVLink2>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of values related to this group name (asynchronously)
     * 
     * @param listGroupName The list group name your want to get (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserListGroupAsync(String listGroupName, final ApiCallback<List<BeezUPCommonLOVLink2>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserListGroupValidateBeforeCall(listGroupName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLOVLink2>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserListGroupNames */
    private com.squareup.okhttp.Call getUserListGroupNamesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/lov/groups".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserListGroupNamesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getUserListGroupNamesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of group of list name
     * 
     * @return List&lt;BeezUPCommonLOVLink2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeezUPCommonLOVLink2> getUserListGroupNames() throws ApiException {
        ApiResponse<List<BeezUPCommonLOVLink2>> resp = getUserListGroupNamesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get list of group of list name
     * 
     * @return ApiResponse&lt;List&lt;BeezUPCommonLOVLink2&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeezUPCommonLOVLink2>> getUserListGroupNamesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getUserListGroupNamesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLOVLink2>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of group of list name (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserListGroupNamesAsync(final ApiCallback<List<BeezUPCommonLOVLink2>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserListGroupNamesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLOVLink2>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserListNames */
    private com.squareup.okhttp.Call getUserListNamesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/lov/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserListNamesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getUserListNamesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all list names
     * 
     * @return List&lt;BeezUPCommonLOVLink2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeezUPCommonLOVLink2> getUserListNames() throws ApiException {
        ApiResponse<List<BeezUPCommonLOVLink2>> resp = getUserListNamesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all list names
     * 
     * @return ApiResponse&lt;List&lt;BeezUPCommonLOVLink2&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeezUPCommonLOVLink2>> getUserListNamesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getUserListNamesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLOVLink2>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all list names (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserListNamesAsync(final ApiCallback<List<BeezUPCommonLOVLink2>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserListNamesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLOVLink2>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserListOfValues */
    private com.squareup.okhttp.Call getUserListOfValuesCall(String listName, List<String> acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/lov/{listName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "listName" + "\\}", apiClient.escapeString(listName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserListOfValuesValidateBeforeCall(String listName, List<String> acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'listName' is set
        if (listName == null) {
            throw new ApiException("Missing the required parameter 'listName' when calling getUserListOfValues(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserListOfValuesCall(listName, acceptLanguage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the list of values related to this list name
     * 
     * @param listName The list of value name your want to get (required)
     * @param acceptLanguage Indicates that the client accepts the following languages. (optional)
     * @return List&lt;BeezUPCommonListOfValueItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeezUPCommonListOfValueItem> getUserListOfValues(String listName, List<String> acceptLanguage) throws ApiException {
        ApiResponse<List<BeezUPCommonListOfValueItem>> resp = getUserListOfValuesWithHttpInfo(listName, acceptLanguage);
        return resp.getData();
    }

    /**
     * Get the list of values related to this list name
     * 
     * @param listName The list of value name your want to get (required)
     * @param acceptLanguage Indicates that the client accepts the following languages. (optional)
     * @return ApiResponse&lt;List&lt;BeezUPCommonListOfValueItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeezUPCommonListOfValueItem>> getUserListOfValuesWithHttpInfo(String listName, List<String> acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = getUserListOfValuesValidateBeforeCall(listName, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonListOfValueItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the list of values related to this list name (asynchronously)
     * 
     * @param listName The list of value name your want to get (required)
     * @param acceptLanguage Indicates that the client accepts the following languages. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserListOfValuesAsync(String listName, List<String> acceptLanguage, final ApiCallback<List<BeezUPCommonListOfValueItem>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserListOfValuesValidateBeforeCall(listName, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonListOfValueItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for harvestAll */
    private com.squareup.okhttp.Call harvestAllCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/harvest".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call harvestAllValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = harvestAllCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send harvest request to all your marketplaces
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void harvestAll() throws ApiException {
        harvestAllWithHttpInfo();
    }

    /**
     * Send harvest request to all your marketplaces
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> harvestAllWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = harvestAllValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Send harvest request to all your marketplaces (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call harvestAllAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = harvestAllValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for harvestOrder */
    private com.squareup.okhttp.Call harvestOrderCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketplaceTechnicalCode" + "\\}", apiClient.escapeString(marketplaceTechnicalCode.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "beezUPOrderId" + "\\}", apiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call harvestOrderValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling harvestOrder(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling harvestOrder(Async)");
        }
        
        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling harvestOrder(Async)");
        }
        
        
        com.squareup.okhttp.Call call = harvestOrderCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send harvest request for a single Order
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void harvestOrder(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        harvestOrderWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
    }

    /**
     * Send harvest request for a single Order
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> harvestOrderWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId) throws ApiException {
        com.squareup.okhttp.Call call = harvestOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Send harvest request for a single Order (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call harvestOrderAsync(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = harvestOrderValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for importationActivateAutoImport */
    private com.squareup.okhttp.Call importationActivateAutoImportCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/autoImport".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationActivateAutoImportValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationActivateAutoImport(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationActivateAutoImportCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Activate the auto importation of the last successful manual catalog importation.
     * Once you have made your fist manual catalog importation with success, you can call this operation to import it automatically. No parameter required, we know which one it is.
     * @param storeId Your store identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void importationActivateAutoImport(String storeId) throws ApiException {
        importationActivateAutoImportWithHttpInfo(storeId);
    }

    /**
     * Activate the auto importation of the last successful manual catalog importation.
     * Once you have made your fist manual catalog importation with success, you can call this operation to import it automatically. No parameter required, we know which one it is.
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> importationActivateAutoImportWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = importationActivateAutoImportValidateBeforeCall(storeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Activate the auto importation of the last successful manual catalog importation. (asynchronously)
     * Once you have made your fist manual catalog importation with success, you can call this operation to import it automatically. No parameter required, we know which one it is.
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationActivateAutoImportAsync(String storeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationActivateAutoImportValidateBeforeCall(storeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for importationCancel */
    private com.squareup.okhttp.Call importationCancelCall(String storeId, String executionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationCancelValidateBeforeCall(String storeId, String executionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationCancel(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationCancel(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationCancelCall(storeId, executionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel importation
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void importationCancel(String storeId, String executionId) throws ApiException {
        importationCancelWithHttpInfo(storeId, executionId);
    }

    /**
     * Cancel importation
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> importationCancelWithHttpInfo(String storeId, String executionId) throws ApiException {
        com.squareup.okhttp.Call call = importationCancelValidateBeforeCall(storeId, executionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Cancel importation (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationCancelAsync(String storeId, String executionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationCancelValidateBeforeCall(storeId, executionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for importationCommit */
    private com.squareup.okhttp.Call importationCommitCall(String storeId, String executionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/commit".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationCommitValidateBeforeCall(String storeId, String executionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationCommit(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationCommit(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationCommitCall(storeId, executionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Commit Importation
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void importationCommit(String storeId, String executionId) throws ApiException {
        importationCommitWithHttpInfo(storeId, executionId);
    }

    /**
     * Commit Importation
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> importationCommitWithHttpInfo(String storeId, String executionId) throws ApiException {
        com.squareup.okhttp.Call call = importationCommitValidateBeforeCall(storeId, executionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Commit Importation (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationCommitAsync(String storeId, String executionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationCommitValidateBeforeCall(storeId, executionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for importationCommitColumns */
    private com.squareup.okhttp.Call importationCommitColumnsCall(String storeId, String executionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/commitColumns".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationCommitColumnsValidateBeforeCall(String storeId, String executionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationCommitColumns(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationCommitColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationCommitColumnsCall(storeId, executionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Commit columns
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void importationCommitColumns(String storeId, String executionId) throws ApiException {
        importationCommitColumnsWithHttpInfo(storeId, executionId);
    }

    /**
     * Commit columns
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> importationCommitColumnsWithHttpInfo(String storeId, String executionId) throws ApiException {
        com.squareup.okhttp.Call call = importationCommitColumnsValidateBeforeCall(storeId, executionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Commit columns (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationCommitColumnsAsync(String storeId, String executionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationCommitColumnsValidateBeforeCall(storeId, executionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for importationConfigureCatalogColumn */
    private com.squareup.okhttp.Call importationConfigureCatalogColumnCall(String storeId, String executionId, String columnId, ConfigureCatalogColumnCatalogRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationConfigureCatalogColumnValidateBeforeCall(String storeId, String executionId, String columnId, ConfigureCatalogColumnCatalogRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationConfigureCatalogColumn(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationConfigureCatalogColumn(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationConfigureCatalogColumn(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling importationConfigureCatalogColumn(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationConfigureCatalogColumnCall(storeId, executionId, columnId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Configure catalog column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void importationConfigureCatalogColumn(String storeId, String executionId, String columnId, ConfigureCatalogColumnCatalogRequest request) throws ApiException {
        importationConfigureCatalogColumnWithHttpInfo(storeId, executionId, columnId, request);
    }

    /**
     * Configure catalog column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> importationConfigureCatalogColumnWithHttpInfo(String storeId, String executionId, String columnId, ConfigureCatalogColumnCatalogRequest request) throws ApiException {
        com.squareup.okhttp.Call call = importationConfigureCatalogColumnValidateBeforeCall(storeId, executionId, columnId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Configure catalog column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationConfigureCatalogColumnAsync(String storeId, String executionId, String columnId, ConfigureCatalogColumnCatalogRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationConfigureCatalogColumnValidateBeforeCall(storeId, executionId, columnId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for importationConfigureRemainingCatalogColumns */
    private com.squareup.okhttp.Call importationConfigureRemainingCatalogColumnsCall(String storeId, String executionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/configureRemainingCatalogColumns".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationConfigureRemainingCatalogColumnsValidateBeforeCall(String storeId, String executionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationConfigureRemainingCatalogColumns(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationConfigureRemainingCatalogColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationConfigureRemainingCatalogColumnsCall(storeId, executionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Configure remaining catalog columns
     * This operation should be used after you have mapped the required BeezUP Columns
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void importationConfigureRemainingCatalogColumns(String storeId, String executionId) throws ApiException {
        importationConfigureRemainingCatalogColumnsWithHttpInfo(storeId, executionId);
    }

    /**
     * Configure remaining catalog columns
     * This operation should be used after you have mapped the required BeezUP Columns
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> importationConfigureRemainingCatalogColumnsWithHttpInfo(String storeId, String executionId) throws ApiException {
        com.squareup.okhttp.Call call = importationConfigureRemainingCatalogColumnsValidateBeforeCall(storeId, executionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Configure remaining catalog columns (asynchronously)
     * This operation should be used after you have mapped the required BeezUP Columns
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationConfigureRemainingCatalogColumnsAsync(String storeId, String executionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationConfigureRemainingCatalogColumnsValidateBeforeCall(storeId, executionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for importationDeleteCustomColumn */
    private com.squareup.okhttp.Call importationDeleteCustomColumnCall(String storeId, String executionId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationDeleteCustomColumnValidateBeforeCall(String storeId, String executionId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationDeleteCustomColumn(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationDeleteCustomColumn(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationDeleteCustomColumn(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationDeleteCustomColumnCall(storeId, executionId, columnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Custom Column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void importationDeleteCustomColumn(String storeId, String executionId, String columnId) throws ApiException {
        importationDeleteCustomColumnWithHttpInfo(storeId, executionId, columnId);
    }

    /**
     * Delete Custom Column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> importationDeleteCustomColumnWithHttpInfo(String storeId, String executionId, String columnId) throws ApiException {
        com.squareup.okhttp.Call call = importationDeleteCustomColumnValidateBeforeCall(storeId, executionId, columnId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Custom Column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationDeleteCustomColumnAsync(String storeId, String executionId, String columnId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationDeleteCustomColumnValidateBeforeCall(storeId, executionId, columnId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for importationGetCustomColumnExpression */
    private com.squareup.okhttp.Call importationGetCustomColumnExpressionCall(String storeId, String executionId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationGetCustomColumnExpressionValidateBeforeCall(String storeId, String executionId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationGetCustomColumnExpression(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationGetCustomColumnExpression(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationGetCustomColumnExpression(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationGetCustomColumnExpressionCall(storeId, executionId, columnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the encrypted custom column expression in this importation
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String importationGetCustomColumnExpression(String storeId, String executionId, String columnId) throws ApiException {
        ApiResponse<String> resp = importationGetCustomColumnExpressionWithHttpInfo(storeId, executionId, columnId);
        return resp.getData();
    }

    /**
     * Get the encrypted custom column expression in this importation
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> importationGetCustomColumnExpressionWithHttpInfo(String storeId, String executionId, String columnId) throws ApiException {
        com.squareup.okhttp.Call call = importationGetCustomColumnExpressionValidateBeforeCall(storeId, executionId, columnId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the encrypted custom column expression in this importation (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationGetCustomColumnExpressionAsync(String storeId, String executionId, String columnId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationGetCustomColumnExpressionValidateBeforeCall(storeId, executionId, columnId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for importationGetCustomColumns */
    private com.squareup.okhttp.Call importationGetCustomColumnsCall(String storeId, String executionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationGetCustomColumnsValidateBeforeCall(String storeId, String executionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationGetCustomColumns(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationGetCustomColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationGetCustomColumnsCall(storeId, executionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get custom columns currently place in this importation
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return CustomColumns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomColumns importationGetCustomColumns(String storeId, String executionId) throws ApiException {
        ApiResponse<CustomColumns> resp = importationGetCustomColumnsWithHttpInfo(storeId, executionId);
        return resp.getData();
    }

    /**
     * Get custom columns currently place in this importation
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ApiResponse&lt;CustomColumns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomColumns> importationGetCustomColumnsWithHttpInfo(String storeId, String executionId) throws ApiException {
        com.squareup.okhttp.Call call = importationGetCustomColumnsValidateBeforeCall(storeId, executionId, null, null);
        Type localVarReturnType = new TypeToken<CustomColumns>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get custom columns currently place in this importation (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationGetCustomColumnsAsync(String storeId, String executionId, final ApiCallback<CustomColumns> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationGetCustomColumnsValidateBeforeCall(storeId, executionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomColumns>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for importationGetDetectedCatalogColumns */
    private com.squareup.okhttp.Call importationGetDetectedCatalogColumnsCall(String storeId, String executionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationGetDetectedCatalogColumnsValidateBeforeCall(String storeId, String executionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationGetDetectedCatalogColumns(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationGetDetectedCatalogColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationGetDetectedCatalogColumnsCall(storeId, executionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get detected catalog columns during this importation.
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return DetectedCatalogColumns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DetectedCatalogColumns importationGetDetectedCatalogColumns(String storeId, String executionId) throws ApiException {
        ApiResponse<DetectedCatalogColumns> resp = importationGetDetectedCatalogColumnsWithHttpInfo(storeId, executionId);
        return resp.getData();
    }

    /**
     * Get detected catalog columns during this importation.
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ApiResponse&lt;DetectedCatalogColumns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DetectedCatalogColumns> importationGetDetectedCatalogColumnsWithHttpInfo(String storeId, String executionId) throws ApiException {
        com.squareup.okhttp.Call call = importationGetDetectedCatalogColumnsValidateBeforeCall(storeId, executionId, null, null);
        Type localVarReturnType = new TypeToken<DetectedCatalogColumns>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get detected catalog columns during this importation. (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationGetDetectedCatalogColumnsAsync(String storeId, String executionId, final ApiCallback<DetectedCatalogColumns> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationGetDetectedCatalogColumnsValidateBeforeCall(storeId, executionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DetectedCatalogColumns>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for importationGetImportationMonitoring */
    private com.squareup.okhttp.Call importationGetImportationMonitoringCall(String storeId, String executionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationGetImportationMonitoringValidateBeforeCall(String storeId, String executionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationGetImportationMonitoring(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationGetImportationMonitoring(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationGetImportationMonitoringCall(storeId, executionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the importation status
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ImportationMonitoring
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImportationMonitoring importationGetImportationMonitoring(String storeId, String executionId) throws ApiException {
        ApiResponse<ImportationMonitoring> resp = importationGetImportationMonitoringWithHttpInfo(storeId, executionId);
        return resp.getData();
    }

    /**
     * Get the importation status
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ApiResponse&lt;ImportationMonitoring&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImportationMonitoring> importationGetImportationMonitoringWithHttpInfo(String storeId, String executionId) throws ApiException {
        com.squareup.okhttp.Call call = importationGetImportationMonitoringValidateBeforeCall(storeId, executionId, null, null);
        Type localVarReturnType = new TypeToken<ImportationMonitoring>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the importation status (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationGetImportationMonitoringAsync(String storeId, String executionId, final ApiCallback<ImportationMonitoring> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationGetImportationMonitoringValidateBeforeCall(storeId, executionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImportationMonitoring>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for importationGetManualUpdateLastInputConfig */
    private com.squareup.okhttp.Call importationGetManualUpdateLastInputConfigCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/inputConfiguration".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationGetManualUpdateLastInputConfigValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationGetManualUpdateLastInputConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationGetManualUpdateLastInputConfigCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the last input configuration
     * 
     * @param storeId Your store identifier (required)
     * @return LastManualImportInputConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LastManualImportInputConfiguration importationGetManualUpdateLastInputConfig(String storeId) throws ApiException {
        ApiResponse<LastManualImportInputConfiguration> resp = importationGetManualUpdateLastInputConfigWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * Get the last input configuration
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;LastManualImportInputConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LastManualImportInputConfiguration> importationGetManualUpdateLastInputConfigWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = importationGetManualUpdateLastInputConfigValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<LastManualImportInputConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the last input configuration (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationGetManualUpdateLastInputConfigAsync(String storeId, final ApiCallback<LastManualImportInputConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationGetManualUpdateLastInputConfigValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LastManualImportInputConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for importationGetProductSample */
    private com.squareup.okhttp.Call importationGetProductSampleCall(String storeId, String executionId, Integer productSampleIndex, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()))
        .replaceAll("\\{" + "productSampleIndex" + "\\}", apiClient.escapeString(productSampleIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationGetProductSampleValidateBeforeCall(String storeId, String executionId, Integer productSampleIndex, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationGetProductSample(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationGetProductSample(Async)");
        }
        
        // verify the required parameter 'productSampleIndex' is set
        if (productSampleIndex == null) {
            throw new ApiException("Missing the required parameter 'productSampleIndex' when calling importationGetProductSample(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationGetProductSampleCall(storeId, executionId, productSampleIndex, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the product sample related to this importation with all columns (catalog and custom)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param productSampleIndex Index of the product sample. Starting from 0 to 99. (required)
     * @return ProductSample
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProductSample importationGetProductSample(String storeId, String executionId, Integer productSampleIndex) throws ApiException {
        ApiResponse<ProductSample> resp = importationGetProductSampleWithHttpInfo(storeId, executionId, productSampleIndex);
        return resp.getData();
    }

    /**
     * Get the product sample related to this importation with all columns (catalog and custom)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param productSampleIndex Index of the product sample. Starting from 0 to 99. (required)
     * @return ApiResponse&lt;ProductSample&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProductSample> importationGetProductSampleWithHttpInfo(String storeId, String executionId, Integer productSampleIndex) throws ApiException {
        com.squareup.okhttp.Call call = importationGetProductSampleValidateBeforeCall(storeId, executionId, productSampleIndex, null, null);
        Type localVarReturnType = new TypeToken<ProductSample>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the product sample related to this importation with all columns (catalog and custom) (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param productSampleIndex Index of the product sample. Starting from 0 to 99. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationGetProductSampleAsync(String storeId, String executionId, Integer productSampleIndex, final ApiCallback<ProductSample> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationGetProductSampleValidateBeforeCall(storeId, executionId, productSampleIndex, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProductSample>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for importationGetProductSampleCustomColumnValue */
    private com.squareup.okhttp.Call importationGetProductSampleCustomColumnValueCall(String storeId, String executionId, Integer productSampleIndex, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()))
        .replaceAll("\\{" + "productSampleIndex" + "\\}", apiClient.escapeString(productSampleIndex.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationGetProductSampleCustomColumnValueValidateBeforeCall(String storeId, String executionId, Integer productSampleIndex, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationGetProductSampleCustomColumnValue(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationGetProductSampleCustomColumnValue(Async)");
        }
        
        // verify the required parameter 'productSampleIndex' is set
        if (productSampleIndex == null) {
            throw new ApiException("Missing the required parameter 'productSampleIndex' when calling importationGetProductSampleCustomColumnValue(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationGetProductSampleCustomColumnValue(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationGetProductSampleCustomColumnValueCall(storeId, executionId, productSampleIndex, columnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get product sample custom column value related to this importation.
     * /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param productSampleIndex Index of the product sample. Starting from 0 to 99. (required)
     * @param columnId The custom column identifier (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String importationGetProductSampleCustomColumnValue(String storeId, String executionId, Integer productSampleIndex, String columnId) throws ApiException {
        ApiResponse<String> resp = importationGetProductSampleCustomColumnValueWithHttpInfo(storeId, executionId, productSampleIndex, columnId);
        return resp.getData();
    }

    /**
     * Get product sample custom column value related to this importation.
     * /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param productSampleIndex Index of the product sample. Starting from 0 to 99. (required)
     * @param columnId The custom column identifier (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> importationGetProductSampleCustomColumnValueWithHttpInfo(String storeId, String executionId, Integer productSampleIndex, String columnId) throws ApiException {
        com.squareup.okhttp.Call call = importationGetProductSampleCustomColumnValueValidateBeforeCall(storeId, executionId, productSampleIndex, columnId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get product sample custom column value related to this importation. (asynchronously)
     * /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param productSampleIndex Index of the product sample. Starting from 0 to 99. (required)
     * @param columnId The custom column identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationGetProductSampleCustomColumnValueAsync(String storeId, String executionId, Integer productSampleIndex, String columnId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationGetProductSampleCustomColumnValueValidateBeforeCall(storeId, executionId, productSampleIndex, columnId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for importationGetReportings */
    private com.squareup.okhttp.Call importationGetReportingsCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationGetReportingsValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationGetReportings(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationGetReportingsCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the latest catalog importation reporting
     * 
     * @param storeId Your store identifier (required)
     * @return List&lt;ImportationReporting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ImportationReporting> importationGetReportings(String storeId) throws ApiException {
        ApiResponse<List<ImportationReporting>> resp = importationGetReportingsWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * Get the latest catalog importation reporting
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;List&lt;ImportationReporting&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ImportationReporting>> importationGetReportingsWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = importationGetReportingsValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<List<ImportationReporting>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the latest catalog importation reporting (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationGetReportingsAsync(String storeId, final ApiCallback<List<ImportationReporting>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationGetReportingsValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ImportationReporting>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for importationIgnoreColumn */
    private com.squareup.okhttp.Call importationIgnoreColumnCall(String storeId, String executionId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationIgnoreColumnValidateBeforeCall(String storeId, String executionId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationIgnoreColumn(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationIgnoreColumn(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationIgnoreColumn(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationIgnoreColumnCall(storeId, executionId, columnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Ignore Column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void importationIgnoreColumn(String storeId, String executionId, String columnId) throws ApiException {
        importationIgnoreColumnWithHttpInfo(storeId, executionId, columnId);
    }

    /**
     * Ignore Column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> importationIgnoreColumnWithHttpInfo(String storeId, String executionId, String columnId) throws ApiException {
        com.squareup.okhttp.Call call = importationIgnoreColumnValidateBeforeCall(storeId, executionId, columnId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Ignore Column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationIgnoreColumnAsync(String storeId, String executionId, String columnId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationIgnoreColumnValidateBeforeCall(storeId, executionId, columnId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for importationMapCatalogColumn */
    private com.squareup.okhttp.Call importationMapCatalogColumnCall(String storeId, String executionId, String columnId, MapBeezUPColumnRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationMapCatalogColumnValidateBeforeCall(String storeId, String executionId, String columnId, MapBeezUPColumnRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationMapCatalogColumn(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationMapCatalogColumn(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationMapCatalogColumn(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling importationMapCatalogColumn(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationMapCatalogColumnCall(storeId, executionId, columnId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Map catalog column to a BeezUP column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The catalog column identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void importationMapCatalogColumn(String storeId, String executionId, String columnId, MapBeezUPColumnRequest request) throws ApiException {
        importationMapCatalogColumnWithHttpInfo(storeId, executionId, columnId, request);
    }

    /**
     * Map catalog column to a BeezUP column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The catalog column identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> importationMapCatalogColumnWithHttpInfo(String storeId, String executionId, String columnId, MapBeezUPColumnRequest request) throws ApiException {
        com.squareup.okhttp.Call call = importationMapCatalogColumnValidateBeforeCall(storeId, executionId, columnId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Map catalog column to a BeezUP column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The catalog column identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationMapCatalogColumnAsync(String storeId, String executionId, String columnId, MapBeezUPColumnRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationMapCatalogColumnValidateBeforeCall(storeId, executionId, columnId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for importationMapCustomColumn */
    private com.squareup.okhttp.Call importationMapCustomColumnCall(String storeId, String executionId, String columnId, MapBeezUPColumnRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationMapCustomColumnValidateBeforeCall(String storeId, String executionId, String columnId, MapBeezUPColumnRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationMapCustomColumn(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationMapCustomColumn(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationMapCustomColumn(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling importationMapCustomColumn(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationMapCustomColumnCall(storeId, executionId, columnId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Map custom column to a BeezUP column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void importationMapCustomColumn(String storeId, String executionId, String columnId, MapBeezUPColumnRequest request) throws ApiException {
        importationMapCustomColumnWithHttpInfo(storeId, executionId, columnId, request);
    }

    /**
     * Map custom column to a BeezUP column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> importationMapCustomColumnWithHttpInfo(String storeId, String executionId, String columnId, MapBeezUPColumnRequest request) throws ApiException {
        com.squareup.okhttp.Call call = importationMapCustomColumnValidateBeforeCall(storeId, executionId, columnId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Map custom column to a BeezUP column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationMapCustomColumnAsync(String storeId, String executionId, String columnId, MapBeezUPColumnRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationMapCustomColumnValidateBeforeCall(storeId, executionId, columnId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for importationReattendColumn */
    private com.squareup.okhttp.Call importationReattendColumnCall(String storeId, String executionId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationReattendColumnValidateBeforeCall(String storeId, String executionId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationReattendColumn(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationReattendColumn(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationReattendColumn(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationReattendColumnCall(storeId, executionId, columnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Reattend Column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void importationReattendColumn(String storeId, String executionId, String columnId) throws ApiException {
        importationReattendColumnWithHttpInfo(storeId, executionId, columnId);
    }

    /**
     * Reattend Column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> importationReattendColumnWithHttpInfo(String storeId, String executionId, String columnId) throws ApiException {
        com.squareup.okhttp.Call call = importationReattendColumnValidateBeforeCall(storeId, executionId, columnId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Reattend Column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationReattendColumnAsync(String storeId, String executionId, String columnId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationReattendColumnValidateBeforeCall(storeId, executionId, columnId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for importationSaveCustomColumn */
    private com.squareup.okhttp.Call importationSaveCustomColumnCall(String storeId, String executionId, String columnId, ChangeCustomColumnRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationSaveCustomColumnValidateBeforeCall(String storeId, String executionId, String columnId, ChangeCustomColumnRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationSaveCustomColumn(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationSaveCustomColumn(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationSaveCustomColumn(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling importationSaveCustomColumn(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationSaveCustomColumnCall(storeId, executionId, columnId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create or replace a custom column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void importationSaveCustomColumn(String storeId, String executionId, String columnId, ChangeCustomColumnRequest request) throws ApiException {
        importationSaveCustomColumnWithHttpInfo(storeId, executionId, columnId, request);
    }

    /**
     * Create or replace a custom column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> importationSaveCustomColumnWithHttpInfo(String storeId, String executionId, String columnId, ChangeCustomColumnRequest request) throws ApiException {
        com.squareup.okhttp.Call call = importationSaveCustomColumnValidateBeforeCall(storeId, executionId, columnId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create or replace a custom column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationSaveCustomColumnAsync(String storeId, String executionId, String columnId, ChangeCustomColumnRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationSaveCustomColumnValidateBeforeCall(storeId, executionId, columnId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for importationStartManualUpdate */
    private com.squareup.okhttp.Call importationStartManualUpdateCall(String storeId, StartManualImportRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationStartManualUpdateValidateBeforeCall(String storeId, StartManualImportRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationStartManualUpdate(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling importationStartManualUpdate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationStartManualUpdateCall(storeId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start Manual Import
     * 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return List&lt;BeezUPCommonLink2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeezUPCommonLink2> importationStartManualUpdate(String storeId, StartManualImportRequest request) throws ApiException {
        ApiResponse<List<BeezUPCommonLink2>> resp = importationStartManualUpdateWithHttpInfo(storeId, request);
        return resp.getData();
    }

    /**
     * Start Manual Import
     * 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;List&lt;BeezUPCommonLink2&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeezUPCommonLink2>> importationStartManualUpdateWithHttpInfo(String storeId, StartManualImportRequest request) throws ApiException {
        com.squareup.okhttp.Call call = importationStartManualUpdateValidateBeforeCall(storeId, request, null, null);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLink2>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start Manual Import (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationStartManualUpdateAsync(String storeId, StartManualImportRequest request, final ApiCallback<List<BeezUPCommonLink2>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationStartManualUpdateValidateBeforeCall(storeId, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeezUPCommonLink2>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for importationTechnicalProgression */
    private com.squareup.okhttp.Call importationTechnicalProgressionCall(String storeId, String executionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/technicalProgression".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationTechnicalProgressionValidateBeforeCall(String storeId, String executionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationTechnicalProgression(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationTechnicalProgression(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationTechnicalProgressionCall(storeId, executionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get technical progression
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ImportationTechnicalProgression
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImportationTechnicalProgression importationTechnicalProgression(String storeId, String executionId) throws ApiException {
        ApiResponse<ImportationTechnicalProgression> resp = importationTechnicalProgressionWithHttpInfo(storeId, executionId);
        return resp.getData();
    }

    /**
     * Get technical progression
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @return ApiResponse&lt;ImportationTechnicalProgression&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImportationTechnicalProgression> importationTechnicalProgressionWithHttpInfo(String storeId, String executionId) throws ApiException {
        com.squareup.okhttp.Call call = importationTechnicalProgressionValidateBeforeCall(storeId, executionId, null, null);
        Type localVarReturnType = new TypeToken<ImportationTechnicalProgression>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get technical progression (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationTechnicalProgressionAsync(String storeId, String executionId, final ApiCallback<ImportationTechnicalProgression> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationTechnicalProgressionValidateBeforeCall(storeId, executionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImportationTechnicalProgression>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for importationUnmapCatalogColumn */
    private com.squareup.okhttp.Call importationUnmapCatalogColumnCall(String storeId, String executionId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationUnmapCatalogColumnValidateBeforeCall(String storeId, String executionId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationUnmapCatalogColumn(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationUnmapCatalogColumn(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationUnmapCatalogColumn(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationUnmapCatalogColumnCall(storeId, executionId, columnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unmap catalog column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The catalog column identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void importationUnmapCatalogColumn(String storeId, String executionId, String columnId) throws ApiException {
        importationUnmapCatalogColumnWithHttpInfo(storeId, executionId, columnId);
    }

    /**
     * Unmap catalog column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The catalog column identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> importationUnmapCatalogColumnWithHttpInfo(String storeId, String executionId, String columnId) throws ApiException {
        com.squareup.okhttp.Call call = importationUnmapCatalogColumnValidateBeforeCall(storeId, executionId, columnId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Unmap catalog column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The catalog column identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationUnmapCatalogColumnAsync(String storeId, String executionId, String columnId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationUnmapCatalogColumnValidateBeforeCall(storeId, executionId, columnId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for importationUnmapCustomColumn */
    private com.squareup.okhttp.Call importationUnmapCustomColumnCall(String storeId, String executionId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationUnmapCustomColumnValidateBeforeCall(String storeId, String executionId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationUnmapCustomColumn(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling importationUnmapCustomColumn(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling importationUnmapCustomColumn(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationUnmapCustomColumnCall(storeId, executionId, columnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unmap custom column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void importationUnmapCustomColumn(String storeId, String executionId, String columnId) throws ApiException {
        importationUnmapCustomColumnWithHttpInfo(storeId, executionId, columnId);
    }

    /**
     * Unmap custom column
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> importationUnmapCustomColumnWithHttpInfo(String storeId, String executionId, String columnId) throws ApiException {
        com.squareup.okhttp.Call call = importationUnmapCustomColumnValidateBeforeCall(storeId, executionId, columnId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Unmap custom column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param executionId The execution identifier of you catalog importation (required)
     * @param columnId The custom column identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationUnmapCustomColumnAsync(String storeId, String executionId, String columnId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationUnmapCustomColumnValidateBeforeCall(storeId, executionId, columnId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for logout */
    private com.squareup.okhttp.Call logoutCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/security/logout".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call logoutValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = logoutCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Log out the current user from go2
     * Log out the current user from go2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void logout() throws ApiException {
        logoutWithHttpInfo();
    }

    /**
     * Log out the current user from go2
     * Log out the current user from go2
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> logoutWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = logoutValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Log out the current user from go2 (asynchronously)
     * Log out the current user from go2
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call logoutAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = logoutValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for mapChannelCatalogCategory */
    private com.squareup.okhttp.Call mapChannelCatalogCategoryCall(String channelCatalogId, MapCategoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}/categoryMappings/map".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelCatalogId" + "\\}", apiClient.escapeString(channelCatalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mapChannelCatalogCategoryValidateBeforeCall(String channelCatalogId, MapCategoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling mapChannelCatalogCategory(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling mapChannelCatalogCategory(Async)");
        }
        
        
        com.squareup.okhttp.Call call = mapChannelCatalogCategoryCall(channelCatalogId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Map channel catalog category
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void mapChannelCatalogCategory(String channelCatalogId, MapCategoryRequest request) throws ApiException {
        mapChannelCatalogCategoryWithHttpInfo(channelCatalogId, request);
    }

    /**
     * Map channel catalog category
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> mapChannelCatalogCategoryWithHttpInfo(String channelCatalogId, MapCategoryRequest request) throws ApiException {
        com.squareup.okhttp.Call call = mapChannelCatalogCategoryValidateBeforeCall(channelCatalogId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Map channel catalog category (asynchronously)
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mapChannelCatalogCategoryAsync(String channelCatalogId, MapCategoryRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mapChannelCatalogCategoryValidateBeforeCall(channelCatalogId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for mapChannelCatalogColumns */
    private com.squareup.okhttp.Call mapChannelCatalogColumnsCall(String channelCatalogId, ColumnMappingList request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}/columnMappings".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelCatalogId" + "\\}", apiClient.escapeString(channelCatalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mapChannelCatalogColumnsValidateBeforeCall(String channelCatalogId, ColumnMappingList request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling mapChannelCatalogColumns(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling mapChannelCatalogColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = mapChannelCatalogColumnsCall(channelCatalogId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Configure channel catalog column mappings
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void mapChannelCatalogColumns(String channelCatalogId, ColumnMappingList request) throws ApiException {
        mapChannelCatalogColumnsWithHttpInfo(channelCatalogId, request);
    }

    /**
     * Configure channel catalog column mappings
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> mapChannelCatalogColumnsWithHttpInfo(String channelCatalogId, ColumnMappingList request) throws ApiException {
        com.squareup.okhttp.Call call = mapChannelCatalogColumnsValidateBeforeCall(channelCatalogId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Configure channel catalog column mappings (asynchronously)
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mapChannelCatalogColumnsAsync(String channelCatalogId, ColumnMappingList request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mapChannelCatalogColumnsValidateBeforeCall(channelCatalogId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for moveDownRule */
    private com.squareup.okhttp.Call moveDownRuleCall(String storeId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/{ruleId}/movedown".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "ruleId" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call moveDownRuleValidateBeforeCall(String storeId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling moveDownRule(Async)");
        }
        
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling moveDownRule(Async)");
        }
        
        
        com.squareup.okhttp.Call call = moveDownRuleCall(storeId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Move the rule down
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void moveDownRule(String storeId, String ruleId) throws ApiException {
        moveDownRuleWithHttpInfo(storeId, ruleId);
    }

    /**
     * Move the rule down
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> moveDownRuleWithHttpInfo(String storeId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = moveDownRuleValidateBeforeCall(storeId, ruleId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Move the rule down (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveDownRuleAsync(String storeId, String ruleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveDownRuleValidateBeforeCall(storeId, ruleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for moveUpRule */
    private com.squareup.okhttp.Call moveUpRuleCall(String storeId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/{ruleId}/moveup".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "ruleId" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call moveUpRuleValidateBeforeCall(String storeId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling moveUpRule(Async)");
        }
        
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling moveUpRule(Async)");
        }
        
        
        com.squareup.okhttp.Call call = moveUpRuleCall(storeId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Move the rule up
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void moveUpRule(String storeId, String ruleId) throws ApiException {
        moveUpRuleWithHttpInfo(storeId, ruleId);
    }

    /**
     * Move the rule up
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> moveUpRuleWithHttpInfo(String storeId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = moveUpRuleValidateBeforeCall(storeId, ruleId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Move the rule up (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveUpRuleAsync(String storeId, String ruleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveUpRuleValidateBeforeCall(storeId, ruleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for optimise */
    private com.squareup.okhttp.Call optimiseCall(String storeId, String actionName, OptimiseRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/optimisations/{actionName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "actionName" + "\\}", apiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call optimiseValidateBeforeCall(String storeId, String actionName, OptimiseRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling optimise(Async)");
        }
        
        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling optimise(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling optimise(Async)");
        }
        
        
        com.squareup.okhttp.Call call = optimiseCall(storeId, actionName, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Optimise products
     * /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
     * @param storeId Your store identifier (required)
     * @param actionName  (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void optimise(String storeId, String actionName, OptimiseRequest request) throws ApiException {
        optimiseWithHttpInfo(storeId, actionName, request);
    }

    /**
     * Optimise products
     * /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
     * @param storeId Your store identifier (required)
     * @param actionName  (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> optimiseWithHttpInfo(String storeId, String actionName, OptimiseRequest request) throws ApiException {
        com.squareup.okhttp.Call call = optimiseValidateBeforeCall(storeId, actionName, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Optimise products (asynchronously)
     * /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
     * @param storeId Your store identifier (required)
     * @param actionName  (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call optimiseAsync(String storeId, String actionName, OptimiseRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = optimiseValidateBeforeCall(storeId, actionName, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for optimiseByCategory */
    private com.squareup.okhttp.Call optimiseByCategoryCall(String storeId, String catalogCategoryId, String actionName, List<String> request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/optimisations/bycategory/{catalogCategoryId}/{actionName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "catalogCategoryId" + "\\}", apiClient.escapeString(catalogCategoryId.toString()))
        .replaceAll("\\{" + "actionName" + "\\}", apiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call optimiseByCategoryValidateBeforeCall(String storeId, String catalogCategoryId, String actionName, List<String> request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling optimiseByCategory(Async)");
        }
        
        // verify the required parameter 'catalogCategoryId' is set
        if (catalogCategoryId == null) {
            throw new ApiException("Missing the required parameter 'catalogCategoryId' when calling optimiseByCategory(Async)");
        }
        
        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling optimiseByCategory(Async)");
        }
        
        
        com.squareup.okhttp.Call call = optimiseByCategoryCall(storeId, catalogCategoryId, actionName, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Optimise products&#39;s category
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
     * @param storeId Your store identifier (required)
     * @param catalogCategoryId The category identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param request The channel identifier list concerned by this optimisation (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void optimiseByCategory(String storeId, String catalogCategoryId, String actionName, List<String> request) throws ApiException {
        optimiseByCategoryWithHttpInfo(storeId, catalogCategoryId, actionName, request);
    }

    /**
     * Optimise products&#39;s category
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
     * @param storeId Your store identifier (required)
     * @param catalogCategoryId The category identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param request The channel identifier list concerned by this optimisation (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> optimiseByCategoryWithHttpInfo(String storeId, String catalogCategoryId, String actionName, List<String> request) throws ApiException {
        com.squareup.okhttp.Call call = optimiseByCategoryValidateBeforeCall(storeId, catalogCategoryId, actionName, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Optimise products&#39;s category (asynchronously)
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
     * @param storeId Your store identifier (required)
     * @param catalogCategoryId The category identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param request The channel identifier list concerned by this optimisation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call optimiseByCategoryAsync(String storeId, String catalogCategoryId, String actionName, List<String> request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = optimiseByCategoryValidateBeforeCall(storeId, catalogCategoryId, actionName, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for optimiseByChannel */
    private com.squareup.okhttp.Call optimiseByChannelCall(String storeId, String channelId, String actionName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/optimisations/bychannel/{channelId}/{actionName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "channelId" + "\\}", apiClient.escapeString(channelId.toString()))
        .replaceAll("\\{" + "actionName" + "\\}", apiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call optimiseByChannelValidateBeforeCall(String storeId, String channelId, String actionName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling optimiseByChannel(Async)");
        }
        
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling optimiseByChannel(Async)");
        }
        
        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling optimiseByChannel(Async)");
        }
        
        
        com.squareup.okhttp.Call call = optimiseByChannelCall(storeId, channelId, actionName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Optimise products&#39;s category
     * /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
     * @param storeId Your store identifier (required)
     * @param channelId The channel identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void optimiseByChannel(String storeId, String channelId, String actionName) throws ApiException {
        optimiseByChannelWithHttpInfo(storeId, channelId, actionName);
    }

    /**
     * Optimise products&#39;s category
     * /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
     * @param storeId Your store identifier (required)
     * @param channelId The channel identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> optimiseByChannelWithHttpInfo(String storeId, String channelId, String actionName) throws ApiException {
        com.squareup.okhttp.Call call = optimiseByChannelValidateBeforeCall(storeId, channelId, actionName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Optimise products&#39;s category (asynchronously)
     * /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
     * @param storeId Your store identifier (required)
     * @param channelId The channel identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call optimiseByChannelAsync(String storeId, String channelId, String actionName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = optimiseByChannelValidateBeforeCall(storeId, channelId, actionName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for optimiseByProduct */
    private com.squareup.okhttp.Call optimiseByProductCall(String storeId, String productId, String actionName, List<String> request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/optimisations/byproduct/{productId}/{actionName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()))
        .replaceAll("\\{" + "actionName" + "\\}", apiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call optimiseByProductValidateBeforeCall(String storeId, String productId, String actionName, List<String> request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling optimiseByProduct(Async)");
        }
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling optimiseByProduct(Async)");
        }
        
        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling optimiseByProduct(Async)");
        }
        
        
        com.squareup.okhttp.Call call = optimiseByProductCall(storeId, productId, actionName, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Optimise products
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
     * @param storeId Your store identifier (required)
     * @param productId The product identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param request The channel identifier list concerned by this optimisation (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void optimiseByProduct(String storeId, String productId, String actionName, List<String> request) throws ApiException {
        optimiseByProductWithHttpInfo(storeId, productId, actionName, request);
    }

    /**
     * Optimise products
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
     * @param storeId Your store identifier (required)
     * @param productId The product identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param request The channel identifier list concerned by this optimisation (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> optimiseByProductWithHttpInfo(String storeId, String productId, String actionName, List<String> request) throws ApiException {
        com.squareup.okhttp.Call call = optimiseByProductValidateBeforeCall(storeId, productId, actionName, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Optimise products (asynchronously)
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
     * @param storeId Your store identifier (required)
     * @param productId The product identifier concerned by this optimisation (required)
     * @param actionName  (required)
     * @param request The channel identifier list concerned by this optimisation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call optimiseByProductAsync(String storeId, String productId, String actionName, List<String> request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = optimiseByProductValidateBeforeCall(storeId, productId, actionName, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for overrideChannelCatalogProductOverrides */
    private com.squareup.okhttp.Call overrideChannelCatalogProductOverridesCall(String channelCatalogId, String productId, ProductOverrides request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelCatalogId" + "\\}", apiClient.escapeString(channelCatalogId.toString()))
        .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call overrideChannelCatalogProductOverridesValidateBeforeCall(String channelCatalogId, String productId, ProductOverrides request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling overrideChannelCatalogProductOverrides(Async)");
        }
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling overrideChannelCatalogProductOverrides(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling overrideChannelCatalogProductOverrides(Async)");
        }
        
        
        com.squareup.okhttp.Call call = overrideChannelCatalogProductOverridesCall(channelCatalogId, productId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Override channel catalog product values
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param productId The product identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void overrideChannelCatalogProductOverrides(String channelCatalogId, String productId, ProductOverrides request) throws ApiException {
        overrideChannelCatalogProductOverridesWithHttpInfo(channelCatalogId, productId, request);
    }

    /**
     * Override channel catalog product values
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param productId The product identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> overrideChannelCatalogProductOverridesWithHttpInfo(String channelCatalogId, String productId, ProductOverrides request) throws ApiException {
        com.squareup.okhttp.Call call = overrideChannelCatalogProductOverridesValidateBeforeCall(channelCatalogId, productId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Override channel catalog product values (asynchronously)
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param productId The product identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call overrideChannelCatalogProductOverridesAsync(String channelCatalogId, String productId, ProductOverrides request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = overrideChannelCatalogProductOverridesValidateBeforeCall(channelCatalogId, productId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for reactivateCurrentContract */
    private com.squareup.okhttp.Call reactivateCurrentContractCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/contracts/current/reenableAutoRenewal".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reactivateCurrentContractValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = reactivateCurrentContractCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Reactivate your terminated contract.
     * By calling this operation you can re-enable the auto renewal.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void reactivateCurrentContract() throws ApiException {
        reactivateCurrentContractWithHttpInfo();
    }

    /**
     * Reactivate your terminated contract.
     * By calling this operation you can re-enable the auto renewal.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> reactivateCurrentContractWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = reactivateCurrentContractValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Reactivate your terminated contract. (asynchronously)
     * By calling this operation you can re-enable the auto renewal.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reactivateCurrentContractAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reactivateCurrentContractValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for reenableChannelCatalogProduct */
    private com.squareup.okhttp.Call reenableChannelCatalogProductCall(String channelCatalogId, String productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/reenable".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelCatalogId" + "\\}", apiClient.escapeString(channelCatalogId.toString()))
        .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reenableChannelCatalogProductValidateBeforeCall(String channelCatalogId, String productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling reenableChannelCatalogProduct(Async)");
        }
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling reenableChannelCatalogProduct(Async)");
        }
        
        
        com.squareup.okhttp.Call call = reenableChannelCatalogProductCall(channelCatalogId, productId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Reenable channel catalog product
     * By default a all your catalog products are exposed to the channel. You can reenable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param productId The product identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void reenableChannelCatalogProduct(String channelCatalogId, String productId) throws ApiException {
        reenableChannelCatalogProductWithHttpInfo(channelCatalogId, productId);
    }

    /**
     * Reenable channel catalog product
     * By default a all your catalog products are exposed to the channel. You can reenable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param productId The product identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> reenableChannelCatalogProductWithHttpInfo(String channelCatalogId, String productId) throws ApiException {
        com.squareup.okhttp.Call call = reenableChannelCatalogProductValidateBeforeCall(channelCatalogId, productId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Reenable channel catalog product (asynchronously)
     * By default a all your catalog products are exposed to the channel. You can reenable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param productId The product identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reenableChannelCatalogProductAsync(String channelCatalogId, String productId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reenableChannelCatalogProductValidateBeforeCall(channelCatalogId, productId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for resendEmailActivation */
    private com.squareup.okhttp.Call resendEmailActivationCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/account/resendEmailActivation".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resendEmailActivationValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = resendEmailActivationCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resend email activation
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void resendEmailActivation() throws ApiException {
        resendEmailActivationWithHttpInfo();
    }

    /**
     * Resend email activation
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> resendEmailActivationWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = resendEmailActivationValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Resend email activation (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resendEmailActivationAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resendEmailActivationValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for runRule */
    private com.squareup.okhttp.Call runRuleCall(String storeId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/{ruleId}/run".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "ruleId" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runRuleValidateBeforeCall(String storeId, String ruleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling runRule(Async)");
        }
        
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling runRule(Async)");
        }
        
        
        com.squareup.okhttp.Call call = runRuleCall(storeId, ruleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Run rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runRule(String storeId, String ruleId) throws ApiException {
        runRuleWithHttpInfo(storeId, ruleId);
    }

    /**
     * Run rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runRuleWithHttpInfo(String storeId, String ruleId) throws ApiException {
        com.squareup.okhttp.Call call = runRuleValidateBeforeCall(storeId, ruleId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Run rule (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runRuleAsync(String storeId, String ruleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runRuleValidateBeforeCall(storeId, ruleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for runRules */
    private com.squareup.okhttp.Call runRulesCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/run".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runRulesValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling runRules(Async)");
        }
        
        
        com.squareup.okhttp.Call call = runRulesCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Run all rules for this store
     * 
     * @param storeId Your store identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runRules(String storeId) throws ApiException {
        runRulesWithHttpInfo(storeId);
    }

    /**
     * Run all rules for this store
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runRulesWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = runRulesValidateBeforeCall(storeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Run all rules for this store (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runRulesAsync(String storeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runRulesValidateBeforeCall(storeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for saveCompanyInfo */
    private com.squareup.okhttp.Call saveCompanyInfoCall(CompanyInfo request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/account/companyInfo".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveCompanyInfoValidateBeforeCall(CompanyInfo request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling saveCompanyInfo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = saveCompanyInfoCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change company information
     * 
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveCompanyInfo(CompanyInfo request) throws ApiException {
        saveCompanyInfoWithHttpInfo(request);
    }

    /**
     * Change company information
     * 
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveCompanyInfoWithHttpInfo(CompanyInfo request) throws ApiException {
        com.squareup.okhttp.Call call = saveCompanyInfoValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Change company information (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveCompanyInfoAsync(CompanyInfo request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveCompanyInfoValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for saveCreditCardInfo */
    private com.squareup.okhttp.Call saveCreditCardInfoCall(CreditCardInfo request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/account/creditCardInfo".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveCreditCardInfoValidateBeforeCall(CreditCardInfo request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling saveCreditCardInfo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = saveCreditCardInfoCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Save user credit card info
     * 
     * @param request Credit card info (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveCreditCardInfo(CreditCardInfo request) throws ApiException {
        saveCreditCardInfoWithHttpInfo(request);
    }

    /**
     * Save user credit card info
     * 
     * @param request Credit card info (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveCreditCardInfoWithHttpInfo(CreditCardInfo request) throws ApiException {
        com.squareup.okhttp.Call call = saveCreditCardInfoValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Save user credit card info (asynchronously)
     * 
     * @param request Credit card info (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveCreditCardInfoAsync(CreditCardInfo request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveCreditCardInfoValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for savePersonalInfo */
    private com.squareup.okhttp.Call savePersonalInfoCall(PersonalInfo request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/account/personalInfo".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call savePersonalInfoValidateBeforeCall(PersonalInfo request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling savePersonalInfo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = savePersonalInfoCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Save user personal information
     * 
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void savePersonalInfo(PersonalInfo request) throws ApiException {
        savePersonalInfoWithHttpInfo(request);
    }

    /**
     * Save user personal information
     * 
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> savePersonalInfoWithHttpInfo(PersonalInfo request) throws ApiException {
        com.squareup.okhttp.Call call = savePersonalInfoValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Save user personal information (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call savePersonalInfoAsync(PersonalInfo request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = savePersonalInfoValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for saveProfilePictureInfo */
    private com.squareup.okhttp.Call saveProfilePictureInfoCall(ProfilePictureInfo request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/account/profilePictureInfo".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveProfilePictureInfoValidateBeforeCall(ProfilePictureInfo request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling saveProfilePictureInfo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = saveProfilePictureInfoCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change user picture information
     * 
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveProfilePictureInfo(ProfilePictureInfo request) throws ApiException {
        saveProfilePictureInfoWithHttpInfo(request);
    }

    /**
     * Change user picture information
     * 
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveProfilePictureInfoWithHttpInfo(ProfilePictureInfo request) throws ApiException {
        com.squareup.okhttp.Call call = saveProfilePictureInfoValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Change user picture information (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveProfilePictureInfoAsync(ProfilePictureInfo request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveProfilePictureInfoValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for saveReportFilter */
    private com.squareup.okhttp.Call saveReportFilterCall(String storeId, String reportFilterId, SaveReportFilterRequest reportFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reportFilter;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/reports/filters/{reportFilterId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "reportFilterId" + "\\}", apiClient.escapeString(reportFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveReportFilterValidateBeforeCall(String storeId, String reportFilterId, SaveReportFilterRequest reportFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling saveReportFilter(Async)");
        }
        
        // verify the required parameter 'reportFilterId' is set
        if (reportFilterId == null) {
            throw new ApiException("Missing the required parameter 'reportFilterId' when calling saveReportFilter(Async)");
        }
        
        // verify the required parameter 'reportFilter' is set
        if (reportFilter == null) {
            throw new ApiException("Missing the required parameter 'reportFilter' when calling saveReportFilter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = saveReportFilterCall(storeId, reportFilterId, reportFilter, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Save the report filter
     * 
     * @param storeId Your store identifier (required)
     * @param reportFilterId Your report filter identifier (required)
     * @param reportFilter  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveReportFilter(String storeId, String reportFilterId, SaveReportFilterRequest reportFilter) throws ApiException {
        saveReportFilterWithHttpInfo(storeId, reportFilterId, reportFilter);
    }

    /**
     * Save the report filter
     * 
     * @param storeId Your store identifier (required)
     * @param reportFilterId Your report filter identifier (required)
     * @param reportFilter  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveReportFilterWithHttpInfo(String storeId, String reportFilterId, SaveReportFilterRequest reportFilter) throws ApiException {
        com.squareup.okhttp.Call call = saveReportFilterValidateBeforeCall(storeId, reportFilterId, reportFilter, null, null);
        return apiClient.execute(call);
    }

    /**
     * Save the report filter (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param reportFilterId Your report filter identifier (required)
     * @param reportFilter  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveReportFilterAsync(String storeId, String reportFilterId, SaveReportFilterRequest reportFilter, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveReportFilterValidateBeforeCall(storeId, reportFilterId, reportFilter, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for saveStoreAlert */
    private com.squareup.okhttp.Call saveStoreAlertCall(String storeId, Integer alertId, List<SaveStoreAlertRequest> request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/stores/{storeId}/alerts/{alertId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "alertId" + "\\}", apiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveStoreAlertValidateBeforeCall(String storeId, Integer alertId, List<SaveStoreAlertRequest> request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling saveStoreAlert(Async)");
        }
        
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling saveStoreAlert(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling saveStoreAlert(Async)");
        }
        
        
        com.squareup.okhttp.Call call = saveStoreAlertCall(storeId, alertId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Save store alert
     * 
     * @param storeId Your store identifier (required)
     * @param alertId  (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveStoreAlert(String storeId, Integer alertId, List<SaveStoreAlertRequest> request) throws ApiException {
        saveStoreAlertWithHttpInfo(storeId, alertId, request);
    }

    /**
     * Save store alert
     * 
     * @param storeId Your store identifier (required)
     * @param alertId  (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveStoreAlertWithHttpInfo(String storeId, Integer alertId, List<SaveStoreAlertRequest> request) throws ApiException {
        com.squareup.okhttp.Call call = saveStoreAlertValidateBeforeCall(storeId, alertId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Save store alert (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param alertId  (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveStoreAlertAsync(String storeId, Integer alertId, List<SaveStoreAlertRequest> request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveStoreAlertValidateBeforeCall(storeId, alertId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for setChannelCatalogMarketplaceSettings */
    private com.squareup.okhttp.Call setChannelCatalogMarketplaceSettingsCall(String channelCatalogId, SetChannelCatalogMarketplaceSettingsRequest model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = model;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/channelcatalogs/{channelCatalogId}/settings".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelCatalogId" + "\\}", apiClient.escapeString(channelCatalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setChannelCatalogMarketplaceSettingsValidateBeforeCall(String channelCatalogId, SetChannelCatalogMarketplaceSettingsRequest model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling setChannelCatalogMarketplaceSettings(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling setChannelCatalogMarketplaceSettings(Async)");
        }
        
        
        com.squareup.okhttp.Call call = setChannelCatalogMarketplaceSettingsCall(channelCatalogId, model, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Save new marketplace settings for a channel catalog
     * Allow you to configure your marketplace settings.  Partial update accepted. 
     * @param channelCatalogId Channel Catalog Id to query (required)
     * @param model Settings to save (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setChannelCatalogMarketplaceSettings(String channelCatalogId, SetChannelCatalogMarketplaceSettingsRequest model) throws ApiException {
        setChannelCatalogMarketplaceSettingsWithHttpInfo(channelCatalogId, model);
    }

    /**
     * Save new marketplace settings for a channel catalog
     * Allow you to configure your marketplace settings.  Partial update accepted. 
     * @param channelCatalogId Channel Catalog Id to query (required)
     * @param model Settings to save (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setChannelCatalogMarketplaceSettingsWithHttpInfo(String channelCatalogId, SetChannelCatalogMarketplaceSettingsRequest model) throws ApiException {
        com.squareup.okhttp.Call call = setChannelCatalogMarketplaceSettingsValidateBeforeCall(channelCatalogId, model, null, null);
        return apiClient.execute(call);
    }

    /**
     * Save new marketplace settings for a channel catalog (asynchronously)
     * Allow you to configure your marketplace settings.  Partial update accepted. 
     * @param channelCatalogId Channel Catalog Id to query (required)
     * @param model Settings to save (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setChannelCatalogMarketplaceSettingsAsync(String channelCatalogId, SetChannelCatalogMarketplaceSettingsRequest model, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setChannelCatalogMarketplaceSettingsValidateBeforeCall(channelCatalogId, model, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for setMerchantOrderInfo */
    private com.squareup.okhttp.Call setMerchantOrderInfoCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, SetMerchantOrderInfoRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "marketplaceTechnicalCode" + "\\}", apiClient.escapeString(marketplaceTechnicalCode.toString()))
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "beezUPOrderId" + "\\}", apiClient.escapeString(beezUPOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setMerchantOrderInfoValidateBeforeCall(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, SetMerchantOrderInfoRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceTechnicalCode' is set
        if (marketplaceTechnicalCode == null) {
            throw new ApiException("Missing the required parameter 'marketplaceTechnicalCode' when calling setMerchantOrderInfo(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling setMerchantOrderInfo(Async)");
        }
        
        // verify the required parameter 'beezUPOrderId' is set
        if (beezUPOrderId == null) {
            throw new ApiException("Missing the required parameter 'beezUPOrderId' when calling setMerchantOrderInfo(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling setMerchantOrderInfo(Async)");
        }
        
        
        com.squareup.okhttp.Call call = setMerchantOrderInfoCall(marketplaceTechnicalCode, accountId, beezUPOrderId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set an Order&#39;s merchant information
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setMerchantOrderInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, SetMerchantOrderInfoRequest request) throws ApiException {
        setMerchantOrderInfoWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, request);
    }

    /**
     * Set an Order&#39;s merchant information
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setMerchantOrderInfoWithHttpInfo(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, SetMerchantOrderInfoRequest request) throws ApiException {
        com.squareup.okhttp.Call call = setMerchantOrderInfoValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set an Order&#39;s merchant information (asynchronously)
     * 
     * @param marketplaceTechnicalCode The marketplace technical code (required)
     * @param accountId The account identifier (required)
     * @param beezUPOrderId The BeezUP Order identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setMerchantOrderInfoAsync(String marketplaceTechnicalCode, Integer accountId, String beezUPOrderId, SetMerchantOrderInfoRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setMerchantOrderInfoValidateBeforeCall(marketplaceTechnicalCode, accountId, beezUPOrderId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for setMerchantOrderInfoList */
    private com.squareup.okhttp.Call setMerchantOrderInfoListCall(SetMerchantOrderInfoListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/marketplaces/orders/batches/setMerchantOrderInfos".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setMerchantOrderInfoListValidateBeforeCall(SetMerchantOrderInfoListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling setMerchantOrderInfoList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = setMerchantOrderInfoListCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send a batch of operations to set an Order&#39;s merchant information
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param request  (required)
     * @return BatchOrderOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchOrderOperationResponse setMerchantOrderInfoList(SetMerchantOrderInfoListRequest request) throws ApiException {
        ApiResponse<BatchOrderOperationResponse> resp = setMerchantOrderInfoListWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Send a batch of operations to set an Order&#39;s merchant information
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param request  (required)
     * @return ApiResponse&lt;BatchOrderOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchOrderOperationResponse> setMerchantOrderInfoListWithHttpInfo(SetMerchantOrderInfoListRequest request) throws ApiException {
        com.squareup.okhttp.Call call = setMerchantOrderInfoListValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<BatchOrderOperationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send a batch of operations to set an Order&#39;s merchant information (asynchronously)
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setMerchantOrderInfoListAsync(SetMerchantOrderInfoListRequest request, final ApiCallback<BatchOrderOperationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setMerchantOrderInfoListValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchOrderOperationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for share */
    private com.squareup.okhttp.Call shareCall(String storeId, FriendEmail email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = email;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/stores/{storeId}/shares".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call shareValidateBeforeCall(String storeId, FriendEmail email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling share(Async)");
        }
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling share(Async)");
        }
        
        
        com.squareup.okhttp.Call call = shareCall(storeId, email, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Share a store to another user
     * 
     * @param storeId Your store identifier (required)
     * @param email Your friend&#39;s email (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void share(String storeId, FriendEmail email) throws ApiException {
        shareWithHttpInfo(storeId, email);
    }

    /**
     * Share a store to another user
     * 
     * @param storeId Your store identifier (required)
     * @param email Your friend&#39;s email (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> shareWithHttpInfo(String storeId, FriendEmail email) throws ApiException {
        com.squareup.okhttp.Call call = shareValidateBeforeCall(storeId, email, null, null);
        return apiClient.execute(call);
    }

    /**
     * Share a store to another user (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param email Your friend&#39;s email (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call shareAsync(String storeId, FriendEmail email, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = shareValidateBeforeCall(storeId, email, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for terminateCurrentContract */
    private com.squareup.okhttp.Call terminateCurrentContractCall(TerminateContract request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/contracts/current/disableAutoRenewal".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call terminateCurrentContractValidateBeforeCall(TerminateContract request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling terminateCurrentContract(Async)");
        }
        
        
        com.squareup.okhttp.Call call = terminateCurrentContractCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Schedule termination of your current contract at the end of the commitment.
     * By default your contract are automatically renew. By calling this operation you can disable the auto renewal.
     * @param request Indicate the termination reason (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void terminateCurrentContract(TerminateContract request) throws ApiException {
        terminateCurrentContractWithHttpInfo(request);
    }

    /**
     * Schedule termination of your current contract at the end of the commitment.
     * By default your contract are automatically renew. By calling this operation you can disable the auto renewal.
     * @param request Indicate the termination reason (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> terminateCurrentContractWithHttpInfo(TerminateContract request) throws ApiException {
        com.squareup.okhttp.Call call = terminateCurrentContractValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Schedule termination of your current contract at the end of the commitment. (asynchronously)
     * By default your contract are automatically renew. By calling this operation you can disable the auto renewal.
     * @param request Indicate the termination reason (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call terminateCurrentContractAsync(TerminateContract request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = terminateCurrentContractValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for unmapChannelCatalogCategory */
    private com.squareup.okhttp.Call unmapChannelCatalogCategoryCall(String channelCatalogId, UnmapCategoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/channelCatalogs/{channelCatalogId}/categoryMappings/unmap".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "channelCatalogId" + "\\}", apiClient.escapeString(channelCatalogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unmapChannelCatalogCategoryValidateBeforeCall(String channelCatalogId, UnmapCategoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelCatalogId' is set
        if (channelCatalogId == null) {
            throw new ApiException("Missing the required parameter 'channelCatalogId' when calling unmapChannelCatalogCategory(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling unmapChannelCatalogCategory(Async)");
        }
        
        
        com.squareup.okhttp.Call call = unmapChannelCatalogCategoryCall(channelCatalogId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unmap channel catalog category
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void unmapChannelCatalogCategory(String channelCatalogId, UnmapCategoryRequest request) throws ApiException {
        unmapChannelCatalogCategoryWithHttpInfo(channelCatalogId, request);
    }

    /**
     * Unmap channel catalog category
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> unmapChannelCatalogCategoryWithHttpInfo(String channelCatalogId, UnmapCategoryRequest request) throws ApiException {
        com.squareup.okhttp.Call call = unmapChannelCatalogCategoryValidateBeforeCall(channelCatalogId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Unmap channel catalog category (asynchronously)
     * 
     * @param channelCatalogId The channel catalog identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unmapChannelCatalogCategoryAsync(String channelCatalogId, UnmapCategoryRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unmapChannelCatalogCategoryValidateBeforeCall(channelCatalogId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateRule */
    private com.squareup.okhttp.Call updateRuleCall(String storeId, String ruleId, UpdateRuleRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/analytics/{storeId}/rules/{ruleId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "ruleId" + "\\}", apiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRuleValidateBeforeCall(String storeId, String ruleId, UpdateRuleRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateRule(Async)");
        }
        
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling updateRule(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling updateRule(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateRuleCall(storeId, ruleId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateRule(String storeId, String ruleId, UpdateRuleRequest request) throws ApiException {
        updateRuleWithHttpInfo(storeId, ruleId, request);
    }

    /**
     * Update Rule
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateRuleWithHttpInfo(String storeId, String ruleId, UpdateRuleRequest request) throws ApiException {
        com.squareup.okhttp.Call call = updateRuleValidateBeforeCall(storeId, ruleId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update Rule (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param ruleId Your rule identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRuleAsync(String storeId, String ruleId, UpdateRuleRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRuleValidateBeforeCall(storeId, ruleId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateStore */
    private com.squareup.okhttp.Call updateStoreCall(String storeId, UpdateStoreRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/v2/user/customer/stores/{storeId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStoreValidateBeforeCall(String storeId, UpdateStoreRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling updateStore(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling updateStore(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateStoreCall(storeId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update some store&#39;s information.
     * Update some store&#39;s information. FYI, you cannot change the country. 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateStore(String storeId, UpdateStoreRequest request) throws ApiException {
        updateStoreWithHttpInfo(storeId, request);
    }

    /**
     * Update some store&#39;s information.
     * Update some store&#39;s information. FYI, you cannot change the country. 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateStoreWithHttpInfo(String storeId, UpdateStoreRequest request) throws ApiException {
        com.squareup.okhttp.Call call = updateStoreValidateBeforeCall(storeId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update some store&#39;s information. (asynchronously)
     * Update some store&#39;s information. FYI, you cannot change the country. 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStoreAsync(String storeId, UpdateStoreRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStoreValidateBeforeCall(storeId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
