/*
 * BeezUP API
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/beezUP/API) 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BeezUPCommonErrorResponseMessage;
import io.swagger.client.model.CatalogColumns;
import io.swagger.client.model.Categories;
import io.swagger.client.model.ChangeCustomColumnExpressionRequest;
import io.swagger.client.model.ChangeUserColumnNameRequest;
import io.swagger.client.model.ComputeExpressionRequest;
import io.swagger.client.model.CreateCustomColumnRequest;
import io.swagger.client.model.CustomColumns;
import io.swagger.client.model.GetProductsRequest;
import io.swagger.client.model.InlineResponse409;
import io.swagger.client.model.LastManualImportInputConfiguration;
import io.swagger.client.model.Product;
import io.swagger.client.model.Products;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CatalogsCatalogApi {
    private ApiClient apiClient;

    public CatalogsCatalogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CatalogsCatalogApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for catalogChangeCatalogColumnUserName */
    private com.squareup.okhttp.Call catalogChangeCatalogColumnUserNameCall(String storeId, String columnId, ChangeUserColumnNameRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/user/catalogs/{storeId}/catalogColumns/{columnId}/rename".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogChangeCatalogColumnUserNameValidateBeforeCall(String storeId, String columnId, ChangeUserColumnNameRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogChangeCatalogColumnUserName(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling catalogChangeCatalogColumnUserName(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling catalogChangeCatalogColumnUserName(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogChangeCatalogColumnUserNameCall(storeId, columnId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change Catalog Column User Name
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The catalog column identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void catalogChangeCatalogColumnUserName(String storeId, String columnId, ChangeUserColumnNameRequest request) throws ApiException {
        catalogChangeCatalogColumnUserNameWithHttpInfo(storeId, columnId, request);
    }

    /**
     * Change Catalog Column User Name
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The catalog column identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> catalogChangeCatalogColumnUserNameWithHttpInfo(String storeId, String columnId, ChangeUserColumnNameRequest request) throws ApiException {
        com.squareup.okhttp.Call call = catalogChangeCatalogColumnUserNameValidateBeforeCall(storeId, columnId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Change Catalog Column User Name (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The catalog column identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogChangeCatalogColumnUserNameAsync(String storeId, String columnId, ChangeUserColumnNameRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogChangeCatalogColumnUserNameValidateBeforeCall(storeId, columnId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for catalogChangeCustomColumnExpression */
    private com.squareup.okhttp.Call catalogChangeCustomColumnExpressionCall(String storeId, String columnId, ChangeCustomColumnExpressionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/user/catalogs/{storeId}/customColumns/{columnId}/expression".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogChangeCustomColumnExpressionValidateBeforeCall(String storeId, String columnId, ChangeCustomColumnExpressionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogChangeCustomColumnExpression(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling catalogChangeCustomColumnExpression(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling catalogChangeCustomColumnExpression(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogChangeCustomColumnExpressionCall(storeId, columnId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change custom column expression
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void catalogChangeCustomColumnExpression(String storeId, String columnId, ChangeCustomColumnExpressionRequest request) throws ApiException {
        catalogChangeCustomColumnExpressionWithHttpInfo(storeId, columnId, request);
    }

    /**
     * Change custom column expression
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> catalogChangeCustomColumnExpressionWithHttpInfo(String storeId, String columnId, ChangeCustomColumnExpressionRequest request) throws ApiException {
        com.squareup.okhttp.Call call = catalogChangeCustomColumnExpressionValidateBeforeCall(storeId, columnId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Change custom column expression (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogChangeCustomColumnExpressionAsync(String storeId, String columnId, ChangeCustomColumnExpressionRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogChangeCustomColumnExpressionValidateBeforeCall(storeId, columnId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for catalogChangeCustomColumnUserName */
    private com.squareup.okhttp.Call catalogChangeCustomColumnUserNameCall(String storeId, String columnId, ChangeUserColumnNameRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/user/catalogs/{storeId}/customColumns/{columnId}/rename".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogChangeCustomColumnUserNameValidateBeforeCall(String storeId, String columnId, ChangeUserColumnNameRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogChangeCustomColumnUserName(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling catalogChangeCustomColumnUserName(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling catalogChangeCustomColumnUserName(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogChangeCustomColumnUserNameCall(storeId, columnId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change Custom Column User Name
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void catalogChangeCustomColumnUserName(String storeId, String columnId, ChangeUserColumnNameRequest request) throws ApiException {
        catalogChangeCustomColumnUserNameWithHttpInfo(storeId, columnId, request);
    }

    /**
     * Change Custom Column User Name
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> catalogChangeCustomColumnUserNameWithHttpInfo(String storeId, String columnId, ChangeUserColumnNameRequest request) throws ApiException {
        com.squareup.okhttp.Call call = catalogChangeCustomColumnUserNameValidateBeforeCall(storeId, columnId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Change Custom Column User Name (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogChangeCustomColumnUserNameAsync(String storeId, String columnId, ChangeUserColumnNameRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogChangeCustomColumnUserNameValidateBeforeCall(storeId, columnId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for catalogComputeExpression */
    private com.squareup.okhttp.Call catalogComputeExpressionCall(String storeId, ComputeExpressionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/user/catalogs/{storeId}/customColumns/computeExpression".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogComputeExpressionValidateBeforeCall(String storeId, ComputeExpressionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogComputeExpression(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling catalogComputeExpression(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogComputeExpressionCall(storeId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Compute the expression for this catalog.
     * 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String catalogComputeExpression(String storeId, ComputeExpressionRequest request) throws ApiException {
        ApiResponse<String> resp = catalogComputeExpressionWithHttpInfo(storeId, request);
        return resp.getData();
    }

    /**
     * Compute the expression for this catalog.
     * 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> catalogComputeExpressionWithHttpInfo(String storeId, ComputeExpressionRequest request) throws ApiException {
        com.squareup.okhttp.Call call = catalogComputeExpressionValidateBeforeCall(storeId, request, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Compute the expression for this catalog. (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogComputeExpressionAsync(String storeId, ComputeExpressionRequest request, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogComputeExpressionValidateBeforeCall(storeId, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for catalogDeleteCustomColumn */
    private com.squareup.okhttp.Call catalogDeleteCustomColumnCall(String storeId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user/catalogs/{storeId}/customColumns/{columnId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogDeleteCustomColumnValidateBeforeCall(String storeId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogDeleteCustomColumn(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling catalogDeleteCustomColumn(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogDeleteCustomColumnCall(storeId, columnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete custom column
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void catalogDeleteCustomColumn(String storeId, String columnId) throws ApiException {
        catalogDeleteCustomColumnWithHttpInfo(storeId, columnId);
    }

    /**
     * Delete custom column
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> catalogDeleteCustomColumnWithHttpInfo(String storeId, String columnId) throws ApiException {
        com.squareup.okhttp.Call call = catalogDeleteCustomColumnValidateBeforeCall(storeId, columnId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete custom column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogDeleteCustomColumnAsync(String storeId, String columnId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogDeleteCustomColumnValidateBeforeCall(storeId, columnId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for catalogGetCatalogColumns */
    private com.squareup.okhttp.Call catalogGetCatalogColumnsCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user/catalogs/{storeId}/catalogColumns".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogGetCatalogColumnsValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetCatalogColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogGetCatalogColumnsCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get catalog column list
     * 
     * @param storeId Your store identifier (required)
     * @return CatalogColumns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CatalogColumns catalogGetCatalogColumns(String storeId) throws ApiException {
        ApiResponse<CatalogColumns> resp = catalogGetCatalogColumnsWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * Get catalog column list
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;CatalogColumns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CatalogColumns> catalogGetCatalogColumnsWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = catalogGetCatalogColumnsValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<CatalogColumns>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get catalog column list (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogGetCatalogColumnsAsync(String storeId, final ApiCallback<CatalogColumns> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogGetCatalogColumnsValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CatalogColumns>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for catalogGetCategories */
    private com.squareup.okhttp.Call catalogGetCategoriesCall(String storeId, List<String> acceptEncoding, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user/catalogs/{storeId}/categories".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptEncoding != null)
        localVarHeaderParams.put("Accept-Encoding", apiClient.parameterToString(acceptEncoding));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogGetCategoriesValidateBeforeCall(String storeId, List<String> acceptEncoding, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetCategories(Async)");
        }
        
        // verify the required parameter 'acceptEncoding' is set
        if (acceptEncoding == null) {
            throw new ApiException("Missing the required parameter 'acceptEncoding' when calling catalogGetCategories(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogGetCategoriesCall(storeId, acceptEncoding, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get category list
     * 
     * @param storeId Your store identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @return Categories
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Categories catalogGetCategories(String storeId, List<String> acceptEncoding) throws ApiException {
        ApiResponse<Categories> resp = catalogGetCategoriesWithHttpInfo(storeId, acceptEncoding);
        return resp.getData();
    }

    /**
     * Get category list
     * 
     * @param storeId Your store identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @return ApiResponse&lt;Categories&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Categories> catalogGetCategoriesWithHttpInfo(String storeId, List<String> acceptEncoding) throws ApiException {
        com.squareup.okhttp.Call call = catalogGetCategoriesValidateBeforeCall(storeId, acceptEncoding, null, null);
        Type localVarReturnType = new TypeToken<Categories>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get category list (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogGetCategoriesAsync(String storeId, List<String> acceptEncoding, final ApiCallback<Categories> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogGetCategoriesValidateBeforeCall(storeId, acceptEncoding, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Categories>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for catalogGetCustomColumnExpression */
    private com.squareup.okhttp.Call catalogGetCustomColumnExpressionCall(String storeId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user/catalogs/{storeId}/customColumns/{columnId}/expression".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogGetCustomColumnExpressionValidateBeforeCall(String storeId, String columnId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetCustomColumnExpression(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling catalogGetCustomColumnExpression(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogGetCustomColumnExpressionCall(storeId, columnId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the encrypted custom column expression
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String catalogGetCustomColumnExpression(String storeId, String columnId) throws ApiException {
        ApiResponse<String> resp = catalogGetCustomColumnExpressionWithHttpInfo(storeId, columnId);
        return resp.getData();
    }

    /**
     * Get the encrypted custom column expression
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> catalogGetCustomColumnExpressionWithHttpInfo(String storeId, String columnId) throws ApiException {
        com.squareup.okhttp.Call call = catalogGetCustomColumnExpressionValidateBeforeCall(storeId, columnId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the encrypted custom column expression (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogGetCustomColumnExpressionAsync(String storeId, String columnId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogGetCustomColumnExpressionValidateBeforeCall(storeId, columnId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for catalogGetCustomColumns */
    private com.squareup.okhttp.Call catalogGetCustomColumnsCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user/catalogs/{storeId}/customColumns".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogGetCustomColumnsValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetCustomColumns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogGetCustomColumnsCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get custom column list
     * 
     * @param storeId Your store identifier (required)
     * @return CustomColumns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomColumns catalogGetCustomColumns(String storeId) throws ApiException {
        ApiResponse<CustomColumns> resp = catalogGetCustomColumnsWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * Get custom column list
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;CustomColumns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomColumns> catalogGetCustomColumnsWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = catalogGetCustomColumnsValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<CustomColumns>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get custom column list (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogGetCustomColumnsAsync(String storeId, final ApiCallback<CustomColumns> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogGetCustomColumnsValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomColumns>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for catalogGetProduct */
    private com.squareup.okhttp.Call catalogGetProductCall(String storeId, String productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user/catalogs/{storeId}/products/{productId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "productId" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogGetProductValidateBeforeCall(String storeId, String productId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetProduct(Async)");
        }
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling catalogGetProduct(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogGetProductCall(storeId, productId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get product
     * 
     * @param storeId Your store identifier (required)
     * @param productId The product identifier you want to get (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Product catalogGetProduct(String storeId, String productId) throws ApiException {
        ApiResponse<Product> resp = catalogGetProductWithHttpInfo(storeId, productId);
        return resp.getData();
    }

    /**
     * Get product
     * 
     * @param storeId Your store identifier (required)
     * @param productId The product identifier you want to get (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Product> catalogGetProductWithHttpInfo(String storeId, String productId) throws ApiException {
        com.squareup.okhttp.Call call = catalogGetProductValidateBeforeCall(storeId, productId, null, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get product (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param productId The product identifier you want to get (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogGetProductAsync(String storeId, String productId, final ApiCallback<Product> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogGetProductValidateBeforeCall(storeId, productId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for catalogGetProducts */
    private com.squareup.okhttp.Call catalogGetProductsCall(String storeId, GetProductsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/user/catalogs/{storeId}/products".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogGetProductsValidateBeforeCall(String storeId, GetProductsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetProducts(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogGetProductsCall(storeId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get product list
     * 
     * @param storeId Your store identifier (required)
     * @param request  (optional)
     * @return Products
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Products catalogGetProducts(String storeId, GetProductsRequest request) throws ApiException {
        ApiResponse<Products> resp = catalogGetProductsWithHttpInfo(storeId, request);
        return resp.getData();
    }

    /**
     * Get product list
     * 
     * @param storeId Your store identifier (required)
     * @param request  (optional)
     * @return ApiResponse&lt;Products&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Products> catalogGetProductsWithHttpInfo(String storeId, GetProductsRequest request) throws ApiException {
        com.squareup.okhttp.Call call = catalogGetProductsValidateBeforeCall(storeId, request, null, null);
        Type localVarReturnType = new TypeToken<Products>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get product list (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param request  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogGetProductsAsync(String storeId, GetProductsRequest request, final ApiCallback<Products> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogGetProductsValidateBeforeCall(storeId, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Products>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for catalogGetRandomProducts */
    private com.squareup.okhttp.Call catalogGetRandomProductsCall(String storeId, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user/catalogs/{storeId}/products/random".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogGetRandomProductsValidateBeforeCall(String storeId, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogGetRandomProducts(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogGetRandomProductsCall(storeId, count, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get random product list
     * 
     * @param storeId Your store identifier (required)
     * @param count The count of random product you want to get (optional, default to 100)
     * @return Products
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Products catalogGetRandomProducts(String storeId, Integer count) throws ApiException {
        ApiResponse<Products> resp = catalogGetRandomProductsWithHttpInfo(storeId, count);
        return resp.getData();
    }

    /**
     * Get random product list
     * 
     * @param storeId Your store identifier (required)
     * @param count The count of random product you want to get (optional, default to 100)
     * @return ApiResponse&lt;Products&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Products> catalogGetRandomProductsWithHttpInfo(String storeId, Integer count) throws ApiException {
        com.squareup.okhttp.Call call = catalogGetRandomProductsValidateBeforeCall(storeId, count, null, null);
        Type localVarReturnType = new TypeToken<Products>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get random product list (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param count The count of random product you want to get (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogGetRandomProductsAsync(String storeId, Integer count, final ApiCallback<Products> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogGetRandomProductsValidateBeforeCall(storeId, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Products>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for catalogSaveCustomColumn */
    private com.squareup.okhttp.Call catalogSaveCustomColumnCall(String storeId, String columnId, CreateCustomColumnRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/user/catalogs/{storeId}/customColumns/{columnId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()))
        .replaceAll("\\{" + "columnId" + "\\}", apiClient.escapeString(columnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call catalogSaveCustomColumnValidateBeforeCall(String storeId, String columnId, CreateCustomColumnRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling catalogSaveCustomColumn(Async)");
        }
        
        // verify the required parameter 'columnId' is set
        if (columnId == null) {
            throw new ApiException("Missing the required parameter 'columnId' when calling catalogSaveCustomColumn(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling catalogSaveCustomColumn(Async)");
        }
        
        
        com.squareup.okhttp.Call call = catalogSaveCustomColumnCall(storeId, columnId, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create or replace a custom column
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void catalogSaveCustomColumn(String storeId, String columnId, CreateCustomColumnRequest request) throws ApiException {
        catalogSaveCustomColumnWithHttpInfo(storeId, columnId, request);
    }

    /**
     * Create or replace a custom column
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> catalogSaveCustomColumnWithHttpInfo(String storeId, String columnId, CreateCustomColumnRequest request) throws ApiException {
        com.squareup.okhttp.Call call = catalogSaveCustomColumnValidateBeforeCall(storeId, columnId, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create or replace a custom column (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param columnId The custom column identifier (required)
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call catalogSaveCustomColumnAsync(String storeId, String columnId, CreateCustomColumnRequest request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = catalogSaveCustomColumnValidateBeforeCall(storeId, columnId, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for importationGetManualUpdateLastInputConfig */
    private com.squareup.okhttp.Call importationGetManualUpdateLastInputConfigCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user/catalogs/{storeId}/inputConfiguration".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeId" + "\\}", apiClient.escapeString(storeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importationGetManualUpdateLastInputConfigValidateBeforeCall(String storeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling importationGetManualUpdateLastInputConfig(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importationGetManualUpdateLastInputConfigCall(storeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the last input configuration
     * 
     * @param storeId Your store identifier (required)
     * @return LastManualImportInputConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LastManualImportInputConfiguration importationGetManualUpdateLastInputConfig(String storeId) throws ApiException {
        ApiResponse<LastManualImportInputConfiguration> resp = importationGetManualUpdateLastInputConfigWithHttpInfo(storeId);
        return resp.getData();
    }

    /**
     * Get the last input configuration
     * 
     * @param storeId Your store identifier (required)
     * @return ApiResponse&lt;LastManualImportInputConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LastManualImportInputConfiguration> importationGetManualUpdateLastInputConfigWithHttpInfo(String storeId) throws ApiException {
        com.squareup.okhttp.Call call = importationGetManualUpdateLastInputConfigValidateBeforeCall(storeId, null, null);
        Type localVarReturnType = new TypeToken<LastManualImportInputConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the last input configuration (asynchronously)
     * 
     * @param storeId Your store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importationGetManualUpdateLastInputConfigAsync(String storeId, final ApiCallback<LastManualImportInputConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importationGetManualUpdateLastInputConfigValidateBeforeCall(storeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LastManualImportInputConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
