/*
 * BeezUP API
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AccountInfo;
import io.swagger.client.model.AccountPublications;
import io.swagger.client.model.AccountSynchronizations;
import io.swagger.client.model.AutoImportConfiguration;
import io.swagger.client.model.AutomaticTransitionInfos;
import io.swagger.client.model.BatchOrderOperationResponse;
import io.swagger.client.model.BeezUPColumnConfiguration;
import io.swagger.client.model.BeezUPCommonChannelColumnId;
import io.swagger.client.model.BeezUPCommonErrorResponseMessage;
import io.swagger.client.model.BeezUPCommonInfoSummaries;
import io.swagger.client.model.BeezUPCommonLOVLink2;
import io.swagger.client.model.BeezUPCommonLink2;
import io.swagger.client.model.BeezUPCommonLink3;
import io.swagger.client.model.BeezUPCommonListOfValueItem;
import io.swagger.client.model.BillingPeriods;
import io.swagger.client.model.CatalogColumns;
import io.swagger.client.model.Categories;
import io.swagger.client.model.ChangeCustomColumnExpressionRequest;
import io.swagger.client.model.ChangeCustomColumnRequest;
import io.swagger.client.model.ChangeOrderListRequest;
import io.swagger.client.model.ChangeOrderRequest;
import io.swagger.client.model.ChangePasswordRequest;
import io.swagger.client.model.ChangeUserColumnNameRequest;
import io.swagger.client.model.ChannelCatalog;
import io.swagger.client.model.ChannelCatalogCategoryMappings;
import io.swagger.client.model.ChannelCatalogList;
import io.swagger.client.model.ChannelCatalogMarketplaceProperties;
import io.swagger.client.model.ChannelCatalogMarketplaceSettings;
import io.swagger.client.model.ChannelCatalogProductInfo;
import io.swagger.client.model.ChannelCatalogProductInfoList;
import io.swagger.client.model.ChannelColumn;
import io.swagger.client.model.ChannelHeader;
import io.swagger.client.model.ChannelInfo;
import io.swagger.client.model.ChannelRootCategory;
import io.swagger.client.model.ClearMerchantOrderInfoListRequest;
import io.swagger.client.model.ColumnMappingList;
import io.swagger.client.model.CompanyInfo;
import io.swagger.client.model.ComputeExpressionRequest;
import io.swagger.client.model.ConfigureAutoImportIntervalRequest;
import io.swagger.client.model.ConfigureCatalogColumnCatalogRequest;
import io.swagger.client.model.Contracts;
import io.swagger.client.model.CostSettings;
import io.swagger.client.model.CreateChannelCatalogRequest;
import io.swagger.client.model.CreateContract;
import io.swagger.client.model.CreateCustomColumnRequest;
import io.swagger.client.model.CreateRuleRequest;
import io.swagger.client.model.CreateStoreRequest;
import io.swagger.client.model.CreditCardInfo;
import io.swagger.client.model.CreditCardInfoResponse;
import io.swagger.client.model.CustomColumns;
import io.swagger.client.model.DetectedCatalogColumns;
import io.swagger.client.model.ExclusionFilterOperator;
import io.swagger.client.model.ExclusionFilters;
import io.swagger.client.model.ExportOrderListRequest;
import io.swagger.client.model.FriendEmail;
import io.swagger.client.model.FunctionalityRightInfo;
import io.swagger.client.model.GeneralSettings;
import io.swagger.client.model.GetChannelCatalogProductInfoListRequest;
import io.swagger.client.model.GetProductsRequest;
import io.swagger.client.model.ImportationMonitoring;
import io.swagger.client.model.ImportationReporting;
import io.swagger.client.model.ImportationTechnicalProgression;
import io.swagger.client.model.InlineResponse409;
import io.swagger.client.model.Invoices;
import io.swagger.client.model.LastManualImportInputConfiguration;
import io.swagger.client.model.LinksGetStoresLink;
import io.swagger.client.model.MapBeezUPColumnRequest;
import io.swagger.client.model.MapCategoryRequest;
import io.swagger.client.model.MarketplaceChannelCatalogList;
import io.swagger.client.model.Offer;
import io.swagger.client.model.OfferRequest;
import io.swagger.client.model.OptimiseRequest;
import io.swagger.client.model.Order;
import io.swagger.client.model.OrderExportations;
import io.swagger.client.model.OrderHistory;
import io.swagger.client.model.OrderListFull;
import io.swagger.client.model.OrderListLight;
import io.swagger.client.model.OrderListRequest;
import io.swagger.client.model.PersonalInfo;
import io.swagger.client.model.Product;
import io.swagger.client.model.ProductOverrides;
import io.swagger.client.model.ProductSample;
import io.swagger.client.model.Products;
import io.swagger.client.model.ProfilePictureInfo;
import io.swagger.client.model.ProfilePictureInfoResponse;
import io.swagger.client.model.ReportByCategoryRequest;
import io.swagger.client.model.ReportByCategoryResponse;
import io.swagger.client.model.ReportByChannelRequest;
import io.swagger.client.model.ReportByChannelResponse;
import io.swagger.client.model.ReportByDayRequest;
import io.swagger.client.model.ReportByDayResponse;
import io.swagger.client.model.ReportByProductRequest;
import io.swagger.client.model.ReportByProductResponse;
import io.swagger.client.model.ReportFilter;
import io.swagger.client.model.ReportFilters;
import io.swagger.client.model.Rule;
import io.swagger.client.model.RuleExecutionReportings;
import io.swagger.client.model.RuleList;
import io.swagger.client.model.SaveAutomaticTransitionRequest;
import io.swagger.client.model.SaveReportFilterRequest;
import io.swagger.client.model.SaveStoreAlertRequest;
import io.swagger.client.model.ScheduleAutoImportRequest;
import io.swagger.client.model.SetChannelCatalogMarketplaceSettingsRequest;
import io.swagger.client.model.SetMerchantOrderInfoListRequest;
import io.swagger.client.model.SetMerchantOrderInfoRequest;
import io.swagger.client.model.StandardOffers;
import io.swagger.client.model.StartManualImportRequest;
import io.swagger.client.model.StoreAlerts;
import io.swagger.client.model.StoreHeader;
import io.swagger.client.model.StoreShares;
import io.swagger.client.model.StoreTrackingStatus;
import io.swagger.client.model.Stores;
import io.swagger.client.model.TerminateContract;
import io.swagger.client.model.TrackedClicks;
import io.swagger.client.model.TrackedExternalOrders;
import io.swagger.client.model.TrackedOrders;
import io.swagger.client.model.TrackingStatus;
import java.util.UUID;
import io.swagger.client.model.UnmapCategoryRequest;
import io.swagger.client.model.UpdateRuleRequest;
import io.swagger.client.model.UpdateStoreRequest;
import io.swagger.client.model.UpgradeOfferRequired;
import io.swagger.client.model.UserFriendInfo;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BeezUPApi
 */
@Ignore
public class BeezUPApiTest {

    private final BeezUPApi api = new BeezUPApi();

    
    /**
     * Activate the user account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activateUserAccountTest() throws ApiException {
        String emailActivationId = null;
        api.activateUserAccount(emailActivationId);

        // TODO: test validations
    }
    
    /**
     * Configure Auto Import Interval
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoConfigureAutoImportIntervalTest() throws ApiException {
        String storeId = null;
        ConfigureAutoImportIntervalRequest request = null;
        api.autoConfigureAutoImportInterval(storeId, request);

        // TODO: test validations
    }
    
    /**
     * Delete Auto Import
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoDeleteAutoImportTest() throws ApiException {
        String storeId = null;
        api.autoDeleteAutoImport(storeId);

        // TODO: test validations
    }
    
    /**
     * Get the auto import configuration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoGetAutoImportConfigurationTest() throws ApiException {
        String storeId = null;
        AutoImportConfiguration response = api.autoGetAutoImportConfiguration(storeId);

        // TODO: test validations
    }
    
    /**
     * Pause Auto Import
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoPauseAutoImportTest() throws ApiException {
        String storeId = null;
        api.autoPauseAutoImport(storeId);

        // TODO: test validations
    }
    
    /**
     * Resume Auto Import
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoResumeAutoImportTest() throws ApiException {
        String storeId = null;
        api.autoResumeAutoImport(storeId);

        // TODO: test validations
    }
    
    /**
     * Configure Auto Import Schedules
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoScheduleAutoImportTest() throws ApiException {
        String storeId = null;
        ScheduleAutoImportRequest request = null;
        api.autoScheduleAutoImport(storeId, request);

        // TODO: test validations
    }
    
    /**
     * Start Auto Import Manually
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoStartAutoImportTest() throws ApiException {
        String storeId = null;
        List<BeezUPCommonLink2> response = api.autoStartAutoImport(storeId);

        // TODO: test validations
    }
    
    /**
     * Change Catalog Column User Name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogChangeCatalogColumnUserNameTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        ChangeUserColumnNameRequest request = null;
        api.catalogChangeCatalogColumnUserName(storeId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Change custom column expression
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogChangeCustomColumnExpressionTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        ChangeCustomColumnExpressionRequest request = null;
        api.catalogChangeCustomColumnExpression(storeId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Change Custom Column User Name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogChangeCustomColumnUserNameTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        ChangeUserColumnNameRequest request = null;
        api.catalogChangeCustomColumnUserName(storeId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Compute the expression for this catalog.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogComputeExpressionTest() throws ApiException {
        String storeId = null;
        ComputeExpressionRequest request = null;
        String response = api.catalogComputeExpression(storeId, request);

        // TODO: test validations
    }
    
    /**
     * Delete custom column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogDeleteCustomColumnTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        api.catalogDeleteCustomColumn(storeId, columnId);

        // TODO: test validations
    }
    
    /**
     * Get the BeezUP columns
     *
     * Get the BeezUP columns, this columns are used for mapping during the manual catalog importation process.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetBeezUPColumnsTest() throws ApiException {
        List<BeezUPColumnConfiguration> response = api.catalogGetBeezUPColumns();

        // TODO: test validations
    }
    
    /**
     * Get catalog column list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetCatalogColumnsTest() throws ApiException {
        String storeId = null;
        CatalogColumns response = api.catalogGetCatalogColumns(storeId);

        // TODO: test validations
    }
    
    /**
     * Get category list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetCategoriesTest() throws ApiException {
        String storeId = null;
        List<String> acceptEncoding = null;
        Categories response = api.catalogGetCategories(storeId, acceptEncoding);

        // TODO: test validations
    }
    
    /**
     * Get the encrypted custom column expression
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetCustomColumnExpressionTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        String response = api.catalogGetCustomColumnExpression(storeId, columnId);

        // TODO: test validations
    }
    
    /**
     * Get custom column list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetCustomColumnsTest() throws ApiException {
        String storeId = null;
        CustomColumns response = api.catalogGetCustomColumns(storeId);

        // TODO: test validations
    }
    
    /**
     * Get product
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetProductTest() throws ApiException {
        String storeId = null;
        String productId = null;
        Product response = api.catalogGetProduct(storeId, productId);

        // TODO: test validations
    }
    
    /**
     * Get product list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetProductsTest() throws ApiException {
        String storeId = null;
        GetProductsRequest request = null;
        Products response = api.catalogGetProducts(storeId, request);

        // TODO: test validations
    }
    
    /**
     * Get random product list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetRandomProductsTest() throws ApiException {
        String storeId = null;
        Integer count = null;
        Products response = api.catalogGetRandomProducts(storeId, count);

        // TODO: test validations
    }
    
    /**
     * Create or replace a custom column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogSaveCustomColumnTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        CreateCustomColumnRequest request = null;
        api.catalogSaveCustomColumn(storeId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Change your marketplace Order Information (accept, ship, etc.)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeOrderTest() throws ApiException {
        String marketplaceTechnicalCode = null;
        Integer accountId = null;
        UUID beezUPOrderId = null;
        String changeOrderType = null;
        String userName = null;
        ChangeOrderRequest request = null;
        String ifMatch = null;
        Boolean testMode = null;
        api.changeOrder(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, request, ifMatch, testMode);

        // TODO: test validations
    }
    
    /**
     * Send a batch of operations to change your marketplace Order information (accept, ship, etc.)
     *
     * The purpose of this operation is to reduce the amount of request to the API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeOrderListTest() throws ApiException {
        String changeOrderType = null;
        String userName = null;
        ChangeOrderListRequest request = null;
        Boolean testMode = null;
        BatchOrderOperationResponse response = api.changeOrderList(changeOrderType, userName, request, testMode);

        // TODO: test validations
    }
    
    /**
     * Change user password
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changePasswordTest() throws ApiException {
        ChangePasswordRequest request = null;
        api.changePassword(request);

        // TODO: test validations
    }
    
    /**
     * Clear an Order&#39;s merchant information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clearMerchantOrderInfoTest() throws ApiException {
        String marketplaceTechnicalCode = null;
        Integer accountId = null;
        UUID beezUPOrderId = null;
        api.clearMerchantOrderInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);

        // TODO: test validations
    }
    
    /**
     * Send a batch of operations to clear an Order&#39;s merchant information
     *
     * The purpose of this operation is to reduce the amount of request to the API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clearMerchantOrderInfoListTest() throws ApiException {
        ClearMerchantOrderInfoListRequest request = null;
        BatchOrderOperationResponse response = api.clearMerchantOrderInfoList(request);

        // TODO: test validations
    }
    
    /**
     * Configure new or existing automatic Order status transition
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configureAutomaticTransitionsTest() throws ApiException {
        SaveAutomaticTransitionRequest request = null;
        api.configureAutomaticTransitions(request);

        // TODO: test validations
    }
    
    /**
     * Disable a channel catalog
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configureChannelCatalogCostSettingsTest() throws ApiException {
        String channelCatalogId = null;
        CostSettings request = null;
        api.configureChannelCatalogCostSettings(channelCatalogId, request);

        // TODO: test validations
    }
    
    /**
     * Configure channel catalog exclusion filters
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configureChannelCatalogExclusionFiltersTest() throws ApiException {
        String channelCatalogId = null;
        ExclusionFilters request = null;
        api.configureChannelCatalogExclusionFilters(channelCatalogId, request);

        // TODO: test validations
    }
    
    /**
     * Disable a channel catalog
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configureChannelCatalogGeneralSettingsTest() throws ApiException {
        String channelCatalogId = null;
        GeneralSettings request = null;
        api.configureChannelCatalogGeneralSettings(channelCatalogId, request);

        // TODO: test validations
    }
    
    /**
     * Create a new channel catalog
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChannelCatalogTest() throws ApiException {
        CreateChannelCatalogRequest request = null;
        List<BeezUPCommonLink2> response = api.createChannelCatalog(request);

        // TODO: test validations
    }
    
    /**
     * Create a new contract
     *
     * Now you are ready to create your contract. Before that, please ensure that you check the offer with the same request parameterts. /offers 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContractTest() throws ApiException {
        CreateContract request = null;
        BeezUPCommonInfoSummaries response = api.createContract(request);

        // TODO: test validations
    }
    
    /**
     * Rule creation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRuleTest() throws ApiException {
        String storeId = null;
        CreateRuleRequest request = null;
        api.createRule(storeId, request);

        // TODO: test validations
    }
    
    /**
     * Create a new store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStoreTest() throws ApiException {
        CreateStoreRequest request = null;
        LinksGetStoresLink response = api.createStore(request);

        // TODO: test validations
    }
    
    /**
     * Delete the channel catalog
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChannelCatalogTest() throws ApiException {
        api.deleteChannelCatalog();

        // TODO: test validations
    }
    
    /**
     * Delete a specific channel catalog product value override
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChannelCatalogProductValueOverrideTest() throws ApiException {
        String channelCatalogId = null;
        String productId = null;
        String channelColumnId = null;
        api.deleteChannelCatalogProductValueOverride(channelCatalogId, productId, channelColumnId);

        // TODO: test validations
    }
    
    /**
     * Delete your next contract
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNextContractTest() throws ApiException {
        api.deleteNextContract();

        // TODO: test validations
    }
    
    /**
     * Delete the report filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteReportFilterTest() throws ApiException {
        String storeId = null;
        String reportFilterId = null;
        api.deleteReportFilter(storeId, reportFilterId);

        // TODO: test validations
    }
    
    /**
     * Delete Rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRuleTest() throws ApiException {
        String storeId = null;
        String ruleId = null;
        api.deleteRule(storeId, ruleId);

        // TODO: test validations
    }
    
    /**
     * Delete a share to another user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShareTest() throws ApiException {
        String storeId = null;
        String userId = null;
        api.deleteShare(storeId, userId);

        // TODO: test validations
    }
    
    /**
     * Delete a store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStoreTest() throws ApiException {
        String storeId = null;
        api.deleteStore(storeId);

        // TODO: test validations
    }
    
    /**
     * Disable a channel catalog
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableChannelCatalogTest() throws ApiException {
        String channelCatalogId = null;
        api.disableChannelCatalog(channelCatalogId);

        // TODO: test validations
    }
    
    /**
     * Disable channel catalog product
     *
     * By default a all your catalog products are exposed to the channel. You can disable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableChannelCatalogProductTest() throws ApiException {
        String channelCatalogId = null;
        String productId = null;
        api.disableChannelCatalogProduct(channelCatalogId, productId);

        // TODO: test validations
    }
    
    /**
     * Disable rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableRuleTest() throws ApiException {
        String storeId = null;
        String ruleId = null;
        api.disableRule(storeId, ruleId);

        // TODO: test validations
    }
    
    /**
     * Enable a channel catalog
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableChannelCatalogTest() throws ApiException {
        String channelCatalogId = null;
        api.enableChannelCatalog(channelCatalogId);

        // TODO: test validations
    }
    
    /**
     * Enable rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableRuleTest() throws ApiException {
        String storeId = null;
        String ruleId = null;
        api.enableRule(storeId, ruleId);

        // TODO: test validations
    }
    
    /**
     * Request a new Order report exportation to be generated
     *
     * A new file will be generated containing a summary of all the Orders matching the requested filter settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportOrdersTest() throws ApiException {
        String format = null;
        ExportOrderListRequest request = null;
        api.exportOrders(format, request);

        // TODO: test validations
    }
    
    /**
     * Export the report by category
     *
     * Export the report by category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportStoreReportByCategoryTest() throws ApiException {
        String storeId = null;
        String format = null;
        ReportByCategoryRequest request = null;
        BeezUPCommonLink3 response = api.exportStoreReportByCategory(storeId, format, request);

        // TODO: test validations
    }
    
    /**
     * Export the report by channel
     *
     * Export the report by channel
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportStoreReportByChannelTest() throws ApiException {
        String storeId = null;
        String format = null;
        ReportByChannelRequest request = null;
        BeezUPCommonLink3 response = api.exportStoreReportByChannel(storeId, format, request);

        // TODO: test validations
    }
    
    /**
     * Export the report by product
     *
     * Export the report by product
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportStoreReportByProductTest() throws ApiException {
        String storeId = null;
        String format = null;
        ReportByProductRequest request = null;
        BeezUPCommonLink3 response = api.exportStoreReportByProduct(storeId, format, request);

        // TODO: test validations
    }
    
    /**
     * Get list of configured automatic Order status transitions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAutomaticTransitionsTest() throws ApiException {
        AutomaticTransitionInfos response = api.getAutomaticTransitions();

        // TODO: test validations
    }
    
    /**
     * List all available channel for this store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAvailableChannelsTest() throws ApiException {
        String storeId = null;
        List<ChannelHeader> response = api.getAvailableChannels(storeId);

        // TODO: test validations
    }
    
    /**
     * Get billing periods conditions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBillingPeriodsTest() throws ApiException {
        BillingPeriods response = api.getBillingPeriods();

        // TODO: test validations
    }
    
    /**
     * Get the channel catalog information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChannelCatalogTest() throws ApiException {
        String channelCatalogId = null;
        ChannelCatalog response = api.getChannelCatalog(channelCatalogId);

        // TODO: test validations
    }
    
    /**
     * Get channel catalog categories
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChannelCatalogCategoriesTest() throws ApiException {
        String channelCatalogId = null;
        ChannelCatalogCategoryMappings response = api.getChannelCatalogCategories(channelCatalogId);

        // TODO: test validations
    }
    
    /**
     * Get channel catalog exclusion filter operators
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChannelCatalogExclusionFilterOperatorsTest() throws ApiException {
        List<ExclusionFilterOperator> response = api.getChannelCatalogExclusionFilterOperators();

        // TODO: test validations
    }
    
    /**
     * Get the marketplace properties for a channel catalog
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChannelCatalogMarketplacePropertiesTest() throws ApiException {
        String channelCatalogId = null;
        ChannelCatalogMarketplaceProperties response = api.getChannelCatalogMarketplaceProperties(channelCatalogId);

        // TODO: test validations
    }
    
    /**
     * Get the marketplace settings for a channel catalog
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChannelCatalogMarketplaceSettingsTest() throws ApiException {
        String channelCatalogId = null;
        ChannelCatalogMarketplaceSettings response = api.getChannelCatalogMarketplaceSettings(channelCatalogId);

        // TODO: test validations
    }
    
    /**
     * Get channel catalog product information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChannelCatalogProductInfoTest() throws ApiException {
        String channelCatalogId = null;
        String productId = null;
        ChannelCatalogProductInfo response = api.getChannelCatalogProductInfo(channelCatalogId, productId);

        // TODO: test validations
    }
    
    /**
     * Get channel catalog product information list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChannelCatalogProductInfoListTest() throws ApiException {
        String channelCatalogId = null;
        GetChannelCatalogProductInfoListRequest request = null;
        ChannelCatalogProductInfoList response = api.getChannelCatalogProductInfoList(channelCatalogId, request);

        // TODO: test validations
    }
    
    /**
     * List all your current channel catalogs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChannelCatalogsTest() throws ApiException {
        String storeId = null;
        ChannelCatalogList response = api.getChannelCatalogs(storeId);

        // TODO: test validations
    }
    
    /**
     * Get channel categories
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChannelCategoriesTest() throws ApiException {
        String channelId = null;
        List<String> acceptEncoding = null;
        ChannelRootCategory response = api.getChannelCategories(channelId, acceptEncoding);

        // TODO: test validations
    }
    
    /**
     * Get channel columns
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChannelColumnsTest() throws ApiException {
        String channelId = null;
        List<String> acceptEncoding = null;
        List<BeezUPCommonChannelColumnId> request = null;
        List<ChannelColumn> response = api.getChannelColumns(channelId, acceptEncoding, request);

        // TODO: test validations
    }
    
    /**
     * Get channel information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChannelInfoTest() throws ApiException {
        String channelId = null;
        ChannelInfo response = api.getChannelInfo(channelId);

        // TODO: test validations
    }
    
    /**
     * Get contract list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContractsTest() throws ApiException {
        Contracts response = api.getContracts();

        // TODO: test validations
    }
    
    /**
     * Get credit card information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCreditCardInfoTest() throws ApiException {
        CreditCardInfoResponse response = api.getCreditCardInfo();

        // TODO: test validations
    }
    
    /**
     * Get friend information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFriendInfoTest() throws ApiException {
        String userId = null;
        UserFriendInfo response = api.getFriendInfo(userId);

        // TODO: test validations
    }
    
    /**
     * Get all your invoices
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInvoicesTest() throws ApiException {
        Invoices response = api.getInvoices();

        // TODO: test validations
    }
    
    /**
     * Get  you marketplace channel catalog list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMarketplaceAccountStoresTest() throws ApiException {
        MarketplaceChannelCatalogList response = api.getMarketplaceAccountStores();

        // TODO: test validations
    }
    
    /**
     * Get current synchronization status between your marketplaces and BeezUP accounts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMarketplaceAccountsSynchronizationTest() throws ApiException {
        AccountSynchronizations response = api.getMarketplaceAccountsSynchronization();

        // TODO: test validations
    }
    
    /**
     * Get offer pricing
     *
     * Get the offer pricing then you can create your contract with the same request parameters. /v2/user/customer/contracts 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOfferTest() throws ApiException {
        OfferRequest request = null;
        Offer response = api.getOffer(request);

        // TODO: test validations
    }
    
    /**
     * Get full Order and Order Item(s) properties
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderTest() throws ApiException {
        String marketplaceTechnicalCode = null;
        Integer accountId = null;
        UUID beezUPOrderId = null;
        String ifNoneMatch = null;
        Order response = api.getOrder(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Get a paginated list of Order report exportations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderExportationsTest() throws ApiException {
        Integer pageNumber = null;
        Integer pageSize = null;
        String storeId = null;
        OrderExportations response = api.getOrderExportations(pageNumber, pageSize, storeId);

        // TODO: test validations
    }
    
    /**
     * Get an Order&#39;s harvest and change history
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderHistoryTest() throws ApiException {
        String marketplaceTechnicalCode = null;
        Integer accountId = null;
        UUID beezUPOrderId = null;
        OrderHistory response = api.getOrderHistory(marketplaceTechnicalCode, accountId, beezUPOrderId);

        // TODO: test validations
    }
    
    /**
     * Get a paginated list of all Orders with all Order and Order Item(s) properties
     *
     * The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderListFullTest() throws ApiException {
        List<String> acceptEncoding = null;
        OrderListRequest request = null;
        OrderListFull response = api.getOrderListFull(acceptEncoding, request);

        // TODO: test validations
    }
    
    /**
     * Get a paginated list of all Orders without details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderListLightTest() throws ApiException {
        OrderListRequest request = null;
        OrderListLight response = api.getOrderListLight(request);

        // TODO: test validations
    }
    
    /**
     * Get profile picture information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProfilePictureInfoTest() throws ApiException {
        ProfilePictureInfoResponse response = api.getProfilePictureInfo();

        // TODO: test validations
    }
    
    /**
     * Fetch the publication history for an account, sorted by descending start date
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPublicationsTest() throws ApiException {
        String marketplaceTechnicalCode = null;
        Integer accountId = null;
        String channelCatalogId = null;
        Integer count = null;
        List<String> publicationTypes = null;
        AccountPublications response = api.getPublications(marketplaceTechnicalCode, accountId, channelCatalogId, count, publicationTypes);

        // TODO: test validations
    }
    
    /**
     * Get the report filter description
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportFilterTest() throws ApiException {
        String storeId = null;
        String reportFilterId = null;
        ReportFilter response = api.getReportFilter(storeId, reportFilterId);

        // TODO: test validations
    }
    
    /**
     * Get report filter list for the given store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportFiltersTest() throws ApiException {
        String storeId = null;
        ReportFilters response = api.getReportFilters(storeId);

        // TODO: test validations
    }
    
    /**
     * Get store&#39;s rights
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRightsTest() throws ApiException {
        String storeId = null;
        List<String> functionalityCodeList = null;
        List<FunctionalityRightInfo> response = api.getRights(storeId, functionalityCodeList);

        // TODO: test validations
    }
    
    /**
     * Gets the rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRuleTest() throws ApiException {
        String storeId = null;
        String ruleId = null;
        Rule response = api.getRule(storeId, ruleId);

        // TODO: test validations
    }
    
    /**
     * Gets the list of rules for a given store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRulesTest() throws ApiException {
        String storeId = null;
        RuleList response = api.getRules(storeId);

        // TODO: test validations
    }
    
    /**
     * Get the rules execution history
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRulesExecutionsTest() throws ApiException {
        String storeId = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        RuleExecutionReportings response = api.getRulesExecutions(storeId, pageNumber, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get shares related to this store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSharesTest() throws ApiException {
        String storeId = null;
        StoreShares response = api.getShares(storeId);

        // TODO: test validations
    }
    
    /**
     * Get all standard offers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStandardOffersTest() throws ApiException {
        StandardOffers response = api.getStandardOffers();

        // TODO: test validations
    }
    
    /**
     * Get store&#39;s information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreTest() throws ApiException {
        String storeId = null;
        StoreHeader response = api.getStore(storeId);

        // TODO: test validations
    }
    
    /**
     * Get store&#39;s alerts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreAlertsTest() throws ApiException {
        String storeId = null;
        StoreAlerts response = api.getStoreAlerts(storeId);

        // TODO: test validations
    }
    
    /**
     * Get the report by category
     *
     * Get the report by category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreReportByCategoryTest() throws ApiException {
        String storeId = null;
        ReportByCategoryRequest request = null;
        ReportByCategoryResponse response = api.getStoreReportByCategory(storeId, request);

        // TODO: test validations
    }
    
    /**
     * Get the report by channel
     *
     * Get the report by channel
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreReportByChannelTest() throws ApiException {
        String storeId = null;
        ReportByChannelRequest request = null;
        ReportByChannelResponse response = api.getStoreReportByChannel(storeId, request);

        // TODO: test validations
    }
    
    /**
     * Get the report by day
     *
     * Get the report by day
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreReportByDayTest() throws ApiException {
        String storeId = null;
        ReportByDayRequest request = null;
        ReportByDayResponse response = api.getStoreReportByDay(storeId, request);

        // TODO: test validations
    }
    
    /**
     * Get the report by day
     *
     * Get the report by day
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreReportByDayExportTest() throws ApiException {
        String storeId = null;
        String format = null;
        ReportByDayRequest request = null;
        BeezUPCommonLink3 response = api.getStoreReportByDayExport(storeId, format, request);

        // TODO: test validations
    }
    
    /**
     * Get the report by product
     *
     * Get the report by product
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreReportByProductTest() throws ApiException {
        String storeId = null;
        ReportByProductRequest request = null;
        ReportByProductResponse response = api.getStoreReportByProduct(storeId, request);

        // TODO: test validations
    }
    
    /**
     * Get the latest clicks tracked
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreTrackedClicksTest() throws ApiException {
        String storeId = null;
        Integer count = null;
        TrackedClicks response = api.getStoreTrackedClicks(storeId, count);

        // TODO: test validations
    }
    
    /**
     * Get the latest external orders tracked
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreTrackedExternalOrdersTest() throws ApiException {
        String storeId = null;
        Integer count = null;
        TrackedExternalOrders response = api.getStoreTrackedExternalOrders(storeId, count);

        // TODO: test validations
    }
    
    /**
     * Get the latest orders tracked
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreTrackedOrdersTest() throws ApiException {
        String storeId = null;
        Integer count = null;
        TrackedOrders response = api.getStoreTrackedOrders(storeId, count);

        // TODO: test validations
    }
    
    /**
     * Get store tracking synchronization status
     *
     * Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreTrackingStatusTest() throws ApiException {
        String storeId = null;
        StoreTrackingStatus response = api.getStoreTrackingStatus(storeId);

        // TODO: test validations
    }
    
    /**
     * Get store list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoresTest() throws ApiException {
        Stores response = api.getStores();

        // TODO: test validations
    }
    
    /**
     * Display the synchronization status of the clicks and orders
     *
     * Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTrackingStatusTest() throws ApiException {
        TrackingStatus response = api.getTrackingStatus();

        // TODO: test validations
    }
    
    /**
     * Get user account information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserAccountInfoTest() throws ApiException {
        AccountInfo response = api.getUserAccountInfo();

        // TODO: test validations
    }
    
    /**
     * Get list of values related to this group name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserListGroupTest() throws ApiException {
        String listGroupName = null;
        List<BeezUPCommonLOVLink2> response = api.getUserListGroup(listGroupName);

        // TODO: test validations
    }
    
    /**
     * Get list of group of list name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserListGroupNamesTest() throws ApiException {
        List<BeezUPCommonLOVLink2> response = api.getUserListGroupNames();

        // TODO: test validations
    }
    
    /**
     * Get all list names
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserListNamesTest() throws ApiException {
        List<BeezUPCommonLOVLink2> response = api.getUserListNames();

        // TODO: test validations
    }
    
    /**
     * Get the list of values related to this list name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserListOfValuesTest() throws ApiException {
        String listName = null;
        List<String> acceptLanguage = null;
        List<BeezUPCommonListOfValueItem> response = api.getUserListOfValues(listName, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Send harvest request to all your marketplaces
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void harvestAllTest() throws ApiException {
        api.harvestAll();

        // TODO: test validations
    }
    
    /**
     * Send harvest request for a single Order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void harvestOrderTest() throws ApiException {
        String marketplaceTechnicalCode = null;
        Integer accountId = null;
        UUID beezUPOrderId = null;
        api.harvestOrder(marketplaceTechnicalCode, accountId, beezUPOrderId);

        // TODO: test validations
    }
    
    /**
     * Activate the auto importation of the last successful manual catalog importation.
     *
     * Once you have made your fist manual catalog importation with success, you can call this operation to import it automatically. No parameter required, we know which one it is.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationActivateAutoImportTest() throws ApiException {
        String storeId = null;
        api.importationActivateAutoImport(storeId);

        // TODO: test validations
    }
    
    /**
     * Cancel importation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationCancelTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        api.importationCancel(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Commit Importation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationCommitTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        api.importationCommit(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Commit columns
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationCommitColumnsTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        api.importationCommitColumns(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Configure catalog column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationConfigureCatalogColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        ConfigureCatalogColumnCatalogRequest request = null;
        api.importationConfigureCatalogColumn(storeId, executionId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Configure remaining catalog columns
     *
     * This operation should be used after you have mapped the required BeezUP Columns
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationConfigureRemainingCatalogColumnsTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        api.importationConfigureRemainingCatalogColumns(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Delete Custom Column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationDeleteCustomColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        api.importationDeleteCustomColumn(storeId, executionId, columnId);

        // TODO: test validations
    }
    
    /**
     * Get the encrypted custom column expression in this importation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetCustomColumnExpressionTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        String response = api.importationGetCustomColumnExpression(storeId, executionId, columnId);

        // TODO: test validations
    }
    
    /**
     * Get custom columns currently place in this importation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetCustomColumnsTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        CustomColumns response = api.importationGetCustomColumns(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Get detected catalog columns during this importation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetDetectedCatalogColumnsTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        DetectedCatalogColumns response = api.importationGetDetectedCatalogColumns(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Get the importation status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetImportationMonitoringTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        ImportationMonitoring response = api.importationGetImportationMonitoring(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Get the last input configuration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetManualUpdateLastInputConfigTest() throws ApiException {
        String storeId = null;
        LastManualImportInputConfiguration response = api.importationGetManualUpdateLastInputConfig(storeId);

        // TODO: test validations
    }
    
    /**
     * Get the product sample related to this importation with all columns (catalog and custom)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetProductSampleTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        Integer productSampleIndex = null;
        ProductSample response = api.importationGetProductSample(storeId, executionId, productSampleIndex);

        // TODO: test validations
    }
    
    /**
     * Get product sample custom column value related to this importation.
     *
     * /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetProductSampleCustomColumnValueTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        Integer productSampleIndex = null;
        String columnId = null;
        String response = api.importationGetProductSampleCustomColumnValue(storeId, executionId, productSampleIndex, columnId);

        // TODO: test validations
    }
    
    /**
     * Get the latest catalog importation reporting
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetReportingsTest() throws ApiException {
        String storeId = null;
        List<ImportationReporting> response = api.importationGetReportings(storeId);

        // TODO: test validations
    }
    
    /**
     * Ignore Column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationIgnoreColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        api.importationIgnoreColumn(storeId, executionId, columnId);

        // TODO: test validations
    }
    
    /**
     * Map catalog column to a BeezUP column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationMapCatalogColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        MapBeezUPColumnRequest request = null;
        api.importationMapCatalogColumn(storeId, executionId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Map custom column to a BeezUP column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationMapCustomColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        MapBeezUPColumnRequest request = null;
        api.importationMapCustomColumn(storeId, executionId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Reattend Column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationReattendColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        api.importationReattendColumn(storeId, executionId, columnId);

        // TODO: test validations
    }
    
    /**
     * Create or replace a custom column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationSaveCustomColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        ChangeCustomColumnRequest request = null;
        api.importationSaveCustomColumn(storeId, executionId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Start Manual Import
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationStartManualUpdateTest() throws ApiException {
        String storeId = null;
        StartManualImportRequest request = null;
        List<BeezUPCommonLink2> response = api.importationStartManualUpdate(storeId, request);

        // TODO: test validations
    }
    
    /**
     * Get technical progression
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationTechnicalProgressionTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        ImportationTechnicalProgression response = api.importationTechnicalProgression(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Unmap catalog column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationUnmapCatalogColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        api.importationUnmapCatalogColumn(storeId, executionId, columnId);

        // TODO: test validations
    }
    
    /**
     * Unmap custom column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationUnmapCustomColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        api.importationUnmapCustomColumn(storeId, executionId, columnId);

        // TODO: test validations
    }
    
    /**
     * Log out the current user from go2
     *
     * Log out the current user from go2
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logoutTest() throws ApiException {
        api.logout();

        // TODO: test validations
    }
    
    /**
     * Map channel catalog category
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mapChannelCatalogCategoryTest() throws ApiException {
        String channelCatalogId = null;
        MapCategoryRequest request = null;
        api.mapChannelCatalogCategory(channelCatalogId, request);

        // TODO: test validations
    }
    
    /**
     * Configure channel catalog column mappings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mapChannelCatalogColumnsTest() throws ApiException {
        String channelCatalogId = null;
        ColumnMappingList request = null;
        api.mapChannelCatalogColumns(channelCatalogId, request);

        // TODO: test validations
    }
    
    /**
     * Move the rule down
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveDownRuleTest() throws ApiException {
        String storeId = null;
        String ruleId = null;
        api.moveDownRule(storeId, ruleId);

        // TODO: test validations
    }
    
    /**
     * Move the rule up
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveUpRuleTest() throws ApiException {
        String storeId = null;
        String ruleId = null;
        api.moveUpRule(storeId, ruleId);

        // TODO: test validations
    }
    
    /**
     * Optimise products
     *
     * /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void optimiseTest() throws ApiException {
        String storeId = null;
        String actionName = null;
        OptimiseRequest request = null;
        api.optimise(storeId, actionName, request);

        // TODO: test validations
    }
    
    /**
     * Optimise products&#39;s category
     *
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void optimiseByCategoryTest() throws ApiException {
        String storeId = null;
        String catalogCategoryId = null;
        String actionName = null;
        List<String> request = null;
        api.optimiseByCategory(storeId, catalogCategoryId, actionName, request);

        // TODO: test validations
    }
    
    /**
     * Optimise products&#39;s category
     *
     * /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void optimiseByChannelTest() throws ApiException {
        String storeId = null;
        String channelId = null;
        String actionName = null;
        api.optimiseByChannel(storeId, channelId, actionName);

        // TODO: test validations
    }
    
    /**
     * Optimise products
     *
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void optimiseByProductTest() throws ApiException {
        String storeId = null;
        String productId = null;
        String actionName = null;
        List<String> request = null;
        api.optimiseByProduct(storeId, productId, actionName, request);

        // TODO: test validations
    }
    
    /**
     * Override channel catalog product values
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void overrideChannelCatalogProductOverridesTest() throws ApiException {
        String channelCatalogId = null;
        String productId = null;
        ProductOverrides request = null;
        api.overrideChannelCatalogProductOverrides(channelCatalogId, productId, request);

        // TODO: test validations
    }
    
    /**
     * Reactivate your terminated contract.
     *
     * By calling this operation you can re-enable the auto renewal.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reactivateCurrentContractTest() throws ApiException {
        api.reactivateCurrentContract();

        // TODO: test validations
    }
    
    /**
     * Reenable channel catalog product
     *
     * By default a all your catalog products are exposed to the channel. You can reenable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reenableChannelCatalogProductTest() throws ApiException {
        String channelCatalogId = null;
        String productId = null;
        api.reenableChannelCatalogProduct(channelCatalogId, productId);

        // TODO: test validations
    }
    
    /**
     * Resend email activation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resendEmailActivationTest() throws ApiException {
        api.resendEmailActivation();

        // TODO: test validations
    }
    
    /**
     * Run rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runRuleTest() throws ApiException {
        String storeId = null;
        String ruleId = null;
        api.runRule(storeId, ruleId);

        // TODO: test validations
    }
    
    /**
     * Run all rules for this store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runRulesTest() throws ApiException {
        String storeId = null;
        api.runRules(storeId);

        // TODO: test validations
    }
    
    /**
     * Change company information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveCompanyInfoTest() throws ApiException {
        CompanyInfo request = null;
        api.saveCompanyInfo(request);

        // TODO: test validations
    }
    
    /**
     * Save user credit card info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveCreditCardInfoTest() throws ApiException {
        CreditCardInfo request = null;
        api.saveCreditCardInfo(request);

        // TODO: test validations
    }
    
    /**
     * Save user personal information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePersonalInfoTest() throws ApiException {
        PersonalInfo request = null;
        api.savePersonalInfo(request);

        // TODO: test validations
    }
    
    /**
     * Change user picture information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveProfilePictureInfoTest() throws ApiException {
        ProfilePictureInfo request = null;
        api.saveProfilePictureInfo(request);

        // TODO: test validations
    }
    
    /**
     * Save the report filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveReportFilterTest() throws ApiException {
        String storeId = null;
        String reportFilterId = null;
        SaveReportFilterRequest reportFilter = null;
        api.saveReportFilter(storeId, reportFilterId, reportFilter);

        // TODO: test validations
    }
    
    /**
     * Save store alert
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveStoreAlertTest() throws ApiException {
        String storeId = null;
        Integer alertId = null;
        List<SaveStoreAlertRequest> request = null;
        api.saveStoreAlert(storeId, alertId, request);

        // TODO: test validations
    }
    
    /**
     * Save new marketplace settings for a channel catalog
     *
     * Allow you to configure your marketplace settings.  Partial update accepted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChannelCatalogMarketplaceSettingsTest() throws ApiException {
        String channelCatalogId = null;
        SetChannelCatalogMarketplaceSettingsRequest model = null;
        api.setChannelCatalogMarketplaceSettings(channelCatalogId, model);

        // TODO: test validations
    }
    
    /**
     * Set an Order&#39;s merchant information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setMerchantOrderInfoTest() throws ApiException {
        String marketplaceTechnicalCode = null;
        Integer accountId = null;
        UUID beezUPOrderId = null;
        SetMerchantOrderInfoRequest request = null;
        api.setMerchantOrderInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, request);

        // TODO: test validations
    }
    
    /**
     * Send a batch of operations to set an Order&#39;s merchant information
     *
     * The purpose of this operation is to reduce the amount of request to the API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setMerchantOrderInfoListTest() throws ApiException {
        SetMerchantOrderInfoListRequest request = null;
        BatchOrderOperationResponse response = api.setMerchantOrderInfoList(request);

        // TODO: test validations
    }
    
    /**
     * Share a store to another user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shareTest() throws ApiException {
        String storeId = null;
        FriendEmail email = null;
        api.share(storeId, email);

        // TODO: test validations
    }
    
    /**
     * Schedule termination of your current contract at the end of the commitment.
     *
     * By default your contract are automatically renew. By calling this operation you can disable the auto renewal.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void terminateCurrentContractTest() throws ApiException {
        TerminateContract request = null;
        api.terminateCurrentContract(request);

        // TODO: test validations
    }
    
    /**
     * Unmap channel catalog category
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unmapChannelCatalogCategoryTest() throws ApiException {
        String channelCatalogId = null;
        UnmapCategoryRequest request = null;
        api.unmapChannelCatalogCategory(channelCatalogId, request);

        // TODO: test validations
    }
    
    /**
     * Update Rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRuleTest() throws ApiException {
        String storeId = null;
        String ruleId = null;
        UpdateRuleRequest request = null;
        api.updateRule(storeId, ruleId, request);

        // TODO: test validations
    }
    
    /**
     * Update some store&#39;s information.
     *
     * Update some store&#39;s information. FYI, you cannot change the country. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStoreTest() throws ApiException {
        String storeId = null;
        UpdateStoreRequest request = null;
        api.updateStore(storeId, request);

        // TODO: test validations
    }
    
}
