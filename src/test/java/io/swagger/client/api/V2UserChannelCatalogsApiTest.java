/*
 * BeezUP API
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BeezUPCommonLink2;
import io.swagger.client.model.ChannelCatalog;
import io.swagger.client.model.ChannelCatalogCategoryMappings;
import io.swagger.client.model.ChannelCatalogList;
import io.swagger.client.model.ChannelCatalogProductInfo;
import io.swagger.client.model.ChannelCatalogProductInfoList;
import io.swagger.client.model.ColumnMappingList;
import io.swagger.client.model.CostSettings;
import io.swagger.client.model.CreateChannelCatalogRequest;
import io.swagger.client.model.ExclusionFilterOperator;
import io.swagger.client.model.ExclusionFilters;
import io.swagger.client.model.GeneralSettings;
import io.swagger.client.model.GetChannelCatalogProductInfoListRequest;
import io.swagger.client.model.MapCategoryRequest;
import io.swagger.client.model.ProductOverrides;
import io.swagger.client.model.UnmapCategoryRequest;
import io.swagger.client.model.UpgradeOfferRequired;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for V2UserChannelCatalogsApi
 */
@Ignore
public class V2UserChannelCatalogsApiTest {

    private final V2UserChannelCatalogsApi api = new V2UserChannelCatalogsApi();

    
    /**
     * Disable a channel catalog
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configureChannelCatalogCostSettingsTest() throws ApiException {
        String channelCatalogId = null;
        CostSettings request = null;
        api.configureChannelCatalogCostSettings(channelCatalogId, request);

        // TODO: test validations
    }
    
    /**
     * Configure channel catalog exclusion filters
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configureChannelCatalogExclusionFiltersTest() throws ApiException {
        String channelCatalogId = null;
        ExclusionFilters request = null;
        api.configureChannelCatalogExclusionFilters(channelCatalogId, request);

        // TODO: test validations
    }
    
    /**
     * Disable a channel catalog
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configureChannelCatalogGeneralSettingsTest() throws ApiException {
        String channelCatalogId = null;
        GeneralSettings request = null;
        api.configureChannelCatalogGeneralSettings(channelCatalogId, request);

        // TODO: test validations
    }
    
    /**
     * Create a new channel catalog
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChannelCatalogTest() throws ApiException {
        CreateChannelCatalogRequest request = null;
        List<BeezUPCommonLink2> response = api.createChannelCatalog(request);

        // TODO: test validations
    }
    
    /**
     * Delete the channel catalog
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChannelCatalogTest() throws ApiException {
        api.deleteChannelCatalog();

        // TODO: test validations
    }
    
    /**
     * Delete a specific channel catalog product value override
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChannelCatalogProductValueOverrideTest() throws ApiException {
        String channelCatalogId = null;
        String productId = null;
        String channelColumnId = null;
        api.deleteChannelCatalogProductValueOverride(channelCatalogId, productId, channelColumnId);

        // TODO: test validations
    }
    
    /**
     * Disable a channel catalog
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableChannelCatalogTest() throws ApiException {
        String channelCatalogId = null;
        api.disableChannelCatalog(channelCatalogId);

        // TODO: test validations
    }
    
    /**
     * Disable channel catalog product
     *
     * By default a all your catalog products are exposed to the channel. You can disable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableChannelCatalogProductTest() throws ApiException {
        String channelCatalogId = null;
        String productId = null;
        api.disableChannelCatalogProduct(channelCatalogId, productId);

        // TODO: test validations
    }
    
    /**
     * Enable a channel catalog
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableChannelCatalogTest() throws ApiException {
        String channelCatalogId = null;
        api.enableChannelCatalog(channelCatalogId);

        // TODO: test validations
    }
    
    /**
     * Get the channel catalog information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChannelCatalogTest() throws ApiException {
        String channelCatalogId = null;
        ChannelCatalog response = api.getChannelCatalog(channelCatalogId);

        // TODO: test validations
    }
    
    /**
     * Get channel catalog categories
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChannelCatalogCategoriesTest() throws ApiException {
        String channelCatalogId = null;
        ChannelCatalogCategoryMappings response = api.getChannelCatalogCategories(channelCatalogId);

        // TODO: test validations
    }
    
    /**
     * Get channel catalog exclusion filter operators
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChannelCatalogExclusionFilterOperatorsTest() throws ApiException {
        List<ExclusionFilterOperator> response = api.getChannelCatalogExclusionFilterOperators();

        // TODO: test validations
    }
    
    /**
     * Get channel catalog product information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChannelCatalogProductInfoTest() throws ApiException {
        String channelCatalogId = null;
        String productId = null;
        ChannelCatalogProductInfo response = api.getChannelCatalogProductInfo(channelCatalogId, productId);

        // TODO: test validations
    }
    
    /**
     * Get channel catalog product information list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChannelCatalogProductInfoListTest() throws ApiException {
        String channelCatalogId = null;
        GetChannelCatalogProductInfoListRequest request = null;
        ChannelCatalogProductInfoList response = api.getChannelCatalogProductInfoList(channelCatalogId, request);

        // TODO: test validations
    }
    
    /**
     * List all your current channel catalogs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChannelCatalogsTest() throws ApiException {
        String storeId = null;
        ChannelCatalogList response = api.getChannelCatalogs(storeId);

        // TODO: test validations
    }
    
    /**
     * Map channel catalog category
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mapChannelCatalogCategoryTest() throws ApiException {
        String channelCatalogId = null;
        MapCategoryRequest request = null;
        api.mapChannelCatalogCategory(channelCatalogId, request);

        // TODO: test validations
    }
    
    /**
     * Configure channel catalog column mappings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mapChannelCatalogColumnsTest() throws ApiException {
        String channelCatalogId = null;
        ColumnMappingList request = null;
        api.mapChannelCatalogColumns(channelCatalogId, request);

        // TODO: test validations
    }
    
    /**
     * Override channel catalog product values
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void overrideChannelCatalogProductOverridesTest() throws ApiException {
        String channelCatalogId = null;
        String productId = null;
        ProductOverrides request = null;
        api.overrideChannelCatalogProductOverrides(channelCatalogId, productId, request);

        // TODO: test validations
    }
    
    /**
     * Reenable channel catalog product
     *
     * By default a all your catalog products are exposed to the channel. You can reenable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reenableChannelCatalogProductTest() throws ApiException {
        String channelCatalogId = null;
        String productId = null;
        api.reenableChannelCatalogProduct(channelCatalogId, productId);

        // TODO: test validations
    }
    
    /**
     * Unmap channel catalog category
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unmapChannelCatalogCategoryTest() throws ApiException {
        String channelCatalogId = null;
        UnmapCategoryRequest request = null;
        api.unmapChannelCatalogCategory(channelCatalogId, request);

        // TODO: test validations
    }
    
}
