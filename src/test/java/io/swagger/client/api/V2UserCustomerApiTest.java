/*
 * BeezUP API
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AccountInfo;
import io.swagger.client.model.BeezUPCommonErrorResponseMessage;
import io.swagger.client.model.BeezUPCommonInfoSummaries;
import io.swagger.client.model.BillingPeriods;
import io.swagger.client.model.ChangePasswordRequest;
import io.swagger.client.model.CompanyInfo;
import io.swagger.client.model.Contracts;
import io.swagger.client.model.CreateContract;
import io.swagger.client.model.CreateStoreRequest;
import io.swagger.client.model.CreditCardInfo;
import io.swagger.client.model.CreditCardInfoResponse;
import io.swagger.client.model.FriendEmail;
import io.swagger.client.model.FunctionalityRightInfo;
import io.swagger.client.model.Invoices;
import io.swagger.client.model.LinksGetStoresLink;
import io.swagger.client.model.Offer;
import io.swagger.client.model.OfferRequest;
import io.swagger.client.model.PersonalInfo;
import io.swagger.client.model.ProfilePictureInfo;
import io.swagger.client.model.SaveStoreAlertRequest;
import io.swagger.client.model.StandardOffers;
import io.swagger.client.model.StoreAlerts;
import io.swagger.client.model.StoreHeader;
import io.swagger.client.model.StoreShares;
import io.swagger.client.model.Stores;
import io.swagger.client.model.TerminateContract;
import io.swagger.client.model.UpdateStoreRequest;
import io.swagger.client.model.UserFriendInfo;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for V2UserCustomerApi
 */
@Ignore
public class V2UserCustomerApiTest {

    private final V2UserCustomerApi api = new V2UserCustomerApi();

    
    /**
     * Activate the user account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activateUserAccountTest() throws ApiException {
        String emailActivationId = null;
        api.activateUserAccount(emailActivationId);

        // TODO: test validations
    }
    
    /**
     * Change user password
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changePasswordTest() throws ApiException {
        ChangePasswordRequest request = null;
        api.changePassword(request);

        // TODO: test validations
    }
    
    /**
     * Create a new contract
     *
     * Now you are ready to create your contract. Before that, please ensure that you check the offer with the same request parameterts. /offers 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContractTest() throws ApiException {
        CreateContract request = null;
        BeezUPCommonInfoSummaries response = api.createContract(request);

        // TODO: test validations
    }
    
    /**
     * Create a new store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStoreTest() throws ApiException {
        CreateStoreRequest request = null;
        LinksGetStoresLink response = api.createStore(request);

        // TODO: test validations
    }
    
    /**
     * Delete your next contract
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNextContractTest() throws ApiException {
        api.deleteNextContract();

        // TODO: test validations
    }
    
    /**
     * Delete a share to another user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShareTest() throws ApiException {
        String storeId = null;
        String userId = null;
        api.deleteShare(storeId, userId);

        // TODO: test validations
    }
    
    /**
     * Delete a store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStoreTest() throws ApiException {
        String storeId = null;
        api.deleteStore(storeId);

        // TODO: test validations
    }
    
    /**
     * Get billing periods conditions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBillingPeriodsTest() throws ApiException {
        BillingPeriods response = api.getBillingPeriods();

        // TODO: test validations
    }
    
    /**
     * Get contract list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContractsTest() throws ApiException {
        Contracts response = api.getContracts();

        // TODO: test validations
    }
    
    /**
     * Get credit card information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCreditCardInfoTest() throws ApiException {
        CreditCardInfoResponse response = api.getCreditCardInfo();

        // TODO: test validations
    }
    
    /**
     * Get friend information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFriendInfoTest() throws ApiException {
        String userId = null;
        UserFriendInfo response = api.getFriendInfo(userId);

        // TODO: test validations
    }
    
    /**
     * Get all your invoices
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInvoicesTest() throws ApiException {
        Invoices response = api.getInvoices();

        // TODO: test validations
    }
    
    /**
     * Get offer pricing
     *
     * Get the offer pricing then you can create your contract with the same request parameters. /v2/user/customer/contracts 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOfferTest() throws ApiException {
        OfferRequest request = null;
        Offer response = api.getOffer(request);

        // TODO: test validations
    }
    
    /**
     * Get store&#39;s rights
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRightsTest() throws ApiException {
        String storeId = null;
        List<String> functionalityCodeList = null;
        List<FunctionalityRightInfo> response = api.getRights(storeId, functionalityCodeList);

        // TODO: test validations
    }
    
    /**
     * Get shares related to this store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSharesTest() throws ApiException {
        String storeId = null;
        StoreShares response = api.getShares(storeId);

        // TODO: test validations
    }
    
    /**
     * Get all standard offers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStandardOffersTest() throws ApiException {
        StandardOffers response = api.getStandardOffers();

        // TODO: test validations
    }
    
    /**
     * Get store&#39;s information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreTest() throws ApiException {
        String storeId = null;
        StoreHeader response = api.getStore(storeId);

        // TODO: test validations
    }
    
    /**
     * Get store&#39;s alerts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreAlertsTest() throws ApiException {
        String storeId = null;
        StoreAlerts response = api.getStoreAlerts(storeId);

        // TODO: test validations
    }
    
    /**
     * Get store list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoresTest() throws ApiException {
        Stores response = api.getStores();

        // TODO: test validations
    }
    
    /**
     * Get user account information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserAccountInfoTest() throws ApiException {
        AccountInfo response = api.getUserAccountInfo();

        // TODO: test validations
    }
    
    /**
     * Log out the current user from go2
     *
     * Log out the current user from go2
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logoutTest() throws ApiException {
        api.logout();

        // TODO: test validations
    }
    
    /**
     * Reactivate your terminated contract.
     *
     * By calling this operation you can re-enable the auto renewal.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reactivateCurrentContractTest() throws ApiException {
        api.reactivateCurrentContract();

        // TODO: test validations
    }
    
    /**
     * Resend email activation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resendEmailActivationTest() throws ApiException {
        api.resendEmailActivation();

        // TODO: test validations
    }
    
    /**
     * Change company information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveCompanyInfoTest() throws ApiException {
        CompanyInfo request = null;
        api.saveCompanyInfo(request);

        // TODO: test validations
    }
    
    /**
     * Save user credit card info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveCreditCardInfoTest() throws ApiException {
        CreditCardInfo request = null;
        api.saveCreditCardInfo(request);

        // TODO: test validations
    }
    
    /**
     * Save user personal information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePersonalInfoTest() throws ApiException {
        PersonalInfo request = null;
        api.savePersonalInfo(request);

        // TODO: test validations
    }
    
    /**
     * Change user picture information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveProfilePictureInfoTest() throws ApiException {
        ProfilePictureInfo request = null;
        api.saveProfilePictureInfo(request);

        // TODO: test validations
    }
    
    /**
     * Save store alert
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveStoreAlertTest() throws ApiException {
        String storeId = null;
        Integer alertId = null;
        List<SaveStoreAlertRequest> request = null;
        api.saveStoreAlert(storeId, alertId, request);

        // TODO: test validations
    }
    
    /**
     * Share a store to another user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shareTest() throws ApiException {
        String storeId = null;
        FriendEmail email = null;
        api.share(storeId, email);

        // TODO: test validations
    }
    
    /**
     * Schedule termination of your current contract at the end of the commitment.
     *
     * By default your contract are automatically renew. By calling this operation you can disable the auto renewal.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void terminateCurrentContractTest() throws ApiException {
        TerminateContract request = null;
        api.terminateCurrentContract(request);

        // TODO: test validations
    }
    
    /**
     * Update some store&#39;s information.
     *
     * Update some store&#39;s information. FYI, you cannot change the country. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStoreTest() throws ApiException {
        String storeId = null;
        UpdateStoreRequest request = null;
        api.updateStore(storeId, request);

        // TODO: test validations
    }
    
}
