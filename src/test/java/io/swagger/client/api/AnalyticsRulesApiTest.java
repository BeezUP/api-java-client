/*
 * BeezUP API
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BeezUPCommonErrorResponseMessage;
import io.swagger.client.model.CreateRuleRequest;
import io.swagger.client.model.Rule;
import io.swagger.client.model.RuleExecutionReportings;
import io.swagger.client.model.RuleList;
import io.swagger.client.model.UpdateRuleRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnalyticsRulesApi
 */
@Ignore
public class AnalyticsRulesApiTest {

    private final AnalyticsRulesApi api = new AnalyticsRulesApi();

    
    /**
     * Rule creation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRuleTest() throws ApiException {
        String storeId = null;
        CreateRuleRequest request = null;
        api.createRule(storeId, request);

        // TODO: test validations
    }
    
    /**
     * Delete Rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRuleTest() throws ApiException {
        String storeId = null;
        String ruleId = null;
        api.deleteRule(storeId, ruleId);

        // TODO: test validations
    }
    
    /**
     * Disable rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableRuleTest() throws ApiException {
        String storeId = null;
        String ruleId = null;
        api.disableRule(storeId, ruleId);

        // TODO: test validations
    }
    
    /**
     * Enable rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableRuleTest() throws ApiException {
        String storeId = null;
        String ruleId = null;
        api.enableRule(storeId, ruleId);

        // TODO: test validations
    }
    
    /**
     * Gets the rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRuleTest() throws ApiException {
        String storeId = null;
        String ruleId = null;
        Rule response = api.getRule(storeId, ruleId);

        // TODO: test validations
    }
    
    /**
     * Gets the list of rules for a given store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRulesTest() throws ApiException {
        String storeId = null;
        RuleList response = api.getRules(storeId);

        // TODO: test validations
    }
    
    /**
     * Get the rules execution history
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRulesExecutionsTest() throws ApiException {
        String storeId = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        RuleExecutionReportings response = api.getRulesExecutions(storeId, pageNumber, pageSize);

        // TODO: test validations
    }
    
    /**
     * Move the rule down
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveDownRuleTest() throws ApiException {
        String storeId = null;
        String ruleId = null;
        api.moveDownRule(storeId, ruleId);

        // TODO: test validations
    }
    
    /**
     * Move the rule up
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveUpRuleTest() throws ApiException {
        String storeId = null;
        String ruleId = null;
        api.moveUpRule(storeId, ruleId);

        // TODO: test validations
    }
    
    /**
     * Run rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runRuleTest() throws ApiException {
        String storeId = null;
        String ruleId = null;
        api.runRule(storeId, ruleId);

        // TODO: test validations
    }
    
    /**
     * Run all rules for this store
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runRulesTest() throws ApiException {
        String storeId = null;
        api.runRules(storeId);

        // TODO: test validations
    }
    
    /**
     * Update Rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRuleTest() throws ApiException {
        String storeId = null;
        String ruleId = null;
        UpdateRuleRequest request = null;
        api.updateRule(storeId, ruleId, request);

        // TODO: test validations
    }
    
}
