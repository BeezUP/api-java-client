/*
 * BeezUP API
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/beezUP/API) 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BeezUPCommonErrorResponseMessage;
import io.swagger.client.model.ChangeCustomColumnRequest;
import io.swagger.client.model.ConfigureCatalogColumnCatalogRequest;
import io.swagger.client.model.CustomColumns;
import io.swagger.client.model.DetectedCatalogColumns;
import io.swagger.client.model.MapBeezUPColumnRequest;
import io.swagger.client.model.ProductSample;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CatalogsImportationCatalogInfoApi
 */
@Ignore
public class CatalogsImportationCatalogInfoApiTest {

    private final CatalogsImportationCatalogInfoApi api = new CatalogsImportationCatalogInfoApi();

    
    /**
     * Configure catalog column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationConfigureCatalogColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        ConfigureCatalogColumnCatalogRequest request = null;
        api.importationConfigureCatalogColumn(storeId, executionId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Delete Custom Column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationDeleteCustomColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        api.importationDeleteCustomColumn(storeId, executionId, columnId);

        // TODO: test validations
    }
    
    /**
     * Get the encrypted custom column expression in this importation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetCustomColumnExpressionTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        String response = api.importationGetCustomColumnExpression(storeId, executionId, columnId);

        // TODO: test validations
    }
    
    /**
     * Get custom columns currently place in this importation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetCustomColumnsTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        CustomColumns response = api.importationGetCustomColumns(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Get detected catalog columns during this importation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetDetectedCatalogColumnsTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        DetectedCatalogColumns response = api.importationGetDetectedCatalogColumns(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Get the product sample related to this importation with all columns (catalog and custom)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetProductSampleTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        Integer productSampleIndex = null;
        ProductSample response = api.importationGetProductSample(storeId, executionId, productSampleIndex);

        // TODO: test validations
    }
    
    /**
     * Get product sample custom column value related to this importation.
     *
     * /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetProductSampleCustomColumnValueTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        Integer productSampleIndex = null;
        String columnId = null;
        String response = api.importationGetProductSampleCustomColumnValue(storeId, executionId, productSampleIndex, columnId);

        // TODO: test validations
    }
    
    /**
     * Ignore Column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationIgnoreColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        api.importationIgnoreColumn(storeId, executionId, columnId);

        // TODO: test validations
    }
    
    /**
     * Map catalog column to a BeezUP column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationMapCatalogColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        MapBeezUPColumnRequest request = null;
        api.importationMapCatalogColumn(storeId, executionId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Map custom column to a BeezUP column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationMapCustomColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        MapBeezUPColumnRequest request = null;
        api.importationMapCustomColumn(storeId, executionId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Reattend Column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationReattendColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        api.importationReattendColumn(storeId, executionId, columnId);

        // TODO: test validations
    }
    
    /**
     * Create or replace a custom column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationSaveCustomColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        ChangeCustomColumnRequest request = null;
        api.importationSaveCustomColumn(storeId, executionId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Unmap catalog column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationUnmapCatalogColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        api.importationUnmapCatalogColumn(storeId, executionId, columnId);

        // TODO: test validations
    }
    
    /**
     * Unmap custom column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationUnmapCustomColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        api.importationUnmapCustomColumn(storeId, executionId, columnId);

        // TODO: test validations
    }
    
}
