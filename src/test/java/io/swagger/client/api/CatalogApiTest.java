/*
 * BeezUP API
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BeezUPCommonErrorResponseMessage;
import io.swagger.client.model.CatalogColumns;
import io.swagger.client.model.Categories;
import io.swagger.client.model.ChangeCustomColumnExpressionRequest;
import io.swagger.client.model.ChangeUserColumnNameRequest;
import io.swagger.client.model.ComputeExpressionRequest;
import io.swagger.client.model.CreateCustomColumnRequest;
import io.swagger.client.model.CustomColumns;
import io.swagger.client.model.GetProductsRequest;
import io.swagger.client.model.InlineResponse409;
import io.swagger.client.model.LastManualImportInputConfiguration;
import io.swagger.client.model.Product;
import io.swagger.client.model.Products;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CatalogApi
 */
@Ignore
public class CatalogApiTest {

    private final CatalogApi api = new CatalogApi();

    
    /**
     * Change Catalog Column User Name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogChangeCatalogColumnUserNameTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        ChangeUserColumnNameRequest request = null;
        api.catalogChangeCatalogColumnUserName(storeId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Change custom column expression
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogChangeCustomColumnExpressionTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        ChangeCustomColumnExpressionRequest request = null;
        api.catalogChangeCustomColumnExpression(storeId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Change Custom Column User Name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogChangeCustomColumnUserNameTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        ChangeUserColumnNameRequest request = null;
        api.catalogChangeCustomColumnUserName(storeId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Compute the expression for this catalog.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogComputeExpressionTest() throws ApiException {
        String storeId = null;
        ComputeExpressionRequest request = null;
        String response = api.catalogComputeExpression(storeId, request);

        // TODO: test validations
    }
    
    /**
     * Delete custom column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogDeleteCustomColumnTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        api.catalogDeleteCustomColumn(storeId, columnId);

        // TODO: test validations
    }
    
    /**
     * Get catalog column list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetCatalogColumnsTest() throws ApiException {
        String storeId = null;
        CatalogColumns response = api.catalogGetCatalogColumns(storeId);

        // TODO: test validations
    }
    
    /**
     * Get category list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetCategoriesTest() throws ApiException {
        String storeId = null;
        List<String> acceptEncoding = null;
        Categories response = api.catalogGetCategories(storeId, acceptEncoding);

        // TODO: test validations
    }
    
    /**
     * Get the encrypted custom column expression
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetCustomColumnExpressionTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        String response = api.catalogGetCustomColumnExpression(storeId, columnId);

        // TODO: test validations
    }
    
    /**
     * Get custom column list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetCustomColumnsTest() throws ApiException {
        String storeId = null;
        CustomColumns response = api.catalogGetCustomColumns(storeId);

        // TODO: test validations
    }
    
    /**
     * Get product
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetProductTest() throws ApiException {
        String storeId = null;
        String productId = null;
        Product response = api.catalogGetProduct(storeId, productId);

        // TODO: test validations
    }
    
    /**
     * Get product list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetProductsTest() throws ApiException {
        String storeId = null;
        GetProductsRequest request = null;
        Products response = api.catalogGetProducts(storeId, request);

        // TODO: test validations
    }
    
    /**
     * Get random product list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetRandomProductsTest() throws ApiException {
        String storeId = null;
        Integer count = null;
        Products response = api.catalogGetRandomProducts(storeId, count);

        // TODO: test validations
    }
    
    /**
     * Create or replace a custom column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogSaveCustomColumnTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        CreateCustomColumnRequest request = null;
        api.catalogSaveCustomColumn(storeId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Get the last input configuration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetManualUpdateLastInputConfigTest() throws ApiException {
        String storeId = null;
        LastManualImportInputConfiguration response = api.importationGetManualUpdateLastInputConfig(storeId);

        // TODO: test validations
    }
    
}
