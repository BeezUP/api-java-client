/*
 * BeezUP API
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/beezUP/API) 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AccountInfo;
import io.swagger.client.model.BeezUPCommonErrorResponseMessage;
import io.swagger.client.model.ChangePasswordRequest;
import io.swagger.client.model.CompanyInfo;
import io.swagger.client.model.CreditCardInfo;
import io.swagger.client.model.CreditCardInfoResponse;
import io.swagger.client.model.PersonalInfo;
import io.swagger.client.model.ProfilePictureInfo;
import io.swagger.client.model.ProfilePictureInfoResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomerAccountApi
 */
@Ignore
public class CustomerAccountApiTest {

    private final CustomerAccountApi api = new CustomerAccountApi();

    
    /**
     * Activate the user account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activateUserAccountTest() throws ApiException {
        String emailActivationId = null;
        api.activateUserAccount(emailActivationId);

        // TODO: test validations
    }
    
    /**
     * Change user password
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changePasswordTest() throws ApiException {
        ChangePasswordRequest request = null;
        api.changePassword(request);

        // TODO: test validations
    }
    
    /**
     * Get credit card information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCreditCardInfoTest() throws ApiException {
        CreditCardInfoResponse response = api.getCreditCardInfo();

        // TODO: test validations
    }
    
    /**
     * Get profile picture information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProfilePictureInfoTest() throws ApiException {
        ProfilePictureInfoResponse response = api.getProfilePictureInfo();

        // TODO: test validations
    }
    
    /**
     * Get user account information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserAccountInfoTest() throws ApiException {
        AccountInfo response = api.getUserAccountInfo();

        // TODO: test validations
    }
    
    /**
     * Resend email activation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resendEmailActivationTest() throws ApiException {
        api.resendEmailActivation();

        // TODO: test validations
    }
    
    /**
     * Change company information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveCompanyInfoTest() throws ApiException {
        CompanyInfo request = null;
        api.saveCompanyInfo(request);

        // TODO: test validations
    }
    
    /**
     * Save user credit card info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveCreditCardInfoTest() throws ApiException {
        CreditCardInfo request = null;
        api.saveCreditCardInfo(request);

        // TODO: test validations
    }
    
    /**
     * Save user personal information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePersonalInfoTest() throws ApiException {
        PersonalInfo request = null;
        api.savePersonalInfo(request);

        // TODO: test validations
    }
    
    /**
     * Change user picture information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveProfilePictureInfoTest() throws ApiException {
        ProfilePictureInfo request = null;
        api.saveProfilePictureInfo(request);

        // TODO: test validations
    }
    
}
