/*
 * BeezUP API
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AutoImportConfiguration;
import io.swagger.client.model.BeezUPColumnConfiguration;
import io.swagger.client.model.BeezUPCommonErrorResponseMessage;
import io.swagger.client.model.BeezUPCommonLink2;
import io.swagger.client.model.CatalogColumns;
import io.swagger.client.model.Categories;
import io.swagger.client.model.ChangeCustomColumnExpressionRequest;
import io.swagger.client.model.ChangeCustomColumnRequest;
import io.swagger.client.model.ChangeUserColumnNameRequest;
import io.swagger.client.model.ComputeExpressionRequest;
import io.swagger.client.model.ConfigureAutoImportIntervalRequest;
import io.swagger.client.model.ConfigureCatalogColumnCatalogRequest;
import io.swagger.client.model.CreateCustomColumnRequest;
import io.swagger.client.model.CustomColumns;
import io.swagger.client.model.DetectedCatalogColumns;
import io.swagger.client.model.GetProductsRequest;
import io.swagger.client.model.ImportationMonitoring;
import io.swagger.client.model.ImportationReporting;
import io.swagger.client.model.ImportationTechnicalProgression;
import io.swagger.client.model.InlineResponse409;
import io.swagger.client.model.LastManualImportInputConfiguration;
import io.swagger.client.model.MapBeezUPColumnRequest;
import io.swagger.client.model.Product;
import io.swagger.client.model.ProductSample;
import io.swagger.client.model.Products;
import io.swagger.client.model.ScheduleAutoImportRequest;
import io.swagger.client.model.StartManualImportRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for V2UserCatalogsApi
 */
@Ignore
public class V2UserCatalogsApiTest {

    private final V2UserCatalogsApi api = new V2UserCatalogsApi();

    
    /**
     * Configure Auto Import Interval
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoConfigureAutoImportIntervalTest() throws ApiException {
        String storeId = null;
        ConfigureAutoImportIntervalRequest request = null;
        api.autoConfigureAutoImportInterval(storeId, request);

        // TODO: test validations
    }
    
    /**
     * Delete Auto Import
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoDeleteAutoImportTest() throws ApiException {
        String storeId = null;
        api.autoDeleteAutoImport(storeId);

        // TODO: test validations
    }
    
    /**
     * Get the auto import configuration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoGetAutoImportConfigurationTest() throws ApiException {
        String storeId = null;
        AutoImportConfiguration response = api.autoGetAutoImportConfiguration(storeId);

        // TODO: test validations
    }
    
    /**
     * Pause Auto Import
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoPauseAutoImportTest() throws ApiException {
        String storeId = null;
        api.autoPauseAutoImport(storeId);

        // TODO: test validations
    }
    
    /**
     * Resume Auto Import
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoResumeAutoImportTest() throws ApiException {
        String storeId = null;
        api.autoResumeAutoImport(storeId);

        // TODO: test validations
    }
    
    /**
     * Configure Auto Import Schedules
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoScheduleAutoImportTest() throws ApiException {
        String storeId = null;
        ScheduleAutoImportRequest request = null;
        api.autoScheduleAutoImport(storeId, request);

        // TODO: test validations
    }
    
    /**
     * Start Auto Import Manually
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void autoStartAutoImportTest() throws ApiException {
        String storeId = null;
        List<BeezUPCommonLink2> response = api.autoStartAutoImport(storeId);

        // TODO: test validations
    }
    
    /**
     * Change Catalog Column User Name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogChangeCatalogColumnUserNameTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        ChangeUserColumnNameRequest request = null;
        api.catalogChangeCatalogColumnUserName(storeId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Change custom column expression
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogChangeCustomColumnExpressionTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        ChangeCustomColumnExpressionRequest request = null;
        api.catalogChangeCustomColumnExpression(storeId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Change Custom Column User Name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogChangeCustomColumnUserNameTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        ChangeUserColumnNameRequest request = null;
        api.catalogChangeCustomColumnUserName(storeId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Compute the expression for this catalog.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogComputeExpressionTest() throws ApiException {
        String storeId = null;
        ComputeExpressionRequest request = null;
        String response = api.catalogComputeExpression(storeId, request);

        // TODO: test validations
    }
    
    /**
     * Delete custom column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogDeleteCustomColumnTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        api.catalogDeleteCustomColumn(storeId, columnId);

        // TODO: test validations
    }
    
    /**
     * Get the BeezUP columns
     *
     * Get the BeezUP columns, this columns are used for mapping during the manual catalog importation process.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetBeezUPColumnsTest() throws ApiException {
        List<BeezUPColumnConfiguration> response = api.catalogGetBeezUPColumns();

        // TODO: test validations
    }
    
    /**
     * Get catalog column list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetCatalogColumnsTest() throws ApiException {
        String storeId = null;
        CatalogColumns response = api.catalogGetCatalogColumns(storeId);

        // TODO: test validations
    }
    
    /**
     * Get category list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetCategoriesTest() throws ApiException {
        String storeId = null;
        List<String> acceptEncoding = null;
        Categories response = api.catalogGetCategories(storeId, acceptEncoding);

        // TODO: test validations
    }
    
    /**
     * Get the encrypted custom column expression
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetCustomColumnExpressionTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        String response = api.catalogGetCustomColumnExpression(storeId, columnId);

        // TODO: test validations
    }
    
    /**
     * Get custom column list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetCustomColumnsTest() throws ApiException {
        String storeId = null;
        CustomColumns response = api.catalogGetCustomColumns(storeId);

        // TODO: test validations
    }
    
    /**
     * Get product
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetProductTest() throws ApiException {
        String storeId = null;
        String productId = null;
        Product response = api.catalogGetProduct(storeId, productId);

        // TODO: test validations
    }
    
    /**
     * Get product list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetProductsTest() throws ApiException {
        String storeId = null;
        GetProductsRequest request = null;
        Products response = api.catalogGetProducts(storeId, request);

        // TODO: test validations
    }
    
    /**
     * Get random product list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogGetRandomProductsTest() throws ApiException {
        String storeId = null;
        Integer count = null;
        Products response = api.catalogGetRandomProducts(storeId, count);

        // TODO: test validations
    }
    
    /**
     * Create or replace a custom column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void catalogSaveCustomColumnTest() throws ApiException {
        String storeId = null;
        String columnId = null;
        CreateCustomColumnRequest request = null;
        api.catalogSaveCustomColumn(storeId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Activate the auto importation of the last successful manual catalog importation.
     *
     * Once you have made your fist manual catalog importation with success, you can call this operation to import it automatically. No parameter required, we know which one it is.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationActivateAutoImportTest() throws ApiException {
        String storeId = null;
        api.importationActivateAutoImport(storeId);

        // TODO: test validations
    }
    
    /**
     * Cancel importation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationCancelTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        api.importationCancel(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Commit Importation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationCommitTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        api.importationCommit(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Commit columns
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationCommitColumnsTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        api.importationCommitColumns(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Configure catalog column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationConfigureCatalogColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        ConfigureCatalogColumnCatalogRequest request = null;
        api.importationConfigureCatalogColumn(storeId, executionId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Configure remaining catalog columns
     *
     * This operation should be used after you have mapped the required BeezUP Columns
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationConfigureRemainingCatalogColumnsTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        api.importationConfigureRemainingCatalogColumns(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Delete Custom Column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationDeleteCustomColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        api.importationDeleteCustomColumn(storeId, executionId, columnId);

        // TODO: test validations
    }
    
    /**
     * Get the encrypted custom column expression in this importation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetCustomColumnExpressionTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        String response = api.importationGetCustomColumnExpression(storeId, executionId, columnId);

        // TODO: test validations
    }
    
    /**
     * Get custom columns currently place in this importation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetCustomColumnsTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        CustomColumns response = api.importationGetCustomColumns(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Get detected catalog columns during this importation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetDetectedCatalogColumnsTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        DetectedCatalogColumns response = api.importationGetDetectedCatalogColumns(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Get the importation status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetImportationMonitoringTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        ImportationMonitoring response = api.importationGetImportationMonitoring(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Get the last input configuration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetManualUpdateLastInputConfigTest() throws ApiException {
        String storeId = null;
        LastManualImportInputConfiguration response = api.importationGetManualUpdateLastInputConfig(storeId);

        // TODO: test validations
    }
    
    /**
     * Get the product sample related to this importation with all columns (catalog and custom)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetProductSampleTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        Integer productSampleIndex = null;
        ProductSample response = api.importationGetProductSample(storeId, executionId, productSampleIndex);

        // TODO: test validations
    }
    
    /**
     * Get product sample custom column value related to this importation.
     *
     * /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetProductSampleCustomColumnValueTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        Integer productSampleIndex = null;
        String columnId = null;
        String response = api.importationGetProductSampleCustomColumnValue(storeId, executionId, productSampleIndex, columnId);

        // TODO: test validations
    }
    
    /**
     * Get the latest catalog importation reporting
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationGetReportingsTest() throws ApiException {
        String storeId = null;
        List<ImportationReporting> response = api.importationGetReportings(storeId);

        // TODO: test validations
    }
    
    /**
     * Ignore Column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationIgnoreColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        api.importationIgnoreColumn(storeId, executionId, columnId);

        // TODO: test validations
    }
    
    /**
     * Map catalog column to a BeezUP column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationMapCatalogColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        MapBeezUPColumnRequest request = null;
        api.importationMapCatalogColumn(storeId, executionId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Map custom column to a BeezUP column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationMapCustomColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        MapBeezUPColumnRequest request = null;
        api.importationMapCustomColumn(storeId, executionId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Reattend Column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationReattendColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        api.importationReattendColumn(storeId, executionId, columnId);

        // TODO: test validations
    }
    
    /**
     * Create or replace a custom column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationSaveCustomColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        ChangeCustomColumnRequest request = null;
        api.importationSaveCustomColumn(storeId, executionId, columnId, request);

        // TODO: test validations
    }
    
    /**
     * Start Manual Import
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationStartManualUpdateTest() throws ApiException {
        String storeId = null;
        StartManualImportRequest request = null;
        List<BeezUPCommonLink2> response = api.importationStartManualUpdate(storeId, request);

        // TODO: test validations
    }
    
    /**
     * Get technical progression
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationTechnicalProgressionTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        ImportationTechnicalProgression response = api.importationTechnicalProgression(storeId, executionId);

        // TODO: test validations
    }
    
    /**
     * Unmap catalog column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationUnmapCatalogColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        api.importationUnmapCatalogColumn(storeId, executionId, columnId);

        // TODO: test validations
    }
    
    /**
     * Unmap custom column
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importationUnmapCustomColumnTest() throws ApiException {
        String storeId = null;
        String executionId = null;
        String columnId = null;
        api.importationUnmapCustomColumn(storeId, executionId, columnId);

        // TODO: test validations
    }
    
}
